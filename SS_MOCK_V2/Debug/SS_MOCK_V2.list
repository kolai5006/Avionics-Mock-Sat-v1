
SS_MOCK_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b34  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08008ce0  08008ce0  00009ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d2c  08008d2c  0000a00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008d2c  08008d2c  00009d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d34  08008d34  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d34  08008d34  00009d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d38  08008d38  00009d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008d3c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  2000000c  08008d48  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  08008d48  0000a78c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f00e  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003951  00000000  00000000  0002904a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c40  00000000  00000000  0002c9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000163a  00000000  00000000  0002e5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004759  00000000  00000000  0002fc1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020c70  00000000  00000000  00034373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f419  00000000  00000000  00054fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001743fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b14  00000000  00000000  00174440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0017bf54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008cc8 	.word	0x08008cc8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08008cc8 	.word	0x08008cc8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <BNO055_Read>:
#endif

/*
 * Local Read Function to BNO055
 */
static inline HAL_StatusTypeDef BNO055_Read(uint8_t reg, uint8_t* buf, uint8_t len){
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af02      	add	r7, sp, #8
 800051e:	4603      	mov	r3, r0
 8000520:	6039      	str	r1, [r7, #0]
 8000522:	71fb      	strb	r3, [r7, #7]
 8000524:	4613      	mov	r3, r2
 8000526:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef error;

	error = HAL_I2C_Master_Transmit(BNO055_I2C, BNO055_I2C_ADDR<<1, &reg, 1, BNO055_WRITE_TIMEOUT);
 8000528:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <BNO055_Read+0x50>)
 800052a:	6818      	ldr	r0, [r3, #0]
 800052c:	1dfa      	adds	r2, r7, #7
 800052e:	2364      	movs	r3, #100	@ 0x64
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2301      	movs	r3, #1
 8000534:	2150      	movs	r1, #80	@ 0x50
 8000536:	f003 fe09 	bl	800414c <HAL_I2C_Master_Transmit>
 800053a:	4603      	mov	r3, r0
 800053c:	73fb      	strb	r3, [r7, #15]
	error |= HAL_I2C_Master_Receive(BNO055_I2C, BNO055_I2C_ADDR<<1, buf, len, BNO055_READ_TIMEOUT);
 800053e:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <BNO055_Read+0x50>)
 8000540:	6818      	ldr	r0, [r3, #0]
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	b29b      	uxth	r3, r3
 8000546:	2264      	movs	r2, #100	@ 0x64
 8000548:	9200      	str	r2, [sp, #0]
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	2150      	movs	r1, #80	@ 0x50
 800054e:	f003 ff15 	bl	800437c <HAL_I2C_Master_Receive>
 8000552:	4603      	mov	r3, r0
 8000554:	461a      	mov	r2, r3
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	4313      	orrs	r3, r2
 800055a:	73fb      	strb	r3, [r7, #15]

	return error;
 800055c:	7bfb      	ldrb	r3, [r7, #15]

}
 800055e:	4618      	mov	r0, r3
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000028 	.word	0x20000028

0800056c <BNO055_Write>:

/*
 * Local Write Function to BNO055
 */
static inline HAL_StatusTypeDef BNO055_Write(uint8_t reg, uint8_t data){
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
 8000572:	4603      	mov	r3, r0
 8000574:	460a      	mov	r2, r1
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	4613      	mov	r3, r2
 800057a:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef error;
	uint8_t transmitBuf[2] = {reg, data};
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	733b      	strb	r3, [r7, #12]
 8000580:	79bb      	ldrb	r3, [r7, #6]
 8000582:	737b      	strb	r3, [r7, #13]

	error = HAL_I2C_Master_Transmit(BNO055_I2C, BNO055_I2C_ADDR<<1, transmitBuf, sizeof(transmitBuf), BNO055_WRITE_TIMEOUT);
 8000584:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <BNO055_Write+0x3c>)
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	f107 020c 	add.w	r2, r7, #12
 800058c:	2364      	movs	r3, #100	@ 0x64
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2302      	movs	r3, #2
 8000592:	2150      	movs	r1, #80	@ 0x50
 8000594:	f003 fdda 	bl	800414c <HAL_I2C_Master_Transmit>
 8000598:	4603      	mov	r3, r0
 800059a:	73fb      	strb	r3, [r7, #15]

	return error;
 800059c:	7bfb      	ldrb	r3, [r7, #15]

}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <BNO055_ERROR_HANDLE>:

/*
 * Simple Error Check Function
 */
static inline void BNO055_ERROR_HANDLE(HAL_StatusTypeDef error){
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	if(error != HAL_OK){
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <BNO055_ERROR_HANDLE+0x14>
		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
		while(1);
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <BNO055_ERROR_HANDLE+0x10>
	}
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <BNO055_STATUS_CHECK_AND_SET>:
/**
 * Check Current Mode and Page 
 * Set Current Mode and Page to new mode and poge
 * Updates state struct instance
 */
static inline void BNO055_STATUS_CHECK_AND_SET(BNO055_STATE* currState, BNO055_OPERATION_MODE newMode, uint8_t newPage){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	70fb      	strb	r3, [r7, #3]
 80005d8:	4613      	mov	r3, r2
 80005da:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef error;

	/* Check and Set Current Mode to new Mode */
	if(currState->currentMode != newMode){
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	78fa      	ldrb	r2, [r7, #3]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d010      	beq.n	8000608 <BNO055_STATUS_CHECK_AND_SET+0x3c>
		error = BNO055_Write(BNO055_OPR_MODE, newMode);
 80005e6:	78fb      	ldrb	r3, [r7, #3]
 80005e8:	4619      	mov	r1, r3
 80005ea:	203d      	movs	r0, #61	@ 0x3d
 80005ec:	f7ff ffbe 	bl	800056c <BNO055_Write>
 80005f0:	4603      	mov	r3, r0
 80005f2:	73fb      	strb	r3, [r7, #15]
		BNO055_ERROR_HANDLE(error);
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffd8 	bl	80005ac <BNO055_ERROR_HANDLE>
		currState->currentMode = newMode;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	78fa      	ldrb	r2, [r7, #3]
 8000600:	701a      	strb	r2, [r3, #0]
		HAL_Delay(20);
 8000602:	2014      	movs	r0, #20
 8000604:	f002 f954 	bl	80028b0 <HAL_Delay>
	}

	/* Check and Set current page to new page */
	if(currState->currentPage != newPage){
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	785b      	ldrb	r3, [r3, #1]
 800060c:	78ba      	ldrb	r2, [r7, #2]
 800060e:	429a      	cmp	r2, r3
 8000610:	d010      	beq.n	8000634 <BNO055_STATUS_CHECK_AND_SET+0x68>
		error = BNO055_Write(BNO055_PAGE_ID, newPage);
 8000612:	78bb      	ldrb	r3, [r7, #2]
 8000614:	4619      	mov	r1, r3
 8000616:	2007      	movs	r0, #7
 8000618:	f7ff ffa8 	bl	800056c <BNO055_Write>
 800061c:	4603      	mov	r3, r0
 800061e:	73fb      	strb	r3, [r7, #15]
		BNO055_ERROR_HANDLE(error);
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffc2 	bl	80005ac <BNO055_ERROR_HANDLE>
		currState->currentPage = newPage;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	78ba      	ldrb	r2, [r7, #2]
 800062c:	705a      	strb	r2, [r3, #1]
		HAL_Delay(20);
 800062e:	2014      	movs	r0, #20
 8000630:	f002 f93e 	bl	80028b0 <HAL_Delay>
	}
}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <BNO055_I2C_Mount>:

/*
 * Allow User to Mount I2C Handle
 */
void BNO055_I2C_Mount(I2C_HandleTypeDef* i2c){
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	BNO055_I2C = i2c;
 8000644:	4a04      	ldr	r2, [pc, #16]	@ (8000658 <BNO055_I2C_Mount+0x1c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000028 	.word	0x20000028

0800065c <BNO055_Init>:
	Reset_Pin = GPIO_Pin;
}

#endif

BNO055_ERROR BNO055_Init(void){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0


	HAL_Delay(700);
 8000662:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000666:	f002 f923 	bl	80028b0 <HAL_Delay>
	HAL_StatusTypeDef error;
	uint8_t ID_Check = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	71bb      	strb	r3, [r7, #6]

	/* Read Chip ID Register to see if BNO055 is detected*/
	error = BNO055_Read(BNO055_CHIP_ID, &ID_Check, 1);
 800066e:	1dbb      	adds	r3, r7, #6
 8000670:	2201      	movs	r2, #1
 8000672:	4619      	mov	r1, r3
 8000674:	2000      	movs	r0, #0
 8000676:	f7ff ff4f 	bl	8000518 <BNO055_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
	BNO055_ERROR_HANDLE(error);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff93 	bl	80005ac <BNO055_ERROR_HANDLE>
	if(ID_Check != BNO055_EXPECTED_ID)
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	2ba0      	cmp	r3, #160	@ 0xa0
 800068a:	d001      	beq.n	8000690 <BNO055_Init+0x34>
		return BNO055_NOT_DETECTED;
 800068c:	2301      	movs	r3, #1
 800068e:	e051      	b.n	8000734 <BNO055_Init+0xd8>

	/* Software Reset Module */
	error = BNO055_Write(BNO055_SYS_TRIGGER, BNO055_SYS_RESET);
 8000690:	2120      	movs	r1, #32
 8000692:	203f      	movs	r0, #63	@ 0x3f
 8000694:	f7ff ff6a 	bl	800056c <BNO055_Write>
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
	BNO055_ERROR_HANDLE(error);
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff84 	bl	80005ac <BNO055_ERROR_HANDLE>
	HAL_Delay(700);													//Necessary Delay when Soft Reset
 80006a4:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80006a8:	f002 f902 	bl	80028b0 <HAL_Delay>
		HAL_Delay(20);
		HAL_GPIO_WritePin(Reset_Port, Reset_Pin, GPIO_PIN_SET);
	#endif

	/* Set Register Page to 0 and Clear System Trigger*/
	error = BNO055_Write(BNO055_PAGE_ID, BNO055_PAGE_0);
 80006ac:	2100      	movs	r1, #0
 80006ae:	2007      	movs	r0, #7
 80006b0:	f7ff ff5c 	bl	800056c <BNO055_Write>
 80006b4:	4603      	mov	r3, r0
 80006b6:	71fb      	strb	r3, [r7, #7]
	BNO055_ERROR_HANDLE(error);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff76 	bl	80005ac <BNO055_ERROR_HANDLE>
	state.currentPage = BNO055_PAGE_0;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	@ (800073c <BNO055_Init+0xe0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	705a      	strb	r2, [r3, #1]
	HAL_Delay(20);
 80006c6:	2014      	movs	r0, #20
 80006c8:	f002 f8f2 	bl	80028b0 <HAL_Delay>

	/* Set BNO055 Operation Mode to CONFIG MODE*/
	error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_CONFIG);
 80006cc:	2100      	movs	r1, #0
 80006ce:	203d      	movs	r0, #61	@ 0x3d
 80006d0:	f7ff ff4c 	bl	800056c <BNO055_Write>
 80006d4:	4603      	mov	r3, r0
 80006d6:	71fb      	strb	r3, [r7, #7]
	BNO055_ERROR_HANDLE(error);
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff66 	bl	80005ac <BNO055_ERROR_HANDLE>
	state.currentMode = CONFIG;
 80006e0:	4b16      	ldr	r3, [pc, #88]	@ (800073c <BNO055_Init+0xe0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]

	/* Necessary Delay to Set Operation Mode */
	HAL_Delay(10);
 80006e6:	200a      	movs	r0, #10
 80006e8:	f002 f8e2 	bl	80028b0 <HAL_Delay>

	error = BNO055_Write(BNO055_SYS_TRIGGER, 0x01);
 80006ec:	2101      	movs	r1, #1
 80006ee:	203f      	movs	r0, #63	@ 0x3f
 80006f0:	f7ff ff3c 	bl	800056c <BNO055_Write>
 80006f4:	4603      	mov	r3, r0
 80006f6:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 80006f8:	2064      	movs	r0, #100	@ 0x64
 80006fa:	f002 f8d9 	bl	80028b0 <HAL_Delay>

	error = BNO055_Write(BNO055_PAGE_ID, BNO055_PAGE_0);
 80006fe:	2100      	movs	r1, #0
 8000700:	2007      	movs	r0, #7
 8000702:	f7ff ff33 	bl	800056c <BNO055_Write>
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
		BNO055_ERROR_HANDLE(error);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff4d 	bl	80005ac <BNO055_ERROR_HANDLE>
		state.currentPage = BNO055_PAGE_0;
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <BNO055_Init+0xe0>)
 8000714:	2200      	movs	r2, #0
 8000716:	705a      	strb	r2, [r3, #1]
		HAL_Delay(20);
 8000718:	2014      	movs	r0, #20
 800071a:	f002 f8c9 	bl	80028b0 <HAL_Delay>

	uint8_t ST_Result = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	717b      	strb	r3, [r7, #5]
	error = BNO055_Read(BNO055_ST_RESULT, &ST_Result , 1);
 8000722:	1d7b      	adds	r3, r7, #5
 8000724:	2201      	movs	r2, #1
 8000726:	4619      	mov	r1, r3
 8000728:	2036      	movs	r0, #54	@ 0x36
 800072a:	f7ff fef5 	bl	8000518 <BNO055_Read>
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]


	return BNO055_SUCCESS;
 8000732:	2300      	movs	r3, #0

}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000002c 	.word	0x2000002c

08000740 <BNO055_Set_OP_Mode>:
	BNO055_ERROR_HANDLE(error);

	return BNO055_SUCCESS;
}

BNO055_ERROR BNO055_Set_OP_Mode(BNO055_OPERATION_MODE op){
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef error;

	/* Make sure BNO055 is on Page 0 */
	if(state.currentPage != BNO055_PAGE_0){
 800074a:	4b4b      	ldr	r3, [pc, #300]	@ (8000878 <BNO055_Set_OP_Mode+0x138>)
 800074c:	785b      	ldrb	r3, [r3, #1]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00f      	beq.n	8000772 <BNO055_Set_OP_Mode+0x32>
		error = BNO055_Write(BNO055_PAGE_ID, BNO055_PAGE_0);
 8000752:	2100      	movs	r1, #0
 8000754:	2007      	movs	r0, #7
 8000756:	f7ff ff09 	bl	800056c <BNO055_Write>
 800075a:	4603      	mov	r3, r0
 800075c:	73fb      	strb	r3, [r7, #15]
		BNO055_ERROR_HANDLE(error);
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff23 	bl	80005ac <BNO055_ERROR_HANDLE>
		state.currentPage = BNO055_PAGE_0;
 8000766:	4b44      	ldr	r3, [pc, #272]	@ (8000878 <BNO055_Set_OP_Mode+0x138>)
 8000768:	2200      	movs	r2, #0
 800076a:	705a      	strb	r2, [r3, #1]
		HAL_Delay(20);
 800076c:	2014      	movs	r0, #20
 800076e:	f002 f89f 	bl	80028b0 <HAL_Delay>
	}

	switch(op){
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	3b01      	subs	r3, #1
 8000776:	2b0b      	cmp	r3, #11
 8000778:	d867      	bhi.n	800084a <BNO055_Set_OP_Mode+0x10a>
 800077a:	a201      	add	r2, pc, #4	@ (adr r2, 8000780 <BNO055_Set_OP_Mode+0x40>)
 800077c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000780:	080007b1 	.word	0x080007b1
 8000784:	080007bf 	.word	0x080007bf
 8000788:	080007cd 	.word	0x080007cd
 800078c:	080007db 	.word	0x080007db
 8000790:	080007e9 	.word	0x080007e9
 8000794:	080007f7 	.word	0x080007f7
 8000798:	0800084b 	.word	0x0800084b
 800079c:	08000805 	.word	0x08000805
 80007a0:	08000813 	.word	0x08000813
 80007a4:	08000821 	.word	0x08000821
 80007a8:	0800082f 	.word	0x0800082f
 80007ac:	0800083d 	.word	0x0800083d
		case ACC_ONLY:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_ACCONLY);
 80007b0:	2101      	movs	r1, #1
 80007b2:	203d      	movs	r0, #61	@ 0x3d
 80007b4:	f7ff feda 	bl	800056c <BNO055_Write>
 80007b8:	4603      	mov	r3, r0
 80007ba:	73fb      	strb	r3, [r7, #15]
			break;
 80007bc:	e04c      	b.n	8000858 <BNO055_Set_OP_Mode+0x118>

		case MAG_ONLY:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_MAGONLY);
 80007be:	2102      	movs	r1, #2
 80007c0:	203d      	movs	r0, #61	@ 0x3d
 80007c2:	f7ff fed3 	bl	800056c <BNO055_Write>
 80007c6:	4603      	mov	r3, r0
 80007c8:	73fb      	strb	r3, [r7, #15]
			break;
 80007ca:	e045      	b.n	8000858 <BNO055_Set_OP_Mode+0x118>

		case GYRO_ONLY:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_GRYOONLY);
 80007cc:	2103      	movs	r1, #3
 80007ce:	203d      	movs	r0, #61	@ 0x3d
 80007d0:	f7ff fecc 	bl	800056c <BNO055_Write>
 80007d4:	4603      	mov	r3, r0
 80007d6:	73fb      	strb	r3, [r7, #15]
			break;
 80007d8:	e03e      	b.n	8000858 <BNO055_Set_OP_Mode+0x118>

		case ACC_MAG:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_ACCMAG);
 80007da:	2104      	movs	r1, #4
 80007dc:	203d      	movs	r0, #61	@ 0x3d
 80007de:	f7ff fec5 	bl	800056c <BNO055_Write>
 80007e2:	4603      	mov	r3, r0
 80007e4:	73fb      	strb	r3, [r7, #15]
			break;
 80007e6:	e037      	b.n	8000858 <BNO055_Set_OP_Mode+0x118>

		case ACC_GYRO:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_ACCGYRO);
 80007e8:	2105      	movs	r1, #5
 80007ea:	203d      	movs	r0, #61	@ 0x3d
 80007ec:	f7ff febe 	bl	800056c <BNO055_Write>
 80007f0:	4603      	mov	r3, r0
 80007f2:	73fb      	strb	r3, [r7, #15]
			break;
 80007f4:	e030      	b.n	8000858 <BNO055_Set_OP_Mode+0x118>

		case MAG_GYRO:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_MAGGRYO);
 80007f6:	2106      	movs	r1, #6
 80007f8:	203d      	movs	r0, #61	@ 0x3d
 80007fa:	f7ff feb7 	bl	800056c <BNO055_Write>
 80007fe:	4603      	mov	r3, r0
 8000800:	73fb      	strb	r3, [r7, #15]
			break;
 8000802:	e029      	b.n	8000858 <BNO055_Set_OP_Mode+0x118>

		case IMU:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_IMU);
 8000804:	2108      	movs	r1, #8
 8000806:	203d      	movs	r0, #61	@ 0x3d
 8000808:	f7ff feb0 	bl	800056c <BNO055_Write>
 800080c:	4603      	mov	r3, r0
 800080e:	73fb      	strb	r3, [r7, #15]
			break;
 8000810:	e022      	b.n	8000858 <BNO055_Set_OP_Mode+0x118>

		case COMPASS:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_COMPASS);
 8000812:	2109      	movs	r1, #9
 8000814:	203d      	movs	r0, #61	@ 0x3d
 8000816:	f7ff fea9 	bl	800056c <BNO055_Write>
 800081a:	4603      	mov	r3, r0
 800081c:	73fb      	strb	r3, [r7, #15]
			break;
 800081e:	e01b      	b.n	8000858 <BNO055_Set_OP_Mode+0x118>

		case M4G:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_M4G);
 8000820:	210a      	movs	r1, #10
 8000822:	203d      	movs	r0, #61	@ 0x3d
 8000824:	f7ff fea2 	bl	800056c <BNO055_Write>
 8000828:	4603      	mov	r3, r0
 800082a:	73fb      	strb	r3, [r7, #15]
			break;
 800082c:	e014      	b.n	8000858 <BNO055_Set_OP_Mode+0x118>

		case NDOF_FMC_OFF:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_NDOF_FMC);
 800082e:	210b      	movs	r1, #11
 8000830:	203d      	movs	r0, #61	@ 0x3d
 8000832:	f7ff fe9b 	bl	800056c <BNO055_Write>
 8000836:	4603      	mov	r3, r0
 8000838:	73fb      	strb	r3, [r7, #15]
			break;
 800083a:	e00d      	b.n	8000858 <BNO055_Set_OP_Mode+0x118>

		case NDOF:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_NDOF);
 800083c:	210c      	movs	r1, #12
 800083e:	203d      	movs	r0, #61	@ 0x3d
 8000840:	f7ff fe94 	bl	800056c <BNO055_Write>
 8000844:	4603      	mov	r3, r0
 8000846:	73fb      	strb	r3, [r7, #15]
			break;
 8000848:	e006      	b.n	8000858 <BNO055_Set_OP_Mode+0x118>

		default:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_CONFIG);
 800084a:	2100      	movs	r1, #0
 800084c:	203d      	movs	r0, #61	@ 0x3d
 800084e:	f7ff fe8d 	bl	800056c <BNO055_Write>
 8000852:	4603      	mov	r3, r0
 8000854:	73fb      	strb	r3, [r7, #15]
			break;
 8000856:	bf00      	nop
	}

	BNO055_ERROR_HANDLE(error);
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fea6 	bl	80005ac <BNO055_ERROR_HANDLE>
	state.currentMode = op;
 8000860:	4a05      	ldr	r2, [pc, #20]	@ (8000878 <BNO055_Set_OP_Mode+0x138>)
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	7013      	strb	r3, [r2, #0]
	HAL_Delay(10);
 8000866:	200a      	movs	r0, #10
 8000868:	f002 f822 	bl	80028b0 <HAL_Delay>
	return BNO055_SUCCESS;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000002c 	.word	0x2000002c

0800087c <BNO055_Set_Axis>:

BNO055_ERROR BNO055_Set_Axis(const BNO055_AXIS_CONFIG_t* axesConfig){
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	
	HAL_StatusTypeDef error; 

	/* Makes sure BNO055 is in CONFIG mode and Page 0 */
	BNO055_STATUS_CHECK_AND_SET(&state, CONFIG, BNO055_PAGE_0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	4813      	ldr	r0, [pc, #76]	@ (80008d8 <BNO055_Set_Axis+0x5c>)
 800088a:	f7ff fe9f 	bl	80005cc <BNO055_STATUS_CHECK_AND_SET>

	/* Configure Axis based on Axis Config Struct */
	uint8_t temp = (axesConfig->x << BNO055_X_AXIS_OFFSET) |
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b25a      	sxtb	r2, r3
				   (axesConfig->y << BNO055_Y_AXIS_OFFSET) |
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	785b      	ldrb	r3, [r3, #1]
	uint8_t temp = (axesConfig->x << BNO055_X_AXIS_OFFSET) |
 8000898:	b25b      	sxtb	r3, r3
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	b25b      	sxtb	r3, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	b25a      	sxtb	r2, r3
				   (axesConfig->z << BNO055_Z_AXIS_OFFSET);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	789b      	ldrb	r3, [r3, #2]
				   (axesConfig->y << BNO055_Y_AXIS_OFFSET) |
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	011b      	lsls	r3, r3, #4
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	4313      	orrs	r3, r2
 80008ae:	b25b      	sxtb	r3, r3
	uint8_t temp = (axesConfig->x << BNO055_X_AXIS_OFFSET) |
 80008b0:	73fb      	strb	r3, [r7, #15]

	error = BNO055_Write(BNO055_AXIS_MAP_CONFIG, temp);
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	4619      	mov	r1, r3
 80008b6:	2041      	movs	r0, #65	@ 0x41
 80008b8:	f7ff fe58 	bl	800056c <BNO055_Write>
 80008bc:	4603      	mov	r3, r0
 80008be:	73bb      	strb	r3, [r7, #14]
	BNO055_ERROR_HANDLE(error);
 80008c0:	7bbb      	ldrb	r3, [r7, #14]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe72 	bl	80005ac <BNO055_ERROR_HANDLE>
	HAL_Delay(10);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f001 fff1 	bl	80028b0 <HAL_Delay>

	return BNO055_SUCCESS;
 80008ce:	2300      	movs	r3, #0
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000002c 	.word	0x2000002c

080008dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

    /* Custom Axis */
    BNO055_AXIS_CONFIG_t axis_config = {.x = BNO055_Z_AXIS,
 80008e2:	4a54      	ldr	r2, [pc, #336]	@ (8000a34 <main+0x158>)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	4611      	mov	r1, r2
 80008ea:	8019      	strh	r1, [r3, #0]
 80008ec:	3302      	adds	r3, #2
 80008ee:	0c12      	lsrs	r2, r2, #16
 80008f0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f001 ff68 	bl	80027c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f6:	f000 f8bf 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f000 fea7 	bl	800164c <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80008fe:	f000 fb35 	bl	8000f6c <MX_QUADSPI_Init>
  MX_TIM1_Init();
 8000902:	f000 fbdb 	bl	80010bc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000906:	f000 fce5 	bl	80012d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800090a:	f000 fd39 	bl	8001380 <MX_TIM4_Init>
  MX_TIM5_Init();
 800090e:	f000 fd8d 	bl	800142c <MX_TIM5_Init>
  MX_UART4_Init();
 8000912:	f000 fa99 	bl	8000e48 <MX_UART4_Init>
  MX_CAN1_Init();
 8000916:	f000 f975 	bl	8000c04 <MX_CAN1_Init>
  MX_I2C2_Init();
 800091a:	f000 f9e7 	bl	8000cec <MX_I2C2_Init>
  MX_TIM2_Init();
 800091e:	f000 fc85 	bl	800122c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000922:	f000 fac1 	bl	8000ea8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000926:	f000 faf1 	bl	8000f0c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800092a:	f000 f8f5 	bl	8000b18 <MX_ADC1_Init>
  MX_I2C4_Init();
 800092e:	f000 fa1d 	bl	8000d6c <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 8000932:	f000 fa5b 	bl	8000dec <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 8000936:	f000 fb83 	bl	8001040 <MX_SPI3_Init>
  MX_I2C1_Init();
 800093a:	f000 f997 	bl	8000c6c <MX_I2C1_Init>
  MX_SPI1_Init();
 800093e:	f000 fb41 	bl	8000fc4 <MX_SPI1_Init>
  MX_TIM15_Init();
 8000942:	f000 fdff 	bl	8001544 <MX_TIM15_Init>
  MX_TIM7_Init();
 8000946:	f000 fdc7 	bl	80014d8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  //IMU STUFF
  BNO055_I2C_Mount(&hi2c2);
 800094a:	483b      	ldr	r0, [pc, #236]	@ (8000a38 <main+0x15c>)
 800094c:	f7ff fe76 	bl	800063c <BNO055_I2C_Mount>
  if(BNO055_Init() != BNO055_SUCCESS)
 8000950:	f7ff fe84 	bl	800065c <BNO055_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <main+0x82>
      while(1);
 800095a:	bf00      	nop
 800095c:	e7fd      	b.n	800095a <main+0x7e>
  if(BNO055_Set_OP_Mode(NDOF) != BNO055_SUCCESS)
 800095e:	200c      	movs	r0, #12
 8000960:	f7ff feee 	bl	8000740 <BNO055_Set_OP_Mode>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <main+0x92>
      while(1);
 800096a:	bf00      	nop
 800096c:	e7fd      	b.n	800096a <main+0x8e>
  if(BNO055_Set_Axis(&axis_config) != BNO055_SUCCESS)
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff83 	bl	800087c <BNO055_Set_Axis>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <main+0xa4>
      while(1);
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <main+0xa0>

  float y_avg = 0.0;
 8000980:	f04f 0300 	mov.w	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  float z_avg = 0.0;
 8000986:	f04f 0300 	mov.w	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]

  //MOTOR CONTROLLER INIT
  init_default_motor(&X_Motor, &htim15, TIM_CHANNEL_1, GPIOB, GPIO_PIN_15);
 800098c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	4b2a      	ldr	r3, [pc, #168]	@ (8000a3c <main+0x160>)
 8000994:	2200      	movs	r2, #0
 8000996:	492a      	ldr	r1, [pc, #168]	@ (8000a40 <main+0x164>)
 8000998:	482a      	ldr	r0, [pc, #168]	@ (8000a44 <main+0x168>)
 800099a:	f000 ff6d 	bl	8001878 <init_default_motor>
  init_default_motor(&Y_Motor, &htim1, TIM_CHANNEL_2, GPIOE, GPIO_PIN_11);
 800099e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	4b28      	ldr	r3, [pc, #160]	@ (8000a48 <main+0x16c>)
 80009a6:	2204      	movs	r2, #4
 80009a8:	4928      	ldr	r1, [pc, #160]	@ (8000a4c <main+0x170>)
 80009aa:	4829      	ldr	r0, [pc, #164]	@ (8000a50 <main+0x174>)
 80009ac:	f000 ff64 	bl	8001878 <init_default_motor>
  init_default_motor(&Z_Motor, &htim1, TIM_CHANNEL_1, GPIOE, GPIO_PIN_9);
 80009b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	4b24      	ldr	r3, [pc, #144]	@ (8000a48 <main+0x16c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	4924      	ldr	r1, [pc, #144]	@ (8000a4c <main+0x170>)
 80009bc:	4825      	ldr	r0, [pc, #148]	@ (8000a54 <main+0x178>)
 80009be:	f000 ff5b 	bl	8001878 <init_default_motor>

  //starts encoder for all x,y,z listed from top to bottom
  Motor_Enc_Start(&htim4);
 80009c2:	4825      	ldr	r0, [pc, #148]	@ (8000a58 <main+0x17c>)
 80009c4:	f001 f8b4 	bl	8001b30 <Motor_Enc_Start>
  Motor_Enc_Start(&htim5);
 80009c8:	4824      	ldr	r0, [pc, #144]	@ (8000a5c <main+0x180>)
 80009ca:	f001 f8b1 	bl	8001b30 <Motor_Enc_Start>
  Motor_Enc_Start(&htim3);
 80009ce:	4824      	ldr	r0, [pc, #144]	@ (8000a60 <main+0x184>)
 80009d0:	f001 f8ae 	bl	8001b30 <Motor_Enc_Start>

  //initializes the variables within the motor calc
  Motor_Enc_Init(&motor_x_var);
 80009d4:	4823      	ldr	r0, [pc, #140]	@ (8000a64 <main+0x188>)
 80009d6:	f001 f894 	bl	8001b02 <Motor_Enc_Init>
  Motor_Enc_Init(&motor_y_var);
 80009da:	4823      	ldr	r0, [pc, #140]	@ (8000a68 <main+0x18c>)
 80009dc:	f001 f891 	bl	8001b02 <Motor_Enc_Init>
  Motor_Enc_Init(&motor_z_var);
 80009e0:	4822      	ldr	r0, [pc, #136]	@ (8000a6c <main+0x190>)
 80009e2:	f001 f88e 	bl	8001b02 <Motor_Enc_Init>

  //tim 7 is a 10ms interrupt flag
  HAL_TIM_Base_Start_IT(&htim7);
 80009e6:	4822      	ldr	r0, [pc, #136]	@ (8000a70 <main+0x194>)
 80009e8:	f005 fe34 	bl	8006654 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_GPIO_WritePin(MCU_LED_GPIO_Port, MCU_LED_Pin, SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2101      	movs	r1, #1
 80009f0:	4820      	ldr	r0, [pc, #128]	@ (8000a74 <main+0x198>)
 80009f2:	f003 faf7 	bl	8003fe4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80009f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009fa:	f001 ff59 	bl	80028b0 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_LED_GPIO_Port, MCU_LED_Pin, RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2101      	movs	r1, #1
 8000a02:	481c      	ldr	r0, [pc, #112]	@ (8000a74 <main+0x198>)
 8000a04:	f003 faee 	bl	8003fe4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000a08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a0c:	f001 ff50 	bl	80028b0 <HAL_Delay>

/*
	turns on motor
	__HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,1);*/

	drive_motor(&X_Motor, 1);
 8000a10:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000a14:	480b      	ldr	r0, [pc, #44]	@ (8000a44 <main+0x168>)
 8000a16:	f000 ff89 	bl	800192c <drive_motor>
	drive_motor(&Y_Motor, 0.5);
 8000a1a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8000a1e:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <main+0x174>)
 8000a20:	f000 ff84 	bl	800192c <drive_motor>
	drive_motor(&Z_Motor, 0.25);
 8000a24:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8000a28:	480a      	ldr	r0, [pc, #40]	@ (8000a54 <main+0x178>)
 8000a2a:	f000 ff7f 	bl	800192c <drive_motor>
	HAL_GPIO_WritePin(MCU_LED_GPIO_Port, MCU_LED_Pin, SET);
 8000a2e:	bf00      	nop
 8000a30:	e7dc      	b.n	80009ec <main+0x110>
 8000a32:	bf00      	nop
 8000a34:	08008ce0 	.word	0x08008ce0
 8000a38:	20000114 	.word	0x20000114
 8000a3c:	48000400 	.word	0x48000400
 8000a40:	200006b8 	.word	0x200006b8
 8000a44:	20000734 	.word	0x20000734
 8000a48:	48001000 	.word	0x48001000
 8000a4c:	200004f0 	.word	0x200004f0
 8000a50:	20000750 	.word	0x20000750
 8000a54:	2000076c 	.word	0x2000076c
 8000a58:	200005d4 	.word	0x200005d4
 8000a5c:	20000620 	.word	0x20000620
 8000a60:	20000588 	.word	0x20000588
 8000a64:	20000704 	.word	0x20000704
 8000a68:	20000714 	.word	0x20000714
 8000a6c:	20000724 	.word	0x20000724
 8000a70:	2000066c 	.word	0x2000066c
 8000a74:	48001800 	.word	0x48001800

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b096      	sub	sp, #88	@ 0x58
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	2244      	movs	r2, #68	@ 0x44
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f008 f8f2 	bl	8008c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a9a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a9e:	f004 f8af 	bl	8004c00 <HAL_PWREx_ControlVoltageScaling>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000aa8:	f000 fee0 	bl	800186c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aac:	2301      	movs	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ab4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aba:	2303      	movs	r3, #3
 8000abc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000ac2:	2314      	movs	r3, #20
 8000ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f004 f9ba 	bl	8004e50 <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ae2:	f000 fec3 	bl	800186c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2303      	movs	r3, #3
 8000aec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	2104      	movs	r1, #4
 8000afe:	4618      	mov	r0, r3
 8000b00:	f004 fdc0 	bl	8005684 <HAL_RCC_ClockConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b0a:	f000 feaf 	bl	800186c <Error_Handler>
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3758      	adds	r7, #88	@ 0x58
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	@ 0x28
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b3c:	4a2f      	ldr	r2, [pc, #188]	@ (8000bfc <MX_ADC1_Init+0xe4>)
 8000b3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b40:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b46:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b52:	4b29      	ldr	r3, [pc, #164]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b58:	4b27      	ldr	r3, [pc, #156]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b5e:	4b26      	ldr	r3, [pc, #152]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b64:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b6a:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b70:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b9a:	4817      	ldr	r0, [pc, #92]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000b9c:	f002 f84c 	bl	8002c38 <HAL_ADC_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ba6:	f000 fe61 	bl	800186c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4810      	ldr	r0, [pc, #64]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000bb6:	f002 fdc5 	bl	8003744 <HAL_ADCEx_MultiModeConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000bc0:	f000 fe54 	bl	800186c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <MX_ADC1_Init+0xe8>)
 8000bc6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc8:	2306      	movs	r3, #6
 8000bca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bd0:	237f      	movs	r3, #127	@ 0x7f
 8000bd2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_ADC1_Init+0xe0>)
 8000be2:	f002 f97d 	bl	8002ee0 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000bec:	f000 fe3e 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	@ 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000030 	.word	0x20000030
 8000bfc:	50040000 	.word	0x50040000
 8000c00:	43210000 	.word	0x43210000

08000c04 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c08:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <MX_CAN1_Init+0x60>)
 8000c0a:	4a17      	ldr	r2, [pc, #92]	@ (8000c68 <MX_CAN1_Init+0x64>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000c0e:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <MX_CAN1_Init+0x60>)
 8000c10:	2210      	movs	r2, #16
 8000c12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c14:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <MX_CAN1_Init+0x60>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c1a:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <MX_CAN1_Init+0x60>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000c20:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <MX_CAN1_Init+0x60>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <MX_CAN1_Init+0x60>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <MX_CAN1_Init+0x60>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <MX_CAN1_Init+0x60>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <MX_CAN1_Init+0x60>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <MX_CAN1_Init+0x60>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c44:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <MX_CAN1_Init+0x60>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <MX_CAN1_Init+0x60>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <MX_CAN1_Init+0x60>)
 8000c52:	f002 fe27 	bl	80038a4 <HAL_CAN_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000c5c:	f000 fe06 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000098 	.word	0x20000098
 8000c68:	40006400 	.word	0x40006400

08000c6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce4 <MX_I2C1_Init+0x78>)
 8000c74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce8 <MX_I2C1_Init+0x7c>)
 8000c7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c82:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c88:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ca6:	480e      	ldr	r0, [pc, #56]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000ca8:	f003 f9b4 	bl	8004014 <HAL_I2C_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cb2:	f000 fddb 	bl	800186c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000cba:	f003 fefb 	bl	8004ab4 <HAL_I2CEx_ConfigAnalogFilter>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cc4:	f000 fdd2 	bl	800186c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <MX_I2C1_Init+0x74>)
 8000ccc:	f003 ff3d 	bl	8004b4a <HAL_I2CEx_ConfigDigitalFilter>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cd6:	f000 fdc9 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000c0 	.word	0x200000c0
 8000ce4:	40005400 	.word	0x40005400
 8000ce8:	10d19ce4 	.word	0x10d19ce4

08000cec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d64 <MX_I2C2_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d68 <MX_I2C2_Init+0x7c>)
 8000cfa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d02:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d26:	480e      	ldr	r0, [pc, #56]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d28:	f003 f974 	bl	8004014 <HAL_I2C_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d32:	f000 fd9b 	bl	800186c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d36:	2100      	movs	r1, #0
 8000d38:	4809      	ldr	r0, [pc, #36]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d3a:	f003 febb 	bl	8004ab4 <HAL_I2CEx_ConfigAnalogFilter>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d44:	f000 fd92 	bl	800186c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_I2C2_Init+0x74>)
 8000d4c:	f003 fefd 	bl	8004b4a <HAL_I2CEx_ConfigDigitalFilter>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f000 fd89 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000114 	.word	0x20000114
 8000d64:	40005800 	.word	0x40005800
 8000d68:	10d19ce4 	.word	0x10d19ce4

08000d6c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <MX_I2C4_Init+0x74>)
 8000d72:	4a1c      	ldr	r2, [pc, #112]	@ (8000de4 <MX_I2C4_Init+0x78>)
 8000d74:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10D19CE4;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <MX_I2C4_Init+0x74>)
 8000d78:	4a1b      	ldr	r2, [pc, #108]	@ (8000de8 <MX_I2C4_Init+0x7c>)
 8000d7a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <MX_I2C4_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d82:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_I2C4_Init+0x74>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d88:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <MX_I2C4_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_I2C4_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <MX_I2C4_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_I2C4_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <MX_I2C4_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000da6:	480e      	ldr	r0, [pc, #56]	@ (8000de0 <MX_I2C4_Init+0x74>)
 8000da8:	f003 f934 	bl	8004014 <HAL_I2C_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000db2:	f000 fd5b 	bl	800186c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000db6:	2100      	movs	r1, #0
 8000db8:	4809      	ldr	r0, [pc, #36]	@ (8000de0 <MX_I2C4_Init+0x74>)
 8000dba:	f003 fe7b 	bl	8004ab4 <HAL_I2CEx_ConfigAnalogFilter>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000dc4:	f000 fd52 	bl	800186c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_I2C4_Init+0x74>)
 8000dcc:	f003 febd 	bl	8004b4a <HAL_I2CEx_ConfigDigitalFilter>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000dd6:	f000 fd49 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000168 	.word	0x20000168
 8000de4:	40008400 	.word	0x40008400
 8000de8:	10d19ce4 	.word	0x10d19ce4

08000dec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <MX_LPUART1_UART_Init+0x50>)
 8000df2:	4a13      	ldr	r2, [pc, #76]	@ (8000e40 <MX_LPUART1_UART_Init+0x54>)
 8000df4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <MX_LPUART1_UART_Init+0x50>)
 8000df8:	4a12      	ldr	r2, [pc, #72]	@ (8000e44 <MX_LPUART1_UART_Init+0x58>)
 8000dfa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <MX_LPUART1_UART_Init+0x50>)
 8000dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e02:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <MX_LPUART1_UART_Init+0x50>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <MX_LPUART1_UART_Init+0x50>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <MX_LPUART1_UART_Init+0x50>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <MX_LPUART1_UART_Init+0x50>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <MX_LPUART1_UART_Init+0x50>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <MX_LPUART1_UART_Init+0x50>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e28:	4804      	ldr	r0, [pc, #16]	@ (8000e3c <MX_LPUART1_UART_Init+0x50>)
 8000e2a:	f007 f999 	bl	8008160 <HAL_UART_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000e34:	f000 fd1a 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200001bc 	.word	0x200001bc
 8000e40:	40008000 	.word	0x40008000
 8000e44:	00033324 	.word	0x00033324

08000e48 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <MX_UART4_Init+0x58>)
 8000e4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ea4 <MX_UART4_Init+0x5c>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e52:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <MX_UART4_Init+0x58>)
 8000e54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <MX_UART4_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <MX_UART4_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <MX_UART4_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <MX_UART4_Init+0x58>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <MX_UART4_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <MX_UART4_Init+0x58>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <MX_UART4_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <MX_UART4_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_UART4_Init+0x58>)
 8000e8c:	f007 f968 	bl	8008160 <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000e96:	f000 fce9 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000244 	.word	0x20000244
 8000ea4:	40004c00 	.word	0x40004c00

08000ea8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <MX_USART2_UART_Init+0x5c>)
 8000eae:	4a16      	ldr	r2, [pc, #88]	@ (8000f08 <MX_USART2_UART_Init+0x60>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <MX_USART2_UART_Init+0x5c>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_USART2_UART_Init+0x5c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <MX_USART2_UART_Init+0x5c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_USART2_UART_Init+0x5c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <MX_USART2_UART_Init+0x5c>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <MX_USART2_UART_Init+0x5c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <MX_USART2_UART_Init+0x5c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <MX_USART2_UART_Init+0x5c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <MX_USART2_UART_Init+0x5c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000eea:	2300      	movs	r3, #0
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <MX_USART2_UART_Init+0x5c>)
 8000ef2:	f007 fe56 	bl	8008ba2 <HAL_RS485Ex_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000efc:	f000 fcb6 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200002cc 	.word	0x200002cc
 8000f08:	40004400 	.word	0x40004400

08000f0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f10:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f12:	4a15      	ldr	r2, [pc, #84]	@ (8000f68 <MX_USART3_UART_Init+0x5c>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f16:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f50:	f007 f906 	bl	8008160 <HAL_UART_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f5a:	f000 fc87 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000354 	.word	0x20000354
 8000f68:	40004800 	.word	0x40004800

08000f6c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <MX_QUADSPI_Init+0x50>)
 8000f72:	4a13      	ldr	r2, [pc, #76]	@ (8000fc0 <MX_QUADSPI_Init+0x54>)
 8000f74:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000f76:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_QUADSPI_Init+0x50>)
 8000f78:	22ff      	movs	r2, #255	@ 0xff
 8000f7a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_QUADSPI_Init+0x50>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <MX_QUADSPI_Init+0x50>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <MX_QUADSPI_Init+0x50>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <MX_QUADSPI_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f94:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_QUADSPI_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <MX_QUADSPI_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <MX_QUADSPI_Init+0x50>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_QUADSPI_Init+0x50>)
 8000fa8:	f003 fe90 	bl	8004ccc <HAL_QSPI_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000fb2:	f000 fc5b 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200003dc 	.word	0x200003dc
 8000fc0:	a0001000 	.word	0xa0001000

08000fc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <MX_SPI1_Init+0x74>)
 8000fca:	4a1c      	ldr	r2, [pc, #112]	@ (800103c <MX_SPI1_Init+0x78>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <MX_SPI1_Init+0x74>)
 8000fd0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <MX_SPI1_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <MX_SPI1_Init+0x74>)
 8000fde:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000fe2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_SPI1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fea:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <MX_SPI1_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <MX_SPI1_Init+0x74>)
 8000ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ff6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <MX_SPI1_Init+0x74>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <MX_SPI1_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <MX_SPI1_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <MX_SPI1_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <MX_SPI1_Init+0x74>)
 8001012:	2207      	movs	r2, #7
 8001014:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <MX_SPI1_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <MX_SPI1_Init+0x74>)
 800101e:	2208      	movs	r2, #8
 8001020:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	@ (8001038 <MX_SPI1_Init+0x74>)
 8001024:	f005 fa1c 	bl	8006460 <HAL_SPI_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800102e:	f000 fc1d 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000428 	.word	0x20000428
 800103c:	40013000 	.word	0x40013000

08001040 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001044:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <MX_SPI3_Init+0x74>)
 8001046:	4a1c      	ldr	r2, [pc, #112]	@ (80010b8 <MX_SPI3_Init+0x78>)
 8001048:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800104a:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <MX_SPI3_Init+0x74>)
 800104c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001050:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001052:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <MX_SPI3_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001058:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <MX_SPI3_Init+0x74>)
 800105a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800105e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <MX_SPI3_Init+0x74>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <MX_SPI3_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <MX_SPI3_Init+0x74>)
 800106e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001072:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <MX_SPI3_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <MX_SPI3_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001080:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <MX_SPI3_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <MX_SPI3_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800108c:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <MX_SPI3_Init+0x74>)
 800108e:	2207      	movs	r2, #7
 8001090:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001092:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <MX_SPI3_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <MX_SPI3_Init+0x74>)
 800109a:	2208      	movs	r2, #8
 800109c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <MX_SPI3_Init+0x74>)
 80010a0:	f005 f9de 	bl	8006460 <HAL_SPI_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80010aa:	f000 fbdf 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000048c 	.word	0x2000048c
 80010b8:	40003c00 	.word	0x40003c00

080010bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b09a      	sub	sp, #104	@ 0x68
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	615a      	str	r2, [r3, #20]
 80010ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	222c      	movs	r2, #44	@ 0x2c
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f007 fdba 	bl	8008c70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010fc:	4b49      	ldr	r3, [pc, #292]	@ (8001224 <MX_TIM1_Init+0x168>)
 80010fe:	4a4a      	ldr	r2, [pc, #296]	@ (8001228 <MX_TIM1_Init+0x16c>)
 8001100:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001102:	4b48      	ldr	r3, [pc, #288]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001104:	2200      	movs	r2, #0
 8001106:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001108:	4b46      	ldr	r3, [pc, #280]	@ (8001224 <MX_TIM1_Init+0x168>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3077;
 800110e:	4b45      	ldr	r3, [pc, #276]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001110:	f640 4205 	movw	r2, #3077	@ 0xc05
 8001114:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001116:	4b43      	ldr	r3, [pc, #268]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800111c:	4b41      	ldr	r3, [pc, #260]	@ (8001224 <MX_TIM1_Init+0x168>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001122:	4b40      	ldr	r3, [pc, #256]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001124:	2280      	movs	r2, #128	@ 0x80
 8001126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001128:	483e      	ldr	r0, [pc, #248]	@ (8001224 <MX_TIM1_Init+0x168>)
 800112a:	f005 fa3c 	bl	80065a6 <HAL_TIM_Base_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001134:	f000 fb9a 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800113e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001142:	4619      	mov	r1, r3
 8001144:	4837      	ldr	r0, [pc, #220]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001146:	f006 f895 	bl	8007274 <HAL_TIM_ConfigClockSource>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001150:	f000 fb8c 	bl	800186c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001154:	4833      	ldr	r0, [pc, #204]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001156:	f005 faed 	bl	8006734 <HAL_TIM_PWM_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001160:	f000 fb84 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001164:	2300      	movs	r3, #0
 8001166:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001170:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001174:	4619      	mov	r1, r3
 8001176:	482b      	ldr	r0, [pc, #172]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001178:	f006 fece 	bl	8007f18 <HAL_TIMEx_MasterConfigSynchronization>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001182:	f000 fb73 	bl	800186c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001186:	2360      	movs	r3, #96	@ 0x60
 8001188:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800118e:	2300      	movs	r3, #0
 8001190:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001192:	2300      	movs	r3, #0
 8001194:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	481e      	ldr	r0, [pc, #120]	@ (8001224 <MX_TIM1_Init+0x168>)
 80011ac:	f005 ff4e 	bl	800704c <HAL_TIM_PWM_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011b6:	f000 fb59 	bl	800186c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011be:	2204      	movs	r2, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	@ (8001224 <MX_TIM1_Init+0x168>)
 80011c4:	f005 ff42 	bl	800704c <HAL_TIM_PWM_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80011ce:	f000 fb4d 	bl	800186c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	4619      	mov	r1, r3
 8001206:	4807      	ldr	r0, [pc, #28]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001208:	f006 ff0e 	bl	8008028 <HAL_TIMEx_ConfigBreakDeadTime>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001212:	f000 fb2b 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001216:	4803      	ldr	r0, [pc, #12]	@ (8001224 <MX_TIM1_Init+0x168>)
 8001218:	f001 fa00 	bl	800261c <HAL_TIM_MspPostInit>

}
 800121c:	bf00      	nop
 800121e:	3768      	adds	r7, #104	@ 0x68
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200004f0 	.word	0x200004f0
 8001228:	40012c00 	.word	0x40012c00

0800122c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800124a:	4b21      	ldr	r3, [pc, #132]	@ (80012d0 <MX_TIM2_Init+0xa4>)
 800124c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001250:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001252:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <MX_TIM2_Init+0xa4>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <MX_TIM2_Init+0xa4>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800125e:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <MX_TIM2_Init+0xa4>)
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_TIM2_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_TIM2_Init+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001272:	4817      	ldr	r0, [pc, #92]	@ (80012d0 <MX_TIM2_Init+0xa4>)
 8001274:	f005 fbbc 	bl	80069f0 <HAL_TIM_IC_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800127e:	f000 faf5 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	480f      	ldr	r0, [pc, #60]	@ (80012d0 <MX_TIM2_Init+0xa4>)
 8001292:	f006 fe41 	bl	8007f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800129c:	f000 fae6 	bl	800186c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012a4:	2301      	movs	r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2200      	movs	r2, #0
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	@ (80012d0 <MX_TIM2_Init+0xa4>)
 80012b8:	f005 fe2c 	bl	8006f14 <HAL_TIM_IC_ConfigChannel>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012c2:	f000 fad3 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000053c 	.word	0x2000053c

080012d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08c      	sub	sp, #48	@ 0x30
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	2224      	movs	r2, #36	@ 0x24
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f007 fcc4 	bl	8008c70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <MX_TIM3_Init+0xa4>)
 80012f4:	4a21      	ldr	r2, [pc, #132]	@ (800137c <MX_TIM3_Init+0xa8>)
 80012f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <MX_TIM3_Init+0xa4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <MX_TIM3_Init+0xa4>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3077;
 8001304:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <MX_TIM3_Init+0xa4>)
 8001306:	f640 4205 	movw	r2, #3077	@ 0xc05
 800130a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <MX_TIM3_Init+0xa4>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001312:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <MX_TIM3_Init+0xa4>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001318:	2301      	movs	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001320:	2301      	movs	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001330:	2301      	movs	r3, #1
 8001332:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	4619      	mov	r1, r3
 8001342:	480d      	ldr	r0, [pc, #52]	@ (8001378 <MX_TIM3_Init+0xa4>)
 8001344:	f005 fbab 	bl	8006a9e <HAL_TIM_Encoder_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800134e:	f000 fa8d 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800135a:	463b      	mov	r3, r7
 800135c:	4619      	mov	r1, r3
 800135e:	4806      	ldr	r0, [pc, #24]	@ (8001378 <MX_TIM3_Init+0xa4>)
 8001360:	f006 fdda 	bl	8007f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800136a:	f000 fa7f 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	3730      	adds	r7, #48	@ 0x30
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000588 	.word	0x20000588
 800137c:	40000400 	.word	0x40000400

08001380 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	@ 0x30
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2224      	movs	r2, #36	@ 0x24
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f007 fc6e 	bl	8008c70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	463b      	mov	r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <MX_TIM4_Init+0xa4>)
 80013a0:	4a21      	ldr	r2, [pc, #132]	@ (8001428 <MX_TIM4_Init+0xa8>)
 80013a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <MX_TIM4_Init+0xa4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <MX_TIM4_Init+0xa4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <MX_TIM4_Init+0xa4>)
 80013b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <MX_TIM4_Init+0xa4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <MX_TIM4_Init+0xa4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013cc:	2301      	movs	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013dc:	2301      	movs	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	4619      	mov	r1, r3
 80013ee:	480d      	ldr	r0, [pc, #52]	@ (8001424 <MX_TIM4_Init+0xa4>)
 80013f0:	f005 fb55 	bl	8006a9e <HAL_TIM_Encoder_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80013fa:	f000 fa37 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001406:	463b      	mov	r3, r7
 8001408:	4619      	mov	r1, r3
 800140a:	4806      	ldr	r0, [pc, #24]	@ (8001424 <MX_TIM4_Init+0xa4>)
 800140c:	f006 fd84 	bl	8007f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001416:	f000 fa29 	bl	800186c <Error_Handler>
  /* USER CODE BEGIN TIM4_Init 2 */


  /* USER CODE END TIM4_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	3730      	adds	r7, #48	@ 0x30
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200005d4 	.word	0x200005d4
 8001428:	40000800 	.word	0x40000800

0800142c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	@ 0x30
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2224      	movs	r2, #36	@ 0x24
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f007 fc18 	bl	8008c70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800144a:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <MX_TIM5_Init+0xa4>)
 800144c:	4a21      	ldr	r2, [pc, #132]	@ (80014d4 <MX_TIM5_Init+0xa8>)
 800144e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001450:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <MX_TIM5_Init+0xa4>)
 8001452:	2200      	movs	r2, #0
 8001454:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001456:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <MX_TIM5_Init+0xa4>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3077;
 800145c:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <MX_TIM5_Init+0xa4>)
 800145e:	f640 4205 	movw	r2, #3077	@ 0xc05
 8001462:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <MX_TIM5_Init+0xa4>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <MX_TIM5_Init+0xa4>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001470:	2301      	movs	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001478:	2301      	movs	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001488:	2301      	movs	r3, #1
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	@ (80014d0 <MX_TIM5_Init+0xa4>)
 800149c:	f005 faff 	bl	8006a9e <HAL_TIM_Encoder_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80014a6:	f000 f9e1 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <MX_TIM5_Init+0xa4>)
 80014b8:	f006 fd2e 	bl	8007f18 <HAL_TIMEx_MasterConfigSynchronization>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80014c2:	f000 f9d3 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3730      	adds	r7, #48	@ 0x30
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000620 	.word	0x20000620
 80014d4:	40000c00 	.word	0x40000c00

080014d8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014e8:	4b14      	ldr	r3, [pc, #80]	@ (800153c <MX_TIM7_Init+0x64>)
 80014ea:	4a15      	ldr	r2, [pc, #84]	@ (8001540 <MX_TIM7_Init+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15;
 80014ee:	4b13      	ldr	r3, [pc, #76]	@ (800153c <MX_TIM7_Init+0x64>)
 80014f0:	220f      	movs	r2, #15
 80014f2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <MX_TIM7_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <MX_TIM7_Init+0x64>)
 80014fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001500:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <MX_TIM7_Init+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <MX_TIM7_Init+0x64>)
 800150a:	f005 f84c 	bl	80065a6 <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001514:	f000 f9aa 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	@ (800153c <MX_TIM7_Init+0x64>)
 8001526:	f006 fcf7 	bl	8007f18 <HAL_TIMEx_MasterConfigSynchronization>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001530:	f000 f99c 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	2000066c 	.word	0x2000066c
 8001540:	40001400 	.word	0x40001400

08001544 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b096      	sub	sp, #88	@ 0x58
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001556:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	222c      	movs	r2, #44	@ 0x2c
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f007 fb7d 	bl	8008c70 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001576:	4b33      	ldr	r3, [pc, #204]	@ (8001644 <MX_TIM15_Init+0x100>)
 8001578:	4a33      	ldr	r2, [pc, #204]	@ (8001648 <MX_TIM15_Init+0x104>)
 800157a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800157c:	4b31      	ldr	r3, [pc, #196]	@ (8001644 <MX_TIM15_Init+0x100>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b30      	ldr	r3, [pc, #192]	@ (8001644 <MX_TIM15_Init+0x100>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3077;
 8001588:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <MX_TIM15_Init+0x100>)
 800158a:	f640 4205 	movw	r2, #3077	@ 0xc05
 800158e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b2c      	ldr	r3, [pc, #176]	@ (8001644 <MX_TIM15_Init+0x100>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001596:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <MX_TIM15_Init+0x100>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800159c:	4b29      	ldr	r3, [pc, #164]	@ (8001644 <MX_TIM15_Init+0x100>)
 800159e:	2280      	movs	r2, #128	@ 0x80
 80015a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80015a2:	4828      	ldr	r0, [pc, #160]	@ (8001644 <MX_TIM15_Init+0x100>)
 80015a4:	f005 f8c6 	bl	8006734 <HAL_TIM_PWM_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80015ae:	f000 f95d 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80015ba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015be:	4619      	mov	r1, r3
 80015c0:	4820      	ldr	r0, [pc, #128]	@ (8001644 <MX_TIM15_Init+0x100>)
 80015c2:	f006 fca9 	bl	8007f18 <HAL_TIMEx_MasterConfigSynchronization>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80015cc:	f000 f94e 	bl	800186c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d0:	2360      	movs	r3, #96	@ 0x60
 80015d2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d8:	2300      	movs	r3, #0
 80015da:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015dc:	2300      	movs	r3, #0
 80015de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015f0:	2200      	movs	r2, #0
 80015f2:	4619      	mov	r1, r3
 80015f4:	4813      	ldr	r0, [pc, #76]	@ (8001644 <MX_TIM15_Init+0x100>)
 80015f6:	f005 fd29 	bl	800704c <HAL_TIM_PWM_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001600:	f000 f934 	bl	800186c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001618:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800161c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4619      	mov	r1, r3
 8001626:	4807      	ldr	r0, [pc, #28]	@ (8001644 <MX_TIM15_Init+0x100>)
 8001628:	f006 fcfe 	bl	8008028 <HAL_TIMEx_ConfigBreakDeadTime>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8001632:	f000 f91b 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001636:	4803      	ldr	r0, [pc, #12]	@ (8001644 <MX_TIM15_Init+0x100>)
 8001638:	f000 fff0 	bl	800261c <HAL_TIM_MspPostInit>

}
 800163c:	bf00      	nop
 800163e:	3758      	adds	r7, #88	@ 0x58
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200006b8 	.word	0x200006b8
 8001648:	40014000 	.word	0x40014000

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08e      	sub	sp, #56	@ 0x38
 8001650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001662:	4b68      	ldr	r3, [pc, #416]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	4a67      	ldr	r2, [pc, #412]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 8001668:	f043 0310 	orr.w	r3, r3, #16
 800166c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166e:	4b65      	ldr	r3, [pc, #404]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	623b      	str	r3, [r7, #32]
 8001678:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	4b62      	ldr	r3, [pc, #392]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	4a61      	ldr	r2, [pc, #388]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001686:	4b5f      	ldr	r3, [pc, #380]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001692:	4b5c      	ldr	r3, [pc, #368]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	4a5b      	ldr	r2, [pc, #364]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 8001698:	f043 0320 	orr.w	r3, r3, #32
 800169c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169e:	4b59      	ldr	r3, [pc, #356]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	f003 0320 	and.w	r3, r3, #32
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016aa:	4b56      	ldr	r3, [pc, #344]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	4a55      	ldr	r2, [pc, #340]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 80016b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b6:	4b53      	ldr	r3, [pc, #332]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b50      	ldr	r3, [pc, #320]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	4a4f      	ldr	r2, [pc, #316]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b4a      	ldr	r3, [pc, #296]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	4a49      	ldr	r2, [pc, #292]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e6:	4b47      	ldr	r3, [pc, #284]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f2:	4b44      	ldr	r3, [pc, #272]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f6:	4a43      	ldr	r2, [pc, #268]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 80016f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016fe:	4b41      	ldr	r3, [pc, #260]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170a:	4b3e      	ldr	r3, [pc, #248]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170e:	4a3d      	ldr	r2, [pc, #244]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001716:	4b3b      	ldr	r3, [pc, #236]	@ (8001804 <MX_GPIO_Init+0x1b8>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001722:	f003 fac3 	bl	8004cac <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, WD_EN_Pin|WWDG_Pin|MZ_DIR_Pin|MY_DIR_Pin, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 61a9 	mov.w	r1, #1352	@ 0x548
 800172c:	4836      	ldr	r0, [pc, #216]	@ (8001808 <MX_GPIO_Init+0x1bc>)
 800172e:	f002 fc59 	bl	8003fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MCU_LED_Pin|FRAM_CS1_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	2121      	movs	r1, #33	@ 0x21
 8001736:	4835      	ldr	r0, [pc, #212]	@ (800180c <MX_GPIO_Init+0x1c0>)
 8001738:	f002 fc54 	bl	8003fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, QSPI_CS2_Pin|MX_DIR_Pin|I2C_EN_Pin, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	f249 0120 	movw	r1, #36896	@ 0x9020
 8001742:	4833      	ldr	r0, [pc, #204]	@ (8001810 <MX_GPIO_Init+0x1c4>)
 8001744:	f002 fc4e 	bl	8003fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FRAM_CS3_Pin|FRAM_CS2_Pin|GPS_EN_Pin|USER_3_Pin
 8001748:	2200      	movs	r2, #0
 800174a:	f24c 01f1 	movw	r1, #49393	@ 0xc0f1
 800174e:	4831      	ldr	r0, [pc, #196]	@ (8001814 <MX_GPIO_Init+0x1c8>)
 8001750:	f002 fc48 	bl	8003fe4 <HAL_GPIO_WritePin>
                          |USER_2_Pin|USER_1_Pin|USER_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : WD_EN_Pin WWDG_Pin MZ_DIR_Pin MY_DIR_Pin */
  GPIO_InitStruct.Pin = WD_EN_Pin|WWDG_Pin|MZ_DIR_Pin|MY_DIR_Pin;
 8001754:	f44f 63a9 	mov.w	r3, #1352	@ 0x548
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176a:	4619      	mov	r1, r3
 800176c:	4826      	ldr	r0, [pc, #152]	@ (8001808 <MX_GPIO_Init+0x1bc>)
 800176e:	f002 faa7 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin FRAM_CS1_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|FRAM_CS1_Pin;
 8001772:	2321      	movs	r3, #33	@ 0x21
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	4820      	ldr	r0, [pc, #128]	@ (800180c <MX_GPIO_Init+0x1c0>)
 800178a:	f002 fa99 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATE_Pin */
  GPIO_InitStruct.Pin = BLE_STATE_Pin;
 800178e:	2302      	movs	r3, #2
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001792:	2300      	movs	r3, #0
 8001794:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 800179a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179e:	4619      	mov	r1, r3
 80017a0:	481a      	ldr	r0, [pc, #104]	@ (800180c <MX_GPIO_Init+0x1c0>)
 80017a2:	f002 fa8d 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CS2_Pin MX_DIR_Pin I2C_EN_Pin */
  GPIO_InitStruct.Pin = QSPI_CS2_Pin|MX_DIR_Pin|I2C_EN_Pin;
 80017a6:	f249 0320 	movw	r3, #36896	@ 0x9020
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017bc:	4619      	mov	r1, r3
 80017be:	4814      	ldr	r0, [pc, #80]	@ (8001810 <MX_GPIO_Init+0x1c4>)
 80017c0:	f002 fa7e 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FRAM_CS3_Pin FRAM_CS2_Pin GPS_EN_Pin USER_3_Pin
                           USER_2_Pin USER_1_Pin USER_0_Pin */
  GPIO_InitStruct.Pin = FRAM_CS3_Pin|FRAM_CS2_Pin|GPS_EN_Pin|USER_3_Pin
 80017c4:	f24c 03f1 	movw	r3, #49393	@ 0xc0f1
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |USER_2_Pin|USER_1_Pin|USER_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017da:	4619      	mov	r1, r3
 80017dc:	480d      	ldr	r0, [pc, #52]	@ (8001814 <MX_GPIO_Init+0x1c8>)
 80017de:	f002 fa6f 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_FIX_Pin */
  GPIO_InitStruct.Pin = GPS_FIX_Pin;
 80017e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPS_FIX_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f4:	4619      	mov	r1, r3
 80017f6:	4808      	ldr	r0, [pc, #32]	@ (8001818 <MX_GPIO_Init+0x1cc>)
 80017f8:	f002 fa62 	bl	8003cc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017fc:	bf00      	nop
 80017fe:	3738      	adds	r7, #56	@ 0x38
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40021000 	.word	0x40021000
 8001808:	48001000 	.word	0x48001000
 800180c:	48001800 	.word	0x48001800
 8001810:	48000400 	.word	0x48000400
 8001814:	48000c00 	.word	0x48000c00
 8001818:	48000800 	.word	0x48000800

0800181c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */

//encoder call
// This callback is automatically called by HAL when the timer period elapses
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a09      	ldr	r2, [pc, #36]	@ (8001850 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10b      	bne.n	8001846 <HAL_TIM_PeriodElapsedCallback+0x2a>
		//slang
		Motor_Calc(&htim4, &motor_x_var);
 800182e:	4909      	ldr	r1, [pc, #36]	@ (8001854 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001830:	4809      	ldr	r0, [pc, #36]	@ (8001858 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001832:	f000 f989 	bl	8001b48 <Motor_Calc>
		Motor_Calc(&htim5, &motor_y_var);
 8001836:	4909      	ldr	r1, [pc, #36]	@ (800185c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001838:	4809      	ldr	r0, [pc, #36]	@ (8001860 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800183a:	f000 f985 	bl	8001b48 <Motor_Calc>
		Motor_Calc(&htim3, &motor_z_var);
 800183e:	4909      	ldr	r1, [pc, #36]	@ (8001864 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001840:	4809      	ldr	r0, [pc, #36]	@ (8001868 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001842:	f000 f981 	bl	8001b48 <Motor_Calc>
    //basically encoder ticks in 0.01s/0.01s = ticks per second
    velocity = (float)deltacount / 0.01f;

    // Save current counter value for the next calculation
    previousCounter = counter;*/
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40001400 	.word	0x40001400
 8001854:	20000704 	.word	0x20000704
 8001858:	200005d4 	.word	0x200005d4
 800185c:	20000714 	.word	0x20000714
 8001860:	20000620 	.word	0x20000620
 8001864:	20000724 	.word	0x20000724
 8001868:	20000588 	.word	0x20000588

0800186c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
}
 8001872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <Error_Handler+0x8>

08001878 <init_default_motor>:
void init_default_motor(Motor *RW,
                        TIM_HandleTypeDef *pwm_tim,
                        uint32_t pwm_channel,
                        GPIO_TypeDef *Dir_port,
                        uint16_t Dir_pin)
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
    /*
     * Reaction wheel PWM.
     */
    PWM_Driver RW_pwm = {
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	61bb      	str	r3, [r7, #24]
            pwm_tim,
            pwm_channel,
            pwm_tim->Init.Period
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	68db      	ldr	r3, [r3, #12]
    PWM_Driver RW_pwm = {
 8001892:	61fb      	str	r3, [r7, #28]
    };

    /*
     * Fill parameters.
     */
    RW->Motor_t = RW_pwm;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	461c      	mov	r4, r3
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    RW->DirPort = Dir_port;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	60da      	str	r2, [r3, #12]
    RW->DirPin = Dir_pin;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80018ae:	821a      	strh	r2, [r3, #16]
    RW->max_fwd = MOTOR_SCALE_MAX_FWD;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80018b6:	615a      	str	r2, [r3, #20]
    RW->max_back = MOTOR_SCALE_MAX_BACK;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001928 <init_default_motor+0xb0>)
 80018bc:	619a      	str	r2, [r3, #24]


    __HAL_TIM_SET_COMPARE(
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d104      	bne.n	80018ce <init_default_motor+0x56>
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80018cc:	e023      	b.n	8001916 <init_default_motor+0x9e>
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d104      	bne.n	80018de <init_default_motor+0x66>
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	6393      	str	r3, [r2, #56]	@ 0x38
 80018dc:	e01b      	b.n	8001916 <init_default_motor+0x9e>
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d104      	bne.n	80018ee <init_default_motor+0x76>
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80018ec:	e013      	b.n	8001916 <init_default_motor+0x9e>
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b0c      	cmp	r3, #12
 80018f2:	d104      	bne.n	80018fe <init_default_motor+0x86>
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fc:	e00b      	b.n	8001916 <init_default_motor+0x9e>
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b10      	cmp	r3, #16
 8001902:	d104      	bne.n	800190e <init_default_motor+0x96>
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	6593      	str	r3, [r2, #88]	@ 0x58
 800190c:	e003      	b.n	8001916 <init_default_motor+0x9e>
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	65d3      	str	r3, [r2, #92]	@ 0x5c
        RW_pwm.timer,
        RW_pwm.channel,
        RW_pwm.period);
    HAL_TIM_PWM_Start(pwm_tim, pwm_channel);
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	68b8      	ldr	r0, [r7, #8]
 800191a:	f004 ff63 	bl	80067e4 <HAL_TIM_PWM_Start>

}
 800191e:	bf00      	nop
 8001920:	3724      	adds	r7, #36	@ 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}
 8001926:	bf00      	nop
 8001928:	bf800000 	.word	0xbf800000

0800192c <drive_motor>:

void drive_motor(Motor *RW, float power)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	ed87 0a00 	vstr	s0, [r7]

    PWM_Driver RW_pwm;
    RW_pwm = RW->Motor_t;
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001940:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if (power > 0)
 8001944:	edd7 7a00 	vldr	s15, [r7]
 8001948:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001950:	dd17      	ble.n	8001982 <drive_motor+0x56>
    {
        HAL_GPIO_WritePin(RW->DirPort, RW->DirPin,RESET);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68d8      	ldr	r0, [r3, #12]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	8a1b      	ldrh	r3, [r3, #16]
 800195a:	2200      	movs	r2, #0
 800195c:	4619      	mov	r1, r3
 800195e:	f002 fb41 	bl	8003fe4 <HAL_GPIO_WritePin>
        power = (power > RW->max_fwd) ? RW->max_fwd : power;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edd3 7a05 	vldr	s15, [r3, #20]
 8001968:	ed97 7a00 	vldr	s14, [r7]
 800196c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	dd02      	ble.n	800197c <drive_motor+0x50>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	e000      	b.n	800197e <drive_motor+0x52>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	e01d      	b.n	80019be <drive_motor+0x92>
    }
    else
    {
        HAL_GPIO_WritePin(RW->DirPort, RW->DirPin,SET);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68d8      	ldr	r0, [r3, #12]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	8a1b      	ldrh	r3, [r3, #16]
 800198a:	2201      	movs	r2, #1
 800198c:	4619      	mov	r1, r3
 800198e:	f002 fb29 	bl	8003fe4 <HAL_GPIO_WritePin>
        power = (power < RW->max_back) ? -RW->max_back : -power;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	edd3 7a06 	vldr	s15, [r3, #24]
 8001998:	ed97 7a00 	vldr	s14, [r7]
 800199c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	d505      	bpl.n	80019b2 <drive_motor+0x86>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80019ac:	eef1 7a67 	vneg.f32	s15, s15
 80019b0:	e003      	b.n	80019ba <drive_motor+0x8e>
 80019b2:	edd7 7a00 	vldr	s15, [r7]
 80019b6:	eef1 7a67 	vneg.f32	s15, s15
 80019ba:	edc7 7a00 	vstr	s15, [r7]
    }

    /*
     * Set timer for turning in desired direction.
     */
    __HAL_TIM_SET_COMPARE(
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d117      	bne.n	80019f4 <drive_motor+0xc8>
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	ee07 3a90 	vmov	s15, r3
 80019ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	ee07 3a90 	vmov	s15, r3
 80019d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019d8:	edd7 7a00 	vldr	s15, [r7]
 80019dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ec:	ee17 2a90 	vmov	r2, s15
 80019f0:	635a      	str	r2, [r3, #52]	@ 0x34
        RW_pwm.timer,
        RW_pwm.channel,
        (uint32_t)(RW_pwm.period - (RW_pwm.period * power))
    );
}
 80019f2:	e082      	b.n	8001afa <drive_motor+0x1ce>
    __HAL_TIM_SET_COMPARE(
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d117      	bne.n	8001a2a <drive_motor+0xfe>
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	ee07 3a90 	vmov	s15, r3
 8001a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a0e:	edd7 7a00 	vldr	s15, [r7]
 8001a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a22:	ee17 3a90 	vmov	r3, s15
 8001a26:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001a28:	e067      	b.n	8001afa <drive_motor+0x1ce>
    __HAL_TIM_SET_COMPARE(
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d117      	bne.n	8001a60 <drive_motor+0x134>
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	ee07 3a90 	vmov	s15, r3
 8001a36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a44:	edd7 7a00 	vldr	s15, [r7]
 8001a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a58:	ee17 3a90 	vmov	r3, s15
 8001a5c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001a5e:	e04c      	b.n	8001afa <drive_motor+0x1ce>
    __HAL_TIM_SET_COMPARE(
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	2b0c      	cmp	r3, #12
 8001a64:	d117      	bne.n	8001a96 <drive_motor+0x16a>
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a7a:	edd7 7a00 	vldr	s15, [r7]
 8001a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a8e:	ee17 3a90 	vmov	r3, s15
 8001a92:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a94:	e031      	b.n	8001afa <drive_motor+0x1ce>
    __HAL_TIM_SET_COMPARE(
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	2b10      	cmp	r3, #16
 8001a9a:	d117      	bne.n	8001acc <drive_motor+0x1a0>
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ab0:	edd7 7a00 	vldr	s15, [r7]
 8001ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac4:	ee17 3a90 	vmov	r3, s15
 8001ac8:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8001aca:	e016      	b.n	8001afa <drive_motor+0x1ce>
    __HAL_TIM_SET_COMPARE(
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ae0:	edd7 7a00 	vldr	s15, [r7]
 8001ae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af4:	ee17 3a90 	vmov	r3, s15
 8001af8:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <Motor_Enc_Init>:
 */

#include "motorencoder.h"

//initializing variables
void Motor_Enc_Init(motor_var_enc* s){
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]

	s-> velocity = 0;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
	s-> deltacount = 0;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
	s-> counter = 0;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
	s-> previousCounter = 0;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	60da      	str	r2, [r3, #12]

}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <Motor_Enc_Start>:

//
void Motor_Enc_Start(TIM_HandleTypeDef* htim){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8001b38:	213c      	movs	r1, #60	@ 0x3c
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f005 f855 	bl	8006bea <HAL_TIM_Encoder_Start>

}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <Motor_Calc>:

//short for calculator
//
void Motor_Calc(TIM_HandleTypeDef* htim, motor_var_enc* s){
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]

	s->counter = __HAL_TIM_GET_COUNTER(htim);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	609a      	str	r2, [r3, #8]

	s->deltacount = (int32_t)s->counter - (int32_t)s->previousCounter;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	461a      	mov	r2, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	1ad2      	subs	r2, r2, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	605a      	str	r2, [r3, #4]


	if (s->deltacount <= - ENCODER_MAX_COUNT/2){
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4a17      	ldr	r2, [pc, #92]	@ (8001bd0 <Motor_Calc+0x88>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	da07      	bge.n	8001b86 <Motor_Calc+0x3e>
		s->deltacount += (ENCODER_MAX_COUNT + 1);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f503 4343 	add.w	r3, r3, #49920	@ 0xc300
 8001b7e:	3351      	adds	r3, #81	@ 0x51
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	6053      	str	r3, [r2, #4]
 8001b84:	e00c      	b.n	8001ba0 <Motor_Calc+0x58>


	}else if (s->deltacount >= ENCODER_MAX_COUNT/2){
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	dd06      	ble.n	8001ba0 <Motor_Calc+0x58>
		s->deltacount -= (ENCODER_MAX_COUNT - 1);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f5a3 4343 	sub.w	r3, r3, #49920	@ 0xc300
 8001b9a:	3b4f      	subs	r3, #79	@ 0x4f
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	6053      	str	r3, [r2, #4]

	}

	s->velocity = (float)s->deltacount / 0.01f;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bac:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001bd4 <Motor_Calc+0x8c>
 8001bb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	edc3 7a00 	vstr	s15, [r3]

	s->previousCounter = s->counter;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	60da      	str	r2, [r3, #12]

    // Save current counter value for the next calculation
    previousCounter = counter;*/


}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	ffff9e59 	.word	0xffff9e59
 8001bd4:	3c23d70a 	.word	0x3c23d70a

08001bd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <HAL_MspInit+0x44>)
 8001be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be2:	4a0e      	ldr	r2, [pc, #56]	@ (8001c1c <HAL_MspInit+0x44>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bea:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <HAL_MspInit+0x44>)
 8001bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <HAL_MspInit+0x44>)
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfa:	4a08      	ldr	r2, [pc, #32]	@ (8001c1c <HAL_MspInit+0x44>)
 8001bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_MspInit+0x44>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000

08001c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0ae      	sub	sp, #184	@ 0xb8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c38:	f107 0318 	add.w	r3, r7, #24
 8001c3c:	228c      	movs	r2, #140	@ 0x8c
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f007 f815 	bl	8008c70 <memset>
  if(hadc->Instance==ADC1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a34      	ldr	r2, [pc, #208]	@ (8001d1c <HAL_ADC_MspInit+0xfc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d161      	bne.n	8001d14 <HAL_ADC_MspInit+0xf4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c54:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001c56:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001c5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 8001c62:	2303      	movs	r3, #3
 8001c64:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001c66:	2308      	movs	r3, #8
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c72:	2302      	movs	r3, #2
 8001c74:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c7a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c7c:	f107 0318 	add.w	r3, r7, #24
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 ff23 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001c8c:	f7ff fdee 	bl	800186c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c90:	4b23      	ldr	r3, [pc, #140]	@ (8001d20 <HAL_ADC_MspInit+0x100>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c94:	4a22      	ldr	r2, [pc, #136]	@ (8001d20 <HAL_ADC_MspInit+0x100>)
 8001c96:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c9c:	4b20      	ldr	r3, [pc, #128]	@ (8001d20 <HAL_ADC_MspInit+0x100>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d20 <HAL_ADC_MspInit+0x100>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cac:	4a1c      	ldr	r2, [pc, #112]	@ (8001d20 <HAL_ADC_MspInit+0x100>)
 8001cae:	f043 0304 	orr.w	r3, r3, #4
 8001cb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <HAL_ADC_MspInit+0x100>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc0:	4b17      	ldr	r3, [pc, #92]	@ (8001d20 <HAL_ADC_MspInit+0x100>)
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc4:	4a16      	ldr	r2, [pc, #88]	@ (8001d20 <HAL_ADC_MspInit+0x100>)
 8001cc6:	f043 0302 	orr.w	r3, r3, #2
 8001cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ccc:	4b14      	ldr	r3, [pc, #80]	@ (8001d20 <HAL_ADC_MspInit+0x100>)
 8001cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = IMON_3V3_Pin;
 8001cd8:	2320      	movs	r3, #32
 8001cda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(IMON_3V3_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cee:	4619      	mov	r1, r3
 8001cf0:	480c      	ldr	r0, [pc, #48]	@ (8001d24 <HAL_ADC_MspInit+0x104>)
 8001cf2:	f001 ffe5 	bl	8003cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMON_5V_Pin|VBAT_MON_Pin;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4806      	ldr	r0, [pc, #24]	@ (8001d28 <HAL_ADC_MspInit+0x108>)
 8001d10:	f001 ffd6 	bl	8003cc0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d14:	bf00      	nop
 8001d16:	37b8      	adds	r7, #184	@ 0xb8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	50040000 	.word	0x50040000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	48000800 	.word	0x48000800
 8001d28:	48000400 	.word	0x48000400

08001d2c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	@ 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a17      	ldr	r2, [pc, #92]	@ (8001da8 <HAL_CAN_MspInit+0x7c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d128      	bne.n	8001da0 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d4e:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <HAL_CAN_MspInit+0x80>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d52:	4a16      	ldr	r2, [pc, #88]	@ (8001dac <HAL_CAN_MspInit+0x80>)
 8001d54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5a:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <HAL_CAN_MspInit+0x80>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <HAL_CAN_MspInit+0x80>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6a:	4a10      	ldr	r2, [pc, #64]	@ (8001dac <HAL_CAN_MspInit+0x80>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d72:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <HAL_CAN_MspInit+0x80>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d90:	2309      	movs	r3, #9
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4805      	ldr	r0, [pc, #20]	@ (8001db0 <HAL_CAN_MspInit+0x84>)
 8001d9c:	f001 ff90 	bl	8003cc0 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001da0:	bf00      	nop
 8001da2:	3728      	adds	r7, #40	@ 0x28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40006400 	.word	0x40006400
 8001dac:	40021000 	.word	0x40021000
 8001db0:	48000400 	.word	0x48000400

08001db4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b0b0      	sub	sp, #192	@ 0xc0
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dcc:	f107 0320 	add.w	r3, r7, #32
 8001dd0:	228c      	movs	r2, #140	@ 0x8c
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f006 ff4b 	bl	8008c70 <memset>
  if(hi2c->Instance==I2C1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a63      	ldr	r2, [pc, #396]	@ (8001f6c <HAL_I2C_MspInit+0x1b8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d13b      	bne.n	8001e5c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001de4:	2340      	movs	r3, #64	@ 0x40
 8001de6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dec:	f107 0320 	add.w	r3, r7, #32
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 fe6b 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001dfc:	f7ff fd36 	bl	800186c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e00:	4b5b      	ldr	r3, [pc, #364]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e04:	4a5a      	ldr	r2, [pc, #360]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e0c:	4b58      	ldr	r3, [pc, #352]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e18:	23c0      	movs	r3, #192	@ 0xc0
 8001e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e1e:	2312      	movs	r3, #18
 8001e20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e30:	2304      	movs	r3, #4
 8001e32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	484d      	ldr	r0, [pc, #308]	@ (8001f74 <HAL_I2C_MspInit+0x1c0>)
 8001e3e:	f001 ff3f 	bl	8003cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e42:	4b4b      	ldr	r3, [pc, #300]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e46:	4a4a      	ldr	r2, [pc, #296]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001e48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e4e:	4b48      	ldr	r3, [pc, #288]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001e5a:	e082      	b.n	8001f62 <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a45      	ldr	r2, [pc, #276]	@ (8001f78 <HAL_I2C_MspInit+0x1c4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d13b      	bne.n	8001ede <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e6e:	f107 0320 	add.w	r3, r7, #32
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 fe2a 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8001e7e:	f7ff fcf5 	bl	800186c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e82:	4b3b      	ldr	r3, [pc, #236]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e86:	4a3a      	ldr	r2, [pc, #232]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001e88:	f043 0320 	orr.w	r3, r3, #32
 8001e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e8e:	4b38      	ldr	r3, [pc, #224]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea0:	2312      	movs	r3, #18
 8001ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001eb8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	482f      	ldr	r0, [pc, #188]	@ (8001f7c <HAL_I2C_MspInit+0x1c8>)
 8001ec0:	f001 fefe 	bl	8003cc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec8:	4a29      	ldr	r2, [pc, #164]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001eca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ed0:	4b27      	ldr	r3, [pc, #156]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	693b      	ldr	r3, [r7, #16]
}
 8001edc:	e041      	b.n	8001f62 <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C4)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a27      	ldr	r2, [pc, #156]	@ (8001f80 <HAL_I2C_MspInit+0x1cc>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d13c      	bne.n	8001f62 <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001ee8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001eec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef2:	f107 0320 	add.w	r3, r7, #32
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f003 fde8 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_I2C_MspInit+0x152>
      Error_Handler();
 8001f02:	f7ff fcb3 	bl	800186c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0a:	4a19      	ldr	r2, [pc, #100]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001f0c:	f043 0320 	orr.w	r3, r3, #32
 8001f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f12:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001f1e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001f22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f26:	2312      	movs	r3, #18
 8001f28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001f38:	2304      	movs	r3, #4
 8001f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f3e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f42:	4619      	mov	r1, r3
 8001f44:	480d      	ldr	r0, [pc, #52]	@ (8001f7c <HAL_I2C_MspInit+0x1c8>)
 8001f46:	f001 febb 	bl	8003cc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001f4a:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4e:	4a08      	ldr	r2, [pc, #32]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <HAL_I2C_MspInit+0x1bc>)
 8001f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
}
 8001f62:	bf00      	nop
 8001f64:	37c0      	adds	r7, #192	@ 0xc0
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40005400 	.word	0x40005400
 8001f70:	40021000 	.word	0x40021000
 8001f74:	48000400 	.word	0x48000400
 8001f78:	40005800 	.word	0x40005800
 8001f7c:	48001400 	.word	0x48001400
 8001f80:	40008400 	.word	0x40008400

08001f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b0b2      	sub	sp, #200	@ 0xc8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fa0:	228c      	movs	r2, #140	@ 0x8c
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f006 fe63 	bl	8008c70 <memset>
  if(huart->Instance==LPUART1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a84      	ldr	r2, [pc, #528]	@ (80021c0 <HAL_UART_MspInit+0x23c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d13b      	bne.n	800202c <HAL_UART_MspInit+0xa8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 fd83 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fcc:	f7ff fc4e 	bl	800186c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001fd0:	4b7c      	ldr	r3, [pc, #496]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd4:	4a7b      	ldr	r2, [pc, #492]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001fdc:	4b79      	ldr	r3, [pc, #484]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8001fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe8:	4b76      	ldr	r3, [pc, #472]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8001fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fec:	4a75      	ldr	r2, [pc, #468]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff4:	4b73      	ldr	r3, [pc, #460]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	623b      	str	r3, [r7, #32]
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002000:	2303      	movs	r3, #3
 8002002:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002012:	2303      	movs	r3, #3
 8002014:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002018:	2308      	movs	r3, #8
 800201a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002022:	4619      	mov	r1, r3
 8002024:	4868      	ldr	r0, [pc, #416]	@ (80021c8 <HAL_UART_MspInit+0x244>)
 8002026:	f001 fe4b 	bl	8003cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800202a:	e0c4      	b.n	80021b6 <HAL_UART_MspInit+0x232>
  else if(huart->Instance==UART4)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a66      	ldr	r2, [pc, #408]	@ (80021cc <HAL_UART_MspInit+0x248>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d13c      	bne.n	80020b0 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002036:	2308      	movs	r3, #8
 8002038:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800203a:	2300      	movs	r3, #0
 800203c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800203e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002042:	4618      	mov	r0, r3
 8002044:	f003 fd42 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800204e:	f7ff fc0d 	bl	800186c <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002052:	4b5c      	ldr	r3, [pc, #368]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002056:	4a5b      	ldr	r2, [pc, #364]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8002058:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800205c:	6593      	str	r3, [r2, #88]	@ 0x58
 800205e:	4b59      	ldr	r3, [pc, #356]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800206a:	4b56      	ldr	r3, [pc, #344]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206e:	4a55      	ldr	r2, [pc, #340]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002076:	4b53      	ldr	r3, [pc, #332]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002082:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002086:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800209c:	2308      	movs	r3, #8
 800209e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80020a6:	4619      	mov	r1, r3
 80020a8:	4847      	ldr	r0, [pc, #284]	@ (80021c8 <HAL_UART_MspInit+0x244>)
 80020aa:	f001 fe09 	bl	8003cc0 <HAL_GPIO_Init>
}
 80020ae:	e082      	b.n	80021b6 <HAL_UART_MspInit+0x232>
  else if(huart->Instance==USART2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a46      	ldr	r2, [pc, #280]	@ (80021d0 <HAL_UART_MspInit+0x24c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d13c      	bne.n	8002134 <HAL_UART_MspInit+0x1b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020ba:	2302      	movs	r3, #2
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020be:	2300      	movs	r3, #0
 80020c0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 fd00 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_UART_MspInit+0x152>
      Error_Handler();
 80020d2:	f7ff fbcb 	bl	800186c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d6:	4b3b      	ldr	r3, [pc, #236]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020da:	4a3a      	ldr	r2, [pc, #232]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e2:	4b38      	ldr	r3, [pc, #224]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	4b35      	ldr	r3, [pc, #212]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	4a34      	ldr	r2, [pc, #208]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020fa:	4b32      	ldr	r3, [pc, #200]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002106:	230e      	movs	r3, #14
 8002108:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800211e:	2307      	movs	r3, #7
 8002120:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002128:	4619      	mov	r1, r3
 800212a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800212e:	f001 fdc7 	bl	8003cc0 <HAL_GPIO_Init>
}
 8002132:	e040      	b.n	80021b6 <HAL_UART_MspInit+0x232>
  else if(huart->Instance==USART3)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a26      	ldr	r2, [pc, #152]	@ (80021d4 <HAL_UART_MspInit+0x250>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d13b      	bne.n	80021b6 <HAL_UART_MspInit+0x232>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800213e:	2304      	movs	r3, #4
 8002140:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002142:	2300      	movs	r3, #0
 8002144:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002146:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800214a:	4618      	mov	r0, r3
 800214c:	f003 fcbe 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8002156:	f7ff fb89 	bl	800186c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215e:	4a19      	ldr	r2, [pc, #100]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8002160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002164:	6593      	str	r3, [r2, #88]	@ 0x58
 8002166:	4b17      	ldr	r3, [pc, #92]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002172:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002176:	4a13      	ldr	r2, [pc, #76]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8002178:	f043 0308 	orr.w	r3, r3, #8
 800217c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <HAL_UART_MspInit+0x240>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800218a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800218e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219e:	2303      	movs	r3, #3
 80021a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021a4:	2307      	movs	r3, #7
 80021a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021aa:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80021ae:	4619      	mov	r1, r3
 80021b0:	4809      	ldr	r0, [pc, #36]	@ (80021d8 <HAL_UART_MspInit+0x254>)
 80021b2:	f001 fd85 	bl	8003cc0 <HAL_GPIO_Init>
}
 80021b6:	bf00      	nop
 80021b8:	37c8      	adds	r7, #200	@ 0xc8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40008000 	.word	0x40008000
 80021c4:	40021000 	.word	0x40021000
 80021c8:	48000800 	.word	0x48000800
 80021cc:	40004c00 	.word	0x40004c00
 80021d0:	40004400 	.word	0x40004400
 80021d4:	40004800 	.word	0x40004800
 80021d8:	48000c00 	.word	0x48000c00

080021dc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a26      	ldr	r2, [pc, #152]	@ (8002294 <HAL_QSPI_MspInit+0xb8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d145      	bne.n	800228a <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80021fe:	4b26      	ldr	r3, [pc, #152]	@ (8002298 <HAL_QSPI_MspInit+0xbc>)
 8002200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002202:	4a25      	ldr	r2, [pc, #148]	@ (8002298 <HAL_QSPI_MspInit+0xbc>)
 8002204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002208:	6513      	str	r3, [r2, #80]	@ 0x50
 800220a:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <HAL_QSPI_MspInit+0xbc>)
 800220c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800220e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002216:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <HAL_QSPI_MspInit+0xbc>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	4a1f      	ldr	r2, [pc, #124]	@ (8002298 <HAL_QSPI_MspInit+0xbc>)
 800221c:	f043 0310 	orr.w	r3, r3, #16
 8002220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002222:	4b1d      	ldr	r3, [pc, #116]	@ (8002298 <HAL_QSPI_MspInit+0xbc>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <HAL_QSPI_MspInit+0xbc>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002232:	4a19      	ldr	r2, [pc, #100]	@ (8002298 <HAL_QSPI_MspInit+0xbc>)
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800223a:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <HAL_QSPI_MspInit+0xbc>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002246:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800224a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002254:	2303      	movs	r3, #3
 8002256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002258:	230a      	movs	r3, #10
 800225a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	4619      	mov	r1, r3
 8002262:	480e      	ldr	r0, [pc, #56]	@ (800229c <HAL_QSPI_MspInit+0xc0>)
 8002264:	f001 fd2c 	bl	8003cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002268:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800226c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800227a:	230a      	movs	r3, #10
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4619      	mov	r1, r3
 8002284:	4806      	ldr	r0, [pc, #24]	@ (80022a0 <HAL_QSPI_MspInit+0xc4>)
 8002286:	f001 fd1b 	bl	8003cc0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800228a:	bf00      	nop
 800228c:	3728      	adds	r7, #40	@ 0x28
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	a0001000 	.word	0xa0001000
 8002298:	40021000 	.word	0x40021000
 800229c:	48001000 	.word	0x48001000
 80022a0:	48000400 	.word	0x48000400

080022a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08c      	sub	sp, #48	@ 0x30
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 031c 	add.w	r3, r7, #28
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a30      	ldr	r2, [pc, #192]	@ (8002384 <HAL_SPI_MspInit+0xe0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d12a      	bne.n	800231c <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022c6:	4b30      	ldr	r3, [pc, #192]	@ (8002388 <HAL_SPI_MspInit+0xe4>)
 80022c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002388 <HAL_SPI_MspInit+0xe4>)
 80022cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80022d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002388 <HAL_SPI_MspInit+0xe4>)
 80022d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022de:	4b2a      	ldr	r3, [pc, #168]	@ (8002388 <HAL_SPI_MspInit+0xe4>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e2:	4a29      	ldr	r2, [pc, #164]	@ (8002388 <HAL_SPI_MspInit+0xe4>)
 80022e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ea:	4b27      	ldr	r3, [pc, #156]	@ (8002388 <HAL_SPI_MspInit+0xe4>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 80022f6:	f002 fcd9 	bl	8004cac <HAL_PWREx_EnableVddIO2>
    /**SPI1 GPIO Configuration
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80022fa:	231c      	movs	r3, #28
 80022fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002306:	2303      	movs	r3, #3
 8002308:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800230a:	2305      	movs	r3, #5
 800230c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800230e:	f107 031c 	add.w	r3, r7, #28
 8002312:	4619      	mov	r1, r3
 8002314:	481d      	ldr	r0, [pc, #116]	@ (800238c <HAL_SPI_MspInit+0xe8>)
 8002316:	f001 fcd3 	bl	8003cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800231a:	e02f      	b.n	800237c <HAL_SPI_MspInit+0xd8>
  else if(hspi->Instance==SPI3)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1b      	ldr	r2, [pc, #108]	@ (8002390 <HAL_SPI_MspInit+0xec>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d12a      	bne.n	800237c <HAL_SPI_MspInit+0xd8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002326:	4b18      	ldr	r3, [pc, #96]	@ (8002388 <HAL_SPI_MspInit+0xe4>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	4a17      	ldr	r2, [pc, #92]	@ (8002388 <HAL_SPI_MspInit+0xe4>)
 800232c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002330:	6593      	str	r3, [r2, #88]	@ 0x58
 8002332:	4b15      	ldr	r3, [pc, #84]	@ (8002388 <HAL_SPI_MspInit+0xe4>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800233e:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <HAL_SPI_MspInit+0xe4>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	4a11      	ldr	r2, [pc, #68]	@ (8002388 <HAL_SPI_MspInit+0xe4>)
 8002344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800234a:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <HAL_SPI_MspInit+0xe4>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8002356:	f002 fca9 	bl	8004cac <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800235a:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 800235e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800236c:	2306      	movs	r3, #6
 800236e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	4619      	mov	r1, r3
 8002376:	4805      	ldr	r0, [pc, #20]	@ (800238c <HAL_SPI_MspInit+0xe8>)
 8002378:	f001 fca2 	bl	8003cc0 <HAL_GPIO_Init>
}
 800237c:	bf00      	nop
 800237e:	3730      	adds	r7, #48	@ 0x30
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40013000 	.word	0x40013000
 8002388:	40021000 	.word	0x40021000
 800238c:	48001800 	.word	0x48001800
 8002390:	40003c00 	.word	0x40003c00

08002394 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <HAL_TIM_Base_MspInit+0x68>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d10c      	bne.n	80023c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023a6:	4b16      	ldr	r3, [pc, #88]	@ (8002400 <HAL_TIM_Base_MspInit+0x6c>)
 80023a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023aa:	4a15      	ldr	r2, [pc, #84]	@ (8002400 <HAL_TIM_Base_MspInit+0x6c>)
 80023ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80023b2:	4b13      	ldr	r3, [pc, #76]	@ (8002400 <HAL_TIM_Base_MspInit+0x6c>)
 80023b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80023be:	e018      	b.n	80023f2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002404 <HAL_TIM_Base_MspInit+0x70>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d113      	bne.n	80023f2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80023ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002400 <HAL_TIM_Base_MspInit+0x6c>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002400 <HAL_TIM_Base_MspInit+0x6c>)
 80023d0:	f043 0320 	orr.w	r3, r3, #32
 80023d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80023d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <HAL_TIM_Base_MspInit+0x6c>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	2037      	movs	r0, #55	@ 0x37
 80023e8:	f001 fc33 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80023ec:	2037      	movs	r0, #55	@ 0x37
 80023ee:	f001 fc4c 	bl	8003c8a <HAL_NVIC_EnableIRQ>
}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40012c00 	.word	0x40012c00
 8002400:	40021000 	.word	0x40021000
 8002404:	40001400 	.word	0x40001400

08002408 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	@ 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002428:	d129      	bne.n	800247e <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800242a:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <HAL_TIM_IC_MspInit+0x80>)
 800242c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242e:	4a16      	ldr	r2, [pc, #88]	@ (8002488 <HAL_TIM_IC_MspInit+0x80>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6593      	str	r3, [r2, #88]	@ 0x58
 8002436:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <HAL_TIM_IC_MspInit+0x80>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <HAL_TIM_IC_MspInit+0x80>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002446:	4a10      	ldr	r2, [pc, #64]	@ (8002488 <HAL_TIM_IC_MspInit+0x80>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800244e:	4b0e      	ldr	r3, [pc, #56]	@ (8002488 <HAL_TIM_IC_MspInit+0x80>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPS_PPS_Pin;
 800245a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800245e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800246c:	2301      	movs	r3, #1
 800246e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8002470:	f107 0314 	add.w	r3, r7, #20
 8002474:	4619      	mov	r1, r3
 8002476:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800247a:	f001 fc21 	bl	8003cc0 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800247e:	bf00      	nop
 8002480:	3728      	adds	r7, #40	@ 0x28
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000

0800248c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08e      	sub	sp, #56	@ 0x38
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a46      	ldr	r2, [pc, #280]	@ (80025c4 <HAL_TIM_Encoder_MspInit+0x138>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d129      	bne.n	8002502 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024ae:	4b46      	ldr	r3, [pc, #280]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b2:	4a45      	ldr	r2, [pc, #276]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ba:	4b43      	ldr	r3, [pc, #268]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	4b40      	ldr	r3, [pc, #256]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ca:	4a3f      	ldr	r2, [pc, #252]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024d2:	4b3d      	ldr	r3, [pc, #244]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MZ_B_Pin|MZ_A_Pin;
 80024de:	23c0      	movs	r3, #192	@ 0xc0
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024ee:	2302      	movs	r3, #2
 80024f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024f6:	4619      	mov	r1, r3
 80024f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024fc:	f001 fbe0 	bl	8003cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002500:	e05b      	b.n	80025ba <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a31      	ldr	r2, [pc, #196]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x140>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d129      	bne.n	8002560 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800250c:	4b2e      	ldr	r3, [pc, #184]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002510:	4a2d      	ldr	r2, [pc, #180]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	6593      	str	r3, [r2, #88]	@ 0x58
 8002518:	4b2b      	ldr	r3, [pc, #172]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002524:	4b28      	ldr	r3, [pc, #160]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002528:	4a27      	ldr	r2, [pc, #156]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800252a:	f043 0308 	orr.w	r3, r3, #8
 800252e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002530:	4b25      	ldr	r3, [pc, #148]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MX_B_Pin|MX_A_Pin;
 800253c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254a:	2300      	movs	r3, #0
 800254c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800254e:	2302      	movs	r3, #2
 8002550:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002556:	4619      	mov	r1, r3
 8002558:	481d      	ldr	r0, [pc, #116]	@ (80025d0 <HAL_TIM_Encoder_MspInit+0x144>)
 800255a:	f001 fbb1 	bl	8003cc0 <HAL_GPIO_Init>
}
 800255e:	e02c      	b.n	80025ba <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM5)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1b      	ldr	r2, [pc, #108]	@ (80025d4 <HAL_TIM_Encoder_MspInit+0x148>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d127      	bne.n	80025ba <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800256a:	4b17      	ldr	r3, [pc, #92]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256e:	4a16      	ldr	r2, [pc, #88]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002570:	f043 0308 	orr.w	r3, r3, #8
 8002574:	6593      	str	r3, [r2, #88]	@ 0x58
 8002576:	4b14      	ldr	r3, [pc, #80]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002582:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002586:	4a10      	ldr	r2, [pc, #64]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002588:	f043 0320 	orr.w	r3, r3, #32
 800258c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800258e:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MY_B_Pin|MY_A_Pin;
 800259a:	23c0      	movs	r3, #192	@ 0xc0
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80025aa:	2302      	movs	r3, #2
 80025ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025b2:	4619      	mov	r1, r3
 80025b4:	4808      	ldr	r0, [pc, #32]	@ (80025d8 <HAL_TIM_Encoder_MspInit+0x14c>)
 80025b6:	f001 fb83 	bl	8003cc0 <HAL_GPIO_Init>
}
 80025ba:	bf00      	nop
 80025bc:	3738      	adds	r7, #56	@ 0x38
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40000400 	.word	0x40000400
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40000800 	.word	0x40000800
 80025d0:	48000c00 	.word	0x48000c00
 80025d4:	40000c00 	.word	0x40000c00
 80025d8:	48001400 	.word	0x48001400

080025dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002614 <HAL_TIM_PWM_MspInit+0x38>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10b      	bne.n	8002606 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80025ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <HAL_TIM_PWM_MspInit+0x3c>)
 80025f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f2:	4a09      	ldr	r2, [pc, #36]	@ (8002618 <HAL_TIM_PWM_MspInit+0x3c>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80025fa:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <HAL_TIM_PWM_MspInit+0x3c>)
 80025fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40014000 	.word	0x40014000
 8002618:	40021000 	.word	0x40021000

0800261c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	@ 0x28
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a23      	ldr	r2, [pc, #140]	@ (80026c8 <HAL_TIM_MspPostInit+0xac>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d11d      	bne.n	800267a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800263e:	4b23      	ldr	r3, [pc, #140]	@ (80026cc <HAL_TIM_MspPostInit+0xb0>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002642:	4a22      	ldr	r2, [pc, #136]	@ (80026cc <HAL_TIM_MspPostInit+0xb0>)
 8002644:	f043 0310 	orr.w	r3, r3, #16
 8002648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800264a:	4b20      	ldr	r3, [pc, #128]	@ (80026cc <HAL_TIM_MspPostInit+0xb0>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MZ_PWM_Pin|MY_PWM_Pin;
 8002656:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800265a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	2302      	movs	r3, #2
 800265e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002668:	2301      	movs	r3, #1
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	4619      	mov	r1, r3
 8002672:	4817      	ldr	r0, [pc, #92]	@ (80026d0 <HAL_TIM_MspPostInit+0xb4>)
 8002674:	f001 fb24 	bl	8003cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002678:	e021      	b.n	80026be <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a15      	ldr	r2, [pc, #84]	@ (80026d4 <HAL_TIM_MspPostInit+0xb8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d11c      	bne.n	80026be <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <HAL_TIM_MspPostInit+0xb0>)
 8002686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002688:	4a10      	ldr	r2, [pc, #64]	@ (80026cc <HAL_TIM_MspPostInit+0xb0>)
 800268a:	f043 0302 	orr.w	r3, r3, #2
 800268e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002690:	4b0e      	ldr	r3, [pc, #56]	@ (80026cc <HAL_TIM_MspPostInit+0xb0>)
 8002692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MX_PWM_Pin;
 800269c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80026ae:	230e      	movs	r3, #14
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MX_PWM_GPIO_Port, &GPIO_InitStruct);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4619      	mov	r1, r3
 80026b8:	4807      	ldr	r0, [pc, #28]	@ (80026d8 <HAL_TIM_MspPostInit+0xbc>)
 80026ba:	f001 fb01 	bl	8003cc0 <HAL_GPIO_Init>
}
 80026be:	bf00      	nop
 80026c0:	3728      	adds	r7, #40	@ 0x28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40012c00 	.word	0x40012c00
 80026cc:	40021000 	.word	0x40021000
 80026d0:	48001000 	.word	0x48001000
 80026d4:	40014000 	.word	0x40014000
 80026d8:	48000400 	.word	0x48000400

080026dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <NMI_Handler+0x4>

080026e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <HardFault_Handler+0x4>

080026ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <MemManage_Handler+0x4>

080026f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026f8:	bf00      	nop
 80026fa:	e7fd      	b.n	80026f8 <BusFault_Handler+0x4>

080026fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <UsageFault_Handler+0x4>

08002704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002732:	f000 f89d 	bl	8002870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002740:	4802      	ldr	r0, [pc, #8]	@ (800274c <TIM7_IRQHandler+0x10>)
 8002742:	f004 fae0 	bl	8006d06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	2000066c 	.word	0x2000066c

08002750 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002754:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <SystemInit+0x20>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275a:	4a05      	ldr	r2, [pc, #20]	@ (8002770 <SystemInit+0x20>)
 800275c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002774:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002778:	f7ff ffea 	bl	8002750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800277c:	480c      	ldr	r0, [pc, #48]	@ (80027b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800277e:	490d      	ldr	r1, [pc, #52]	@ (80027b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002780:	4a0d      	ldr	r2, [pc, #52]	@ (80027b8 <LoopForever+0xe>)
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002784:	e002      	b.n	800278c <LoopCopyDataInit>

08002786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800278a:	3304      	adds	r3, #4

0800278c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800278c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002790:	d3f9      	bcc.n	8002786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002792:	4a0a      	ldr	r2, [pc, #40]	@ (80027bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002794:	4c0a      	ldr	r4, [pc, #40]	@ (80027c0 <LoopForever+0x16>)
  movs r3, #0
 8002796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002798:	e001      	b.n	800279e <LoopFillZerobss>

0800279a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800279a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800279c:	3204      	adds	r2, #4

0800279e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a0:	d3fb      	bcc.n	800279a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027a2:	f006 fa6d 	bl	8008c80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027a6:	f7fe f899 	bl	80008dc <main>

080027aa <LoopForever>:

LoopForever:
    b LoopForever
 80027aa:	e7fe      	b.n	80027aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027ac:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80027b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80027b8:	08008d3c 	.word	0x08008d3c
  ldr r2, =_sbss
 80027bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80027c0:	2000078c 	.word	0x2000078c

080027c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027c4:	e7fe      	b.n	80027c4 <ADC1_2_IRQHandler>

080027c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d0:	2003      	movs	r0, #3
 80027d2:	f001 fa33 	bl	8003c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027d6:	200f      	movs	r0, #15
 80027d8:	f000 f80e 	bl	80027f8 <HAL_InitTick>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	71fb      	strb	r3, [r7, #7]
 80027e6:	e001      	b.n	80027ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027e8:	f7ff f9f6 	bl	8001bd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027ec:	79fb      	ldrb	r3, [r7, #7]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002804:	4b17      	ldr	r3, [pc, #92]	@ (8002864 <HAL_InitTick+0x6c>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d023      	beq.n	8002854 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800280c:	4b16      	ldr	r3, [pc, #88]	@ (8002868 <HAL_InitTick+0x70>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b14      	ldr	r3, [pc, #80]	@ (8002864 <HAL_InitTick+0x6c>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	4619      	mov	r1, r3
 8002816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800281a:	fbb3 f3f1 	udiv	r3, r3, r1
 800281e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002822:	4618      	mov	r0, r3
 8002824:	f001 fa3f 	bl	8003ca6 <HAL_SYSTICK_Config>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10f      	bne.n	800284e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b0f      	cmp	r3, #15
 8002832:	d809      	bhi.n	8002848 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002834:	2200      	movs	r2, #0
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f001 fa09 	bl	8003c52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002840:	4a0a      	ldr	r2, [pc, #40]	@ (800286c <HAL_InitTick+0x74>)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e007      	b.n	8002858 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	e004      	b.n	8002858 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	e001      	b.n	8002858 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000008 	.word	0x20000008
 8002868:	20000000 	.word	0x20000000
 800286c:	20000004 	.word	0x20000004

08002870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002874:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <HAL_IncTick+0x20>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <HAL_IncTick+0x24>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4413      	add	r3, r2
 8002880:	4a04      	ldr	r2, [pc, #16]	@ (8002894 <HAL_IncTick+0x24>)
 8002882:	6013      	str	r3, [r2, #0]
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000008 	.word	0x20000008
 8002894:	20000788 	.word	0x20000788

08002898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return uwTick;
 800289c:	4b03      	ldr	r3, [pc, #12]	@ (80028ac <HAL_GetTick+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000788 	.word	0x20000788

080028b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028b8:	f7ff ffee 	bl	8002898 <HAL_GetTick>
 80028bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c8:	d005      	beq.n	80028d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028ca:	4b0a      	ldr	r3, [pc, #40]	@ (80028f4 <HAL_Delay+0x44>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028d6:	bf00      	nop
 80028d8:	f7ff ffde 	bl	8002898 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d8f7      	bhi.n	80028d8 <HAL_Delay+0x28>
  {
  }
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000008 	.word	0x20000008

080028f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	609a      	str	r2, [r3, #8]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	609a      	str	r2, [r3, #8]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3360      	adds	r3, #96	@ 0x60
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <LL_ADC_SetOffset+0x44>)
 8002982:	4013      	ands	r3, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	4313      	orrs	r3, r2
 8002990:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002998:	bf00      	nop
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	03fff000 	.word	0x03fff000

080029a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3360      	adds	r3, #96	@ 0x60
 80029b6:	461a      	mov	r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3360      	adds	r3, #96	@ 0x60
 80029e4:	461a      	mov	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	615a      	str	r2, [r3, #20]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	3330      	adds	r3, #48	@ 0x30
 8002a40:	461a      	mov	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	0a1b      	lsrs	r3, r3, #8
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	4413      	add	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	211f      	movs	r1, #31
 8002a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	401a      	ands	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	0e9b      	lsrs	r3, r3, #26
 8002a68:	f003 011f 	and.w	r1, r3, #31
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	fa01 f303 	lsl.w	r3, r1, r3
 8002a76:	431a      	orrs	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3314      	adds	r3, #20
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	0e5b      	lsrs	r3, r3, #25
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	4413      	add	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	0d1b      	lsrs	r3, r3, #20
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2107      	movs	r1, #7
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	401a      	ands	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	0d1b      	lsrs	r3, r3, #20
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	431a      	orrs	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ad2:	bf00      	nop
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af8:	43db      	mvns	r3, r3
 8002afa:	401a      	ands	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f003 0318 	and.w	r3, r3, #24
 8002b02:	4908      	ldr	r1, [pc, #32]	@ (8002b24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b04:	40d9      	lsrs	r1, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	400b      	ands	r3, r1
 8002b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	0007ffff 	.word	0x0007ffff

08002b28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6093      	str	r3, [r2, #8]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b60:	d101      	bne.n	8002b66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bb0:	d101      	bne.n	8002bb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <LL_ADC_IsEnabled+0x18>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <LL_ADC_IsEnabled+0x1a>
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d101      	bne.n	8002c02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d101      	bne.n	8002c28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c38:	b590      	push	{r4, r7, lr}
 8002c3a:	b089      	sub	sp, #36	@ 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e133      	b.n	8002eba <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d109      	bne.n	8002c74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7fe ffdd 	bl	8001c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff67 	bl	8002b4c <LL_ADC_IsDeepPowerDownEnabled>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d004      	beq.n	8002c8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff4d 	bl	8002b28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff ff82 	bl	8002b9c <LL_ADC_IsInternalRegulatorEnabled>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d115      	bne.n	8002cca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff ff66 	bl	8002b74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ca8:	4b86      	ldr	r3, [pc, #536]	@ (8002ec4 <HAL_ADC_Init+0x28c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	4a86      	ldr	r2, [pc, #536]	@ (8002ec8 <HAL_ADC_Init+0x290>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cbc:	e002      	b.n	8002cc4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f9      	bne.n	8002cbe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ff64 	bl	8002b9c <LL_ADC_IsInternalRegulatorEnabled>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10d      	bne.n	8002cf6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cde:	f043 0210 	orr.w	r2, r3, #16
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	f043 0201 	orr.w	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ff75 	bl	8002bea <LL_ADC_REG_IsConversionOngoing>
 8002d00:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f040 80cc 	bne.w	8002ea8 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f040 80c8 	bne.w	8002ea8 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d20:	f043 0202 	orr.w	r2, r3, #2
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff49 	bl	8002bc4 <LL_ADC_IsEnabled>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d115      	bne.n	8002d64 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d38:	4864      	ldr	r0, [pc, #400]	@ (8002ecc <HAL_ADC_Init+0x294>)
 8002d3a:	f7ff ff43 	bl	8002bc4 <LL_ADC_IsEnabled>
 8002d3e:	4604      	mov	r4, r0
 8002d40:	4863      	ldr	r0, [pc, #396]	@ (8002ed0 <HAL_ADC_Init+0x298>)
 8002d42:	f7ff ff3f 	bl	8002bc4 <LL_ADC_IsEnabled>
 8002d46:	4603      	mov	r3, r0
 8002d48:	431c      	orrs	r4, r3
 8002d4a:	4862      	ldr	r0, [pc, #392]	@ (8002ed4 <HAL_ADC_Init+0x29c>)
 8002d4c:	f7ff ff3a 	bl	8002bc4 <LL_ADC_IsEnabled>
 8002d50:	4603      	mov	r3, r0
 8002d52:	4323      	orrs	r3, r4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	485e      	ldr	r0, [pc, #376]	@ (8002ed8 <HAL_ADC_Init+0x2a0>)
 8002d60:	f7ff fdca 	bl	80028f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7e5b      	ldrb	r3, [r3, #25]
 8002d68:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d6e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d74:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d7a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d82:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d106      	bne.n	8002da0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	3b01      	subs	r3, #1
 8002d98:	045b      	lsls	r3, r3, #17
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d009      	beq.n	8002dbc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	4b46      	ldr	r3, [pc, #280]	@ (8002edc <HAL_ADC_Init+0x2a4>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	69b9      	ldr	r1, [r7, #24]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff1b 	bl	8002c10 <LL_ADC_INJ_IsConversionOngoing>
 8002dda:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d140      	bne.n	8002e64 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d13d      	bne.n	8002e64 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7e1b      	ldrb	r3, [r3, #24]
 8002df0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002df2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002dfa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e0a:	f023 0306 	bic.w	r3, r3, #6
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	69b9      	ldr	r1, [r7, #24]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d118      	bne.n	8002e54 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002e2c:	f023 0304 	bic.w	r3, r3, #4
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e38:	4311      	orrs	r1, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002e3e:	4311      	orrs	r1, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e44:	430a      	orrs	r2, r1
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	611a      	str	r2, [r3, #16]
 8002e52:	e007      	b.n	8002e64 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d10c      	bne.n	8002e86 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e72:	f023 010f 	bic.w	r1, r3, #15
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	1e5a      	subs	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e84:	e007      	b.n	8002e96 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 020f 	bic.w	r2, r2, #15
 8002e94:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9a:	f023 0303 	bic.w	r3, r3, #3
 8002e9e:	f043 0201 	orr.w	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ea6:	e007      	b.n	8002eb8 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eac:	f043 0210 	orr.w	r2, r3, #16
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002eb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3724      	adds	r7, #36	@ 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd90      	pop	{r4, r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	053e2d63 	.word	0x053e2d63
 8002ecc:	50040000 	.word	0x50040000
 8002ed0:	50040100 	.word	0x50040100
 8002ed4:	50040200 	.word	0x50040200
 8002ed8:	50040300 	.word	0x50040300
 8002edc:	fff0c007 	.word	0xfff0c007

08002ee0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b0b6      	sub	sp, #216	@ 0xd8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x22>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e3e3      	b.n	80036ca <HAL_ADC_ConfigChannel+0x7ea>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fe6b 	bl	8002bea <LL_ADC_REG_IsConversionOngoing>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f040 83c4 	bne.w	80036a4 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b05      	cmp	r3, #5
 8002f2a:	d824      	bhi.n	8002f76 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	3b02      	subs	r3, #2
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d81b      	bhi.n	8002f6e <HAL_ADC_ConfigChannel+0x8e>
 8002f36:	a201      	add	r2, pc, #4	@ (adr r2, 8002f3c <HAL_ADC_ConfigChannel+0x5c>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002f4d 	.word	0x08002f4d
 8002f40:	08002f55 	.word	0x08002f55
 8002f44:	08002f5d 	.word	0x08002f5d
 8002f48:	08002f65 	.word	0x08002f65
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002f4c:	230c      	movs	r3, #12
 8002f4e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f52:	e010      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002f54:	2312      	movs	r3, #18
 8002f56:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f5a:	e00c      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002f5c:	2318      	movs	r3, #24
 8002f5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f62:	e008      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002f64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f6c:	e003      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002f6e:	2306      	movs	r3, #6
 8002f70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f74:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002f84:	f7ff fd54 	bl	8002a30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fe2c 	bl	8002bea <LL_ADC_REG_IsConversionOngoing>
 8002f92:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fe38 	bl	8002c10 <LL_ADC_INJ_IsConversionOngoing>
 8002fa0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f040 81bf 	bne.w	800332c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f040 81ba 	bne.w	800332c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fc0:	d10f      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f7ff fd5b 	bl	8002a88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fd15 	bl	8002a0a <LL_ADC_SetSamplingTimeCommonConfig>
 8002fe0:	e00e      	b.n	8003000 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6819      	ldr	r1, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f7ff fd4a 	bl	8002a88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fd05 	bl	8002a0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	08db      	lsrs	r3, r3, #3
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b04      	cmp	r3, #4
 8003020:	d00a      	beq.n	8003038 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6919      	ldr	r1, [r3, #16]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003032:	f7ff fc95 	bl	8002960 <LL_ADC_SetOffset>
 8003036:	e179      	b.n	800332c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fcb2 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003044:	4603      	mov	r3, r0
 8003046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x184>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fca7 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 800305a:	4603      	mov	r3, r0
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	f003 021f 	and.w	r2, r3, #31
 8003062:	e01e      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x1c2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fc9c 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003070:	4603      	mov	r3, r0
 8003072:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003082:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003086:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800308a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003092:	2320      	movs	r3, #32
 8003094:	e004      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003096:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x1da>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	0e9b      	lsrs	r3, r3, #26
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	e018      	b.n	80030ec <HAL_ADC_ConfigChannel+0x20c>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80030ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80030d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80030de:	2320      	movs	r3, #32
 80030e0:	e004      	b.n	80030ec <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80030e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d106      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2200      	movs	r2, #0
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fc6b 	bl	80029d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2101      	movs	r1, #1
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fc4f 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 800310a:	4603      	mov	r3, r0
 800310c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <HAL_ADC_ConfigChannel+0x24a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2101      	movs	r1, #1
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fc44 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	0e9b      	lsrs	r3, r3, #26
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	e01e      	b.n	8003168 <HAL_ADC_ConfigChannel+0x288>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2101      	movs	r1, #1
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fc39 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003148:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800314c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003150:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e004      	b.n	8003166 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800315c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x2a0>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	e018      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x2d2>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003194:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003198:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800319c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e004      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80031a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d106      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2200      	movs	r2, #0
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fc08 	bl	80029d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2102      	movs	r1, #2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fbec 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x310>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2102      	movs	r1, #2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fbe1 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80031e6:	4603      	mov	r3, r0
 80031e8:	0e9b      	lsrs	r3, r3, #26
 80031ea:	f003 021f 	and.w	r2, r3, #31
 80031ee:	e01e      	b.n	800322e <HAL_ADC_ConfigChannel+0x34e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2102      	movs	r1, #2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fbd6 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800320e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003216:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800321e:	2320      	movs	r3, #32
 8003220:	e004      	b.n	800322c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003222:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x366>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	0e9b      	lsrs	r3, r3, #26
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	e014      	b.n	8003270 <HAL_ADC_ConfigChannel+0x390>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003254:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003256:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800325a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003262:	2320      	movs	r3, #32
 8003264:	e004      	b.n	8003270 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003266:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003270:	429a      	cmp	r2, r3
 8003272:	d106      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2200      	movs	r2, #0
 800327a:	2102      	movs	r1, #2
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fba9 	bl	80029d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2103      	movs	r1, #3
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fb8d 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 800328e:	4603      	mov	r3, r0
 8003290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x3ce>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2103      	movs	r1, #3
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fb82 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80032a4:	4603      	mov	r3, r0
 80032a6:	0e9b      	lsrs	r3, r3, #26
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	e017      	b.n	80032de <HAL_ADC_ConfigChannel+0x3fe>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2103      	movs	r1, #3
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fb77 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80032ba:	4603      	mov	r3, r0
 80032bc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80032c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032c8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80032ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80032d0:	2320      	movs	r3, #32
 80032d2:	e003      	b.n	80032dc <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80032d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d105      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x416>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	0e9b      	lsrs	r3, r3, #26
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	e011      	b.n	800331a <HAL_ADC_ConfigChannel+0x43a>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003304:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003306:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003308:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800330e:	2320      	movs	r3, #32
 8003310:	e003      	b.n	800331a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003312:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800331a:	429a      	cmp	r2, r3
 800331c:	d106      	bne.n	800332c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2200      	movs	r2, #0
 8003324:	2103      	movs	r1, #3
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fb54 	bl	80029d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fc47 	bl	8002bc4 <LL_ADC_IsEnabled>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	f040 813f 	bne.w	80035bc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6819      	ldr	r1, [r3, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	461a      	mov	r2, r3
 800334c:	f7ff fbc8 	bl	8002ae0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a8e      	ldr	r2, [pc, #568]	@ (8003590 <HAL_ADC_ConfigChannel+0x6b0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	f040 8130 	bne.w	80035bc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10b      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x4a4>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	0e9b      	lsrs	r3, r3, #26
 8003372:	3301      	adds	r3, #1
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	2b09      	cmp	r3, #9
 800337a:	bf94      	ite	ls
 800337c:	2301      	movls	r3, #1
 800337e:	2300      	movhi	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	e019      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x4d8>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003394:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003396:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800339c:	2320      	movs	r3, #32
 800339e:	e003      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80033a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033a2:	fab3 f383 	clz	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	3301      	adds	r3, #1
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	2b09      	cmp	r3, #9
 80033b0:	bf94      	ite	ls
 80033b2:	2301      	movls	r3, #1
 80033b4:	2300      	movhi	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d079      	beq.n	80034b0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d107      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x4f8>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	0e9b      	lsrs	r3, r3, #26
 80033ce:	3301      	adds	r3, #1
 80033d0:	069b      	lsls	r3, r3, #26
 80033d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033d6:	e015      	b.n	8003404 <HAL_ADC_ConfigChannel+0x524>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80033e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033e8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80033ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80033f0:	2320      	movs	r3, #32
 80033f2:	e003      	b.n	80033fc <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80033f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033f6:	fab3 f383 	clz	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	3301      	adds	r3, #1
 80033fe:	069b      	lsls	r3, r3, #26
 8003400:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x544>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	0e9b      	lsrs	r3, r3, #26
 8003416:	3301      	adds	r3, #1
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	2101      	movs	r1, #1
 800341e:	fa01 f303 	lsl.w	r3, r1, r3
 8003422:	e017      	b.n	8003454 <HAL_ADC_ConfigChannel+0x574>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003434:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800343c:	2320      	movs	r3, #32
 800343e:	e003      	b.n	8003448 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	3301      	adds	r3, #1
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	2101      	movs	r1, #1
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	ea42 0103 	orr.w	r1, r2, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <HAL_ADC_ConfigChannel+0x59a>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	0e9b      	lsrs	r3, r3, #26
 800346a:	3301      	adds	r3, #1
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	051b      	lsls	r3, r3, #20
 8003478:	e018      	b.n	80034ac <HAL_ADC_ConfigChannel+0x5cc>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800348c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003492:	2320      	movs	r3, #32
 8003494:	e003      	b.n	800349e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003498:	fab3 f383 	clz	r3, r3
 800349c:	b2db      	uxtb	r3, r3
 800349e:	3301      	adds	r3, #1
 80034a0:	f003 021f 	and.w	r2, r3, #31
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ac:	430b      	orrs	r3, r1
 80034ae:	e080      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x5ec>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0e9b      	lsrs	r3, r3, #26
 80034c2:	3301      	adds	r3, #1
 80034c4:	069b      	lsls	r3, r3, #26
 80034c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034ca:	e015      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x618>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80034de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	e003      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80034e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	069b      	lsls	r3, r3, #26
 80034f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x638>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	0e9b      	lsrs	r3, r3, #26
 800350a:	3301      	adds	r3, #1
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	2101      	movs	r1, #1
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	e017      	b.n	8003548 <HAL_ADC_ConfigChannel+0x668>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	fa93 f3a3 	rbit	r3, r3
 8003524:	61bb      	str	r3, [r7, #24]
  return result;
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003530:	2320      	movs	r3, #32
 8003532:	e003      	b.n	800353c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	3301      	adds	r3, #1
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2101      	movs	r1, #1
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	ea42 0103 	orr.w	r1, r2, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10d      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x694>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0e9b      	lsrs	r3, r3, #26
 800355e:	3301      	adds	r3, #1
 8003560:	f003 021f 	and.w	r2, r3, #31
 8003564:	4613      	mov	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4413      	add	r3, r2
 800356a:	3b1e      	subs	r3, #30
 800356c:	051b      	lsls	r3, r3, #20
 800356e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003572:	e01d      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x6d0>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	60fb      	str	r3, [r7, #12]
  return result;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d103      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800358c:	2320      	movs	r3, #32
 800358e:	e005      	b.n	800359c <HAL_ADC_ConfigChannel+0x6bc>
 8003590:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	3301      	adds	r3, #1
 800359e:	f003 021f 	and.w	r2, r3, #31
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	3b1e      	subs	r3, #30
 80035aa:	051b      	lsls	r3, r3, #20
 80035ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035b6:	4619      	mov	r1, r3
 80035b8:	f7ff fa66 	bl	8002a88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b44      	ldr	r3, [pc, #272]	@ (80036d4 <HAL_ADC_ConfigChannel+0x7f4>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d07a      	beq.n	80036be <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035c8:	4843      	ldr	r0, [pc, #268]	@ (80036d8 <HAL_ADC_ConfigChannel+0x7f8>)
 80035ca:	f7ff f9bb 	bl	8002944 <LL_ADC_GetCommonPathInternalCh>
 80035ce:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a41      	ldr	r2, [pc, #260]	@ (80036dc <HAL_ADC_ConfigChannel+0x7fc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d12c      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d126      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a3c      	ldr	r2, [pc, #240]	@ (80036e0 <HAL_ADC_ConfigChannel+0x800>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d004      	beq.n	80035fc <HAL_ADC_ConfigChannel+0x71c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a3b      	ldr	r2, [pc, #236]	@ (80036e4 <HAL_ADC_ConfigChannel+0x804>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d15d      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003600:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003604:	4619      	mov	r1, r3
 8003606:	4834      	ldr	r0, [pc, #208]	@ (80036d8 <HAL_ADC_ConfigChannel+0x7f8>)
 8003608:	f7ff f989 	bl	800291e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800360c:	4b36      	ldr	r3, [pc, #216]	@ (80036e8 <HAL_ADC_ConfigChannel+0x808>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	099b      	lsrs	r3, r3, #6
 8003612:	4a36      	ldr	r2, [pc, #216]	@ (80036ec <HAL_ADC_ConfigChannel+0x80c>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003626:	e002      	b.n	800362e <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	3b01      	subs	r3, #1
 800362c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f9      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003634:	e040      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2d      	ldr	r2, [pc, #180]	@ (80036f0 <HAL_ADC_ConfigChannel+0x810>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d118      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003640:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d112      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a23      	ldr	r2, [pc, #140]	@ (80036e0 <HAL_ADC_ConfigChannel+0x800>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d004      	beq.n	8003660 <HAL_ADC_ConfigChannel+0x780>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a22      	ldr	r2, [pc, #136]	@ (80036e4 <HAL_ADC_ConfigChannel+0x804>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d12d      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003660:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003664:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003668:	4619      	mov	r1, r3
 800366a:	481b      	ldr	r0, [pc, #108]	@ (80036d8 <HAL_ADC_ConfigChannel+0x7f8>)
 800366c:	f7ff f957 	bl	800291e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003670:	e024      	b.n	80036bc <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1f      	ldr	r2, [pc, #124]	@ (80036f4 <HAL_ADC_ConfigChannel+0x814>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d120      	bne.n	80036be <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800367c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d11a      	bne.n	80036be <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a14      	ldr	r2, [pc, #80]	@ (80036e0 <HAL_ADC_ConfigChannel+0x800>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d115      	bne.n	80036be <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003696:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800369a:	4619      	mov	r1, r3
 800369c:	480e      	ldr	r0, [pc, #56]	@ (80036d8 <HAL_ADC_ConfigChannel+0x7f8>)
 800369e:	f7ff f93e 	bl	800291e <LL_ADC_SetCommonPathInternalCh>
 80036a2:	e00c      	b.n	80036be <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a8:	f043 0220 	orr.w	r2, r3, #32
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80036b6:	e002      	b.n	80036be <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036b8:	bf00      	nop
 80036ba:	e000      	b.n	80036be <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80036c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	37d8      	adds	r7, #216	@ 0xd8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	80080000 	.word	0x80080000
 80036d8:	50040300 	.word	0x50040300
 80036dc:	c7520000 	.word	0xc7520000
 80036e0:	50040000 	.word	0x50040000
 80036e4:	50040200 	.word	0x50040200
 80036e8:	20000000 	.word	0x20000000
 80036ec:	053e2d63 	.word	0x053e2d63
 80036f0:	cb840000 	.word	0xcb840000
 80036f4:	80000001 	.word	0x80000001

080036f8 <LL_ADC_IsEnabled>:
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <LL_ADC_IsEnabled+0x18>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <LL_ADC_IsEnabled+0x1a>
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <LL_ADC_REG_IsConversionOngoing>:
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b04      	cmp	r3, #4
 8003730:	d101      	bne.n	8003736 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003744:	b590      	push	{r4, r7, lr}
 8003746:	b0a1      	sub	sp, #132	@ 0x84
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800375e:	2302      	movs	r3, #2
 8003760:	e093      	b.n	800388a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800376a:	2300      	movs	r3, #0
 800376c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800376e:	2300      	movs	r3, #0
 8003770:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a47      	ldr	r2, [pc, #284]	@ (8003894 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d102      	bne.n	8003782 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800377c:	4b46      	ldr	r3, [pc, #280]	@ (8003898 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e001      	b.n	8003786 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10b      	bne.n	80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003790:	f043 0220 	orr.w	r2, r3, #32
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e072      	b.n	800388a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff ffb9 	bl	800371e <LL_ADC_REG_IsConversionOngoing>
 80037ac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff ffb3 	bl	800371e <LL_ADC_REG_IsConversionOngoing>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d154      	bne.n	8003868 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80037be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d151      	bne.n	8003868 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037c4:	4b35      	ldr	r3, [pc, #212]	@ (800389c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80037c6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d02c      	beq.n	800382a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80037d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037e2:	035b      	lsls	r3, r3, #13
 80037e4:	430b      	orrs	r3, r1
 80037e6:	431a      	orrs	r2, r3
 80037e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037ec:	4829      	ldr	r0, [pc, #164]	@ (8003894 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80037ee:	f7ff ff83 	bl	80036f8 <LL_ADC_IsEnabled>
 80037f2:	4604      	mov	r4, r0
 80037f4:	4828      	ldr	r0, [pc, #160]	@ (8003898 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80037f6:	f7ff ff7f 	bl	80036f8 <LL_ADC_IsEnabled>
 80037fa:	4603      	mov	r3, r0
 80037fc:	431c      	orrs	r4, r3
 80037fe:	4828      	ldr	r0, [pc, #160]	@ (80038a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003800:	f7ff ff7a 	bl	80036f8 <LL_ADC_IsEnabled>
 8003804:	4603      	mov	r3, r0
 8003806:	4323      	orrs	r3, r4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d137      	bne.n	800387c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800380c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003814:	f023 030f 	bic.w	r3, r3, #15
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	6811      	ldr	r1, [r2, #0]
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	6892      	ldr	r2, [r2, #8]
 8003820:	430a      	orrs	r2, r1
 8003822:	431a      	orrs	r2, r3
 8003824:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003826:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003828:	e028      	b.n	800387c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800382a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003834:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003836:	4817      	ldr	r0, [pc, #92]	@ (8003894 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003838:	f7ff ff5e 	bl	80036f8 <LL_ADC_IsEnabled>
 800383c:	4604      	mov	r4, r0
 800383e:	4816      	ldr	r0, [pc, #88]	@ (8003898 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003840:	f7ff ff5a 	bl	80036f8 <LL_ADC_IsEnabled>
 8003844:	4603      	mov	r3, r0
 8003846:	431c      	orrs	r4, r3
 8003848:	4815      	ldr	r0, [pc, #84]	@ (80038a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800384a:	f7ff ff55 	bl	80036f8 <LL_ADC_IsEnabled>
 800384e:	4603      	mov	r3, r0
 8003850:	4323      	orrs	r3, r4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d112      	bne.n	800387c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800385e:	f023 030f 	bic.w	r3, r3, #15
 8003862:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003864:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003866:	e009      	b.n	800387c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386c:	f043 0220 	orr.w	r2, r3, #32
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800387a:	e000      	b.n	800387e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800387c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003886:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800388a:	4618      	mov	r0, r3
 800388c:	3784      	adds	r7, #132	@ 0x84
 800388e:	46bd      	mov	sp, r7
 8003890:	bd90      	pop	{r4, r7, pc}
 8003892:	bf00      	nop
 8003894:	50040000 	.word	0x50040000
 8003898:	50040100 	.word	0x50040100
 800389c:	50040300 	.word	0x50040300
 80038a0:	50040200 	.word	0x50040200

080038a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0ed      	b.n	8003a92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fe fa32 	bl	8001d2c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038d8:	f7fe ffde 	bl	8002898 <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80038de:	e012      	b.n	8003906 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038e0:	f7fe ffda 	bl	8002898 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b0a      	cmp	r3, #10
 80038ec:	d90b      	bls.n	8003906 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2205      	movs	r2, #5
 80038fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e0c5      	b.n	8003a92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0e5      	beq.n	80038e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0202 	bic.w	r2, r2, #2
 8003922:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003924:	f7fe ffb8 	bl	8002898 <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800392a:	e012      	b.n	8003952 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800392c:	f7fe ffb4 	bl	8002898 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b0a      	cmp	r3, #10
 8003938:	d90b      	bls.n	8003952 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2205      	movs	r2, #5
 800394a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e09f      	b.n	8003a92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e5      	bne.n	800392c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	7e1b      	ldrb	r3, [r3, #24]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d108      	bne.n	800397a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	e007      	b.n	800398a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003988:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	7e5b      	ldrb	r3, [r3, #25]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d108      	bne.n	80039a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	e007      	b.n	80039b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	7e9b      	ldrb	r3, [r3, #26]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d108      	bne.n	80039ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0220 	orr.w	r2, r2, #32
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	e007      	b.n	80039de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0220 	bic.w	r2, r2, #32
 80039dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	7edb      	ldrb	r3, [r3, #27]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d108      	bne.n	80039f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0210 	bic.w	r2, r2, #16
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e007      	b.n	8003a08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0210 	orr.w	r2, r2, #16
 8003a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	7f1b      	ldrb	r3, [r3, #28]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d108      	bne.n	8003a22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0208 	orr.w	r2, r2, #8
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e007      	b.n	8003a32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0208 	bic.w	r2, r2, #8
 8003a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	7f5b      	ldrb	r3, [r3, #29]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d108      	bne.n	8003a4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0204 	orr.w	r2, r2, #4
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	e007      	b.n	8003a5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0204 	bic.w	r2, r2, #4
 8003a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	ea42 0103 	orr.w	r1, r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	1e5a      	subs	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ac4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ace:	4a04      	ldr	r2, [pc, #16]	@ (8003ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	60d3      	str	r3, [r2, #12]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae8:	4b04      	ldr	r3, [pc, #16]	@ (8003afc <__NVIC_GetPriorityGrouping+0x18>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	f003 0307 	and.w	r3, r3, #7
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	db0b      	blt.n	8003b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	f003 021f 	and.w	r2, r3, #31
 8003b18:	4907      	ldr	r1, [pc, #28]	@ (8003b38 <__NVIC_EnableIRQ+0x38>)
 8003b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	2001      	movs	r0, #1
 8003b22:	fa00 f202 	lsl.w	r2, r0, r2
 8003b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	e000e100 	.word	0xe000e100

08003b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	6039      	str	r1, [r7, #0]
 8003b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	db0a      	blt.n	8003b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	490c      	ldr	r1, [pc, #48]	@ (8003b88 <__NVIC_SetPriority+0x4c>)
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	0112      	lsls	r2, r2, #4
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	440b      	add	r3, r1
 8003b60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b64:	e00a      	b.n	8003b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	4908      	ldr	r1, [pc, #32]	@ (8003b8c <__NVIC_SetPriority+0x50>)
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	3b04      	subs	r3, #4
 8003b74:	0112      	lsls	r2, r2, #4
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	440b      	add	r3, r1
 8003b7a:	761a      	strb	r2, [r3, #24]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	e000e100 	.word	0xe000e100
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	@ 0x24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f1c3 0307 	rsb	r3, r3, #7
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	bf28      	it	cs
 8003bae:	2304      	movcs	r3, #4
 8003bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d902      	bls.n	8003bc0 <NVIC_EncodePriority+0x30>
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	3b03      	subs	r3, #3
 8003bbe:	e000      	b.n	8003bc2 <NVIC_EncodePriority+0x32>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	43d9      	mvns	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be8:	4313      	orrs	r3, r2
         );
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3724      	adds	r7, #36	@ 0x24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c08:	d301      	bcc.n	8003c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e00f      	b.n	8003c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c38 <SysTick_Config+0x40>)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c16:	210f      	movs	r1, #15
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	f7ff ff8e 	bl	8003b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c20:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <SysTick_Config+0x40>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c26:	4b04      	ldr	r3, [pc, #16]	@ (8003c38 <SysTick_Config+0x40>)
 8003c28:	2207      	movs	r2, #7
 8003c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	e000e010 	.word	0xe000e010

08003c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ff29 	bl	8003a9c <__NVIC_SetPriorityGrouping>
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b086      	sub	sp, #24
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	4603      	mov	r3, r0
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c64:	f7ff ff3e 	bl	8003ae4 <__NVIC_GetPriorityGrouping>
 8003c68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	6978      	ldr	r0, [r7, #20]
 8003c70:	f7ff ff8e 	bl	8003b90 <NVIC_EncodePriority>
 8003c74:	4602      	mov	r2, r0
 8003c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff ff5d 	bl	8003b3c <__NVIC_SetPriority>
}
 8003c82:	bf00      	nop
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff31 	bl	8003b00 <__NVIC_EnableIRQ>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ffa2 	bl	8003bf8 <SysTick_Config>
 8003cb4:	4603      	mov	r3, r0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cce:	e166      	b.n	8003f9e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8158 	beq.w	8003f98 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d005      	beq.n	8003d00 <HAL_GPIO_Init+0x40>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d130      	bne.n	8003d62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d36:	2201      	movs	r2, #1
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 0201 	and.w	r2, r3, #1
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d017      	beq.n	8003d9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	2203      	movs	r2, #3
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d123      	bne.n	8003df2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	08da      	lsrs	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3208      	adds	r2, #8
 8003db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	08da      	lsrs	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3208      	adds	r2, #8
 8003dec:	6939      	ldr	r1, [r7, #16]
 8003dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 0203 	and.w	r2, r3, #3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80b2 	beq.w	8003f98 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e34:	4b61      	ldr	r3, [pc, #388]	@ (8003fbc <HAL_GPIO_Init+0x2fc>)
 8003e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e38:	4a60      	ldr	r2, [pc, #384]	@ (8003fbc <HAL_GPIO_Init+0x2fc>)
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e40:	4b5e      	ldr	r3, [pc, #376]	@ (8003fbc <HAL_GPIO_Init+0x2fc>)
 8003e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e4c:	4a5c      	ldr	r2, [pc, #368]	@ (8003fc0 <HAL_GPIO_Init+0x300>)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	3302      	adds	r3, #2
 8003e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	220f      	movs	r2, #15
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e76:	d02b      	beq.n	8003ed0 <HAL_GPIO_Init+0x210>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a52      	ldr	r2, [pc, #328]	@ (8003fc4 <HAL_GPIO_Init+0x304>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d025      	beq.n	8003ecc <HAL_GPIO_Init+0x20c>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a51      	ldr	r2, [pc, #324]	@ (8003fc8 <HAL_GPIO_Init+0x308>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d01f      	beq.n	8003ec8 <HAL_GPIO_Init+0x208>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a50      	ldr	r2, [pc, #320]	@ (8003fcc <HAL_GPIO_Init+0x30c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d019      	beq.n	8003ec4 <HAL_GPIO_Init+0x204>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a4f      	ldr	r2, [pc, #316]	@ (8003fd0 <HAL_GPIO_Init+0x310>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d013      	beq.n	8003ec0 <HAL_GPIO_Init+0x200>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a4e      	ldr	r2, [pc, #312]	@ (8003fd4 <HAL_GPIO_Init+0x314>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00d      	beq.n	8003ebc <HAL_GPIO_Init+0x1fc>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a4d      	ldr	r2, [pc, #308]	@ (8003fd8 <HAL_GPIO_Init+0x318>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d007      	beq.n	8003eb8 <HAL_GPIO_Init+0x1f8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a4c      	ldr	r2, [pc, #304]	@ (8003fdc <HAL_GPIO_Init+0x31c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d101      	bne.n	8003eb4 <HAL_GPIO_Init+0x1f4>
 8003eb0:	2307      	movs	r3, #7
 8003eb2:	e00e      	b.n	8003ed2 <HAL_GPIO_Init+0x212>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	e00c      	b.n	8003ed2 <HAL_GPIO_Init+0x212>
 8003eb8:	2306      	movs	r3, #6
 8003eba:	e00a      	b.n	8003ed2 <HAL_GPIO_Init+0x212>
 8003ebc:	2305      	movs	r3, #5
 8003ebe:	e008      	b.n	8003ed2 <HAL_GPIO_Init+0x212>
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	e006      	b.n	8003ed2 <HAL_GPIO_Init+0x212>
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e004      	b.n	8003ed2 <HAL_GPIO_Init+0x212>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e002      	b.n	8003ed2 <HAL_GPIO_Init+0x212>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <HAL_GPIO_Init+0x212>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	f002 0203 	and.w	r2, r2, #3
 8003ed8:	0092      	lsls	r2, r2, #2
 8003eda:	4093      	lsls	r3, r2
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ee2:	4937      	ldr	r1, [pc, #220]	@ (8003fc0 <HAL_GPIO_Init+0x300>)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	3302      	adds	r3, #2
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe0 <HAL_GPIO_Init+0x320>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f14:	4a32      	ldr	r2, [pc, #200]	@ (8003fe0 <HAL_GPIO_Init+0x320>)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f1a:	4b31      	ldr	r3, [pc, #196]	@ (8003fe0 <HAL_GPIO_Init+0x320>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	43db      	mvns	r3, r3
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	4013      	ands	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f3e:	4a28      	ldr	r2, [pc, #160]	@ (8003fe0 <HAL_GPIO_Init+0x320>)
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f44:	4b26      	ldr	r3, [pc, #152]	@ (8003fe0 <HAL_GPIO_Init+0x320>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4013      	ands	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f68:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe0 <HAL_GPIO_Init+0x320>)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe0 <HAL_GPIO_Init+0x320>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	43db      	mvns	r3, r3
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f92:	4a13      	ldr	r2, [pc, #76]	@ (8003fe0 <HAL_GPIO_Init+0x320>)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f47f ae91 	bne.w	8003cd0 <HAL_GPIO_Init+0x10>
  }
}
 8003fae:	bf00      	nop
 8003fb0:	bf00      	nop
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	48000400 	.word	0x48000400
 8003fc8:	48000800 	.word	0x48000800
 8003fcc:	48000c00 	.word	0x48000c00
 8003fd0:	48001000 	.word	0x48001000
 8003fd4:	48001400 	.word	0x48001400
 8003fd8:	48001800 	.word	0x48001800
 8003fdc:	48001c00 	.word	0x48001c00
 8003fe0:	40010400 	.word	0x40010400

08003fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	807b      	strh	r3, [r7, #2]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ff4:	787b      	ldrb	r3, [r7, #1]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ffa:	887a      	ldrh	r2, [r7, #2]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004000:	e002      	b.n	8004008 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004002:	887a      	ldrh	r2, [r7, #2]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e08d      	b.n	8004142 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fd feba 	bl	8001db4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2224      	movs	r2, #36	@ 0x24
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0201 	bic.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004064:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004074:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d107      	bne.n	800408e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	e006      	b.n	800409c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800409a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d108      	bne.n	80040b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	e007      	b.n	80040c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80040d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69d9      	ldr	r1, [r3, #28]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1a      	ldr	r2, [r3, #32]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af02      	add	r7, sp, #8
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	607a      	str	r2, [r7, #4]
 8004156:	461a      	mov	r2, r3
 8004158:	460b      	mov	r3, r1
 800415a:	817b      	strh	r3, [r7, #10]
 800415c:	4613      	mov	r3, r2
 800415e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b20      	cmp	r3, #32
 800416a:	f040 80fd 	bne.w	8004368 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_I2C_Master_Transmit+0x30>
 8004178:	2302      	movs	r3, #2
 800417a:	e0f6      	b.n	800436a <HAL_I2C_Master_Transmit+0x21e>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004184:	f7fe fb88 	bl	8002898 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	2319      	movs	r3, #25
 8004190:	2201      	movs	r2, #1
 8004192:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 fa0a 	bl	80045b0 <I2C_WaitOnFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e0e1      	b.n	800436a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2221      	movs	r2, #33	@ 0x21
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2210      	movs	r2, #16
 80041b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	893a      	ldrh	r2, [r7, #8]
 80041c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2bff      	cmp	r3, #255	@ 0xff
 80041d6:	d906      	bls.n	80041e6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	22ff      	movs	r2, #255	@ 0xff
 80041dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80041de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	e007      	b.n	80041f6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80041f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041f4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d024      	beq.n	8004248 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	781a      	ldrb	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004232:	b2db      	uxtb	r3, r3
 8004234:	3301      	adds	r3, #1
 8004236:	b2da      	uxtb	r2, r3
 8004238:	8979      	ldrh	r1, [r7, #10]
 800423a:	4b4e      	ldr	r3, [pc, #312]	@ (8004374 <HAL_I2C_Master_Transmit+0x228>)
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 fc05 	bl	8004a50 <I2C_TransferConfig>
 8004246:	e066      	b.n	8004316 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424c:	b2da      	uxtb	r2, r3
 800424e:	8979      	ldrh	r1, [r7, #10]
 8004250:	4b48      	ldr	r3, [pc, #288]	@ (8004374 <HAL_I2C_Master_Transmit+0x228>)
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 fbfa 	bl	8004a50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800425c:	e05b      	b.n	8004316 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	6a39      	ldr	r1, [r7, #32]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f9fd 	bl	8004662 <I2C_WaitOnTXISFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e07b      	b.n	800436a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	781a      	ldrb	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d034      	beq.n	8004316 <HAL_I2C_Master_Transmit+0x1ca>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d130      	bne.n	8004316 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	2200      	movs	r2, #0
 80042bc:	2180      	movs	r1, #128	@ 0x80
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f976 	bl	80045b0 <I2C_WaitOnFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e04d      	b.n	800436a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2bff      	cmp	r3, #255	@ 0xff
 80042d6:	d90e      	bls.n	80042f6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	22ff      	movs	r2, #255	@ 0xff
 80042dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	8979      	ldrh	r1, [r7, #10]
 80042e6:	2300      	movs	r3, #0
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 fbae 	bl	8004a50 <I2C_TransferConfig>
 80042f4:	e00f      	b.n	8004316 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004304:	b2da      	uxtb	r2, r3
 8004306:	8979      	ldrh	r1, [r7, #10]
 8004308:	2300      	movs	r3, #0
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fb9d 	bl	8004a50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d19e      	bne.n	800425e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	6a39      	ldr	r1, [r7, #32]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f9e3 	bl	80046f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e01a      	b.n	800436a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2220      	movs	r2, #32
 800433a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6859      	ldr	r1, [r3, #4]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4b0c      	ldr	r3, [pc, #48]	@ (8004378 <HAL_I2C_Master_Transmit+0x22c>)
 8004348:	400b      	ands	r3, r1
 800434a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	e000      	b.n	800436a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004368:	2302      	movs	r3, #2
  }
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	80002000 	.word	0x80002000
 8004378:	fe00e800 	.word	0xfe00e800

0800437c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	461a      	mov	r2, r3
 8004388:	460b      	mov	r3, r1
 800438a:	817b      	strh	r3, [r7, #10]
 800438c:	4613      	mov	r3, r2
 800438e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b20      	cmp	r3, #32
 800439a:	f040 80db 	bne.w	8004554 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_I2C_Master_Receive+0x30>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e0d4      	b.n	8004556 <HAL_I2C_Master_Receive+0x1da>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043b4:	f7fe fa70 	bl	8002898 <HAL_GetTick>
 80043b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	2319      	movs	r3, #25
 80043c0:	2201      	movs	r2, #1
 80043c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f8f2 	bl	80045b0 <I2C_WaitOnFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e0bf      	b.n	8004556 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2222      	movs	r2, #34	@ 0x22
 80043da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2210      	movs	r2, #16
 80043e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	893a      	ldrh	r2, [r7, #8]
 80043f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	2bff      	cmp	r3, #255	@ 0xff
 8004406:	d90e      	bls.n	8004426 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004412:	b2da      	uxtb	r2, r3
 8004414:	8979      	ldrh	r1, [r7, #10]
 8004416:	4b52      	ldr	r3, [pc, #328]	@ (8004560 <HAL_I2C_Master_Receive+0x1e4>)
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fb16 	bl	8004a50 <I2C_TransferConfig>
 8004424:	e06d      	b.n	8004502 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004434:	b2da      	uxtb	r2, r3
 8004436:	8979      	ldrh	r1, [r7, #10]
 8004438:	4b49      	ldr	r3, [pc, #292]	@ (8004560 <HAL_I2C_Master_Receive+0x1e4>)
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fb05 	bl	8004a50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004446:	e05c      	b.n	8004502 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	6a39      	ldr	r1, [r7, #32]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f993 	bl	8004778 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e07c      	b.n	8004556 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d034      	beq.n	8004502 <HAL_I2C_Master_Receive+0x186>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449c:	2b00      	cmp	r3, #0
 800449e:	d130      	bne.n	8004502 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	2200      	movs	r2, #0
 80044a8:	2180      	movs	r1, #128	@ 0x80
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f880 	bl	80045b0 <I2C_WaitOnFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e04d      	b.n	8004556 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2bff      	cmp	r3, #255	@ 0xff
 80044c2:	d90e      	bls.n	80044e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	22ff      	movs	r2, #255	@ 0xff
 80044c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	8979      	ldrh	r1, [r7, #10]
 80044d2:	2300      	movs	r3, #0
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fab8 	bl	8004a50 <I2C_TransferConfig>
 80044e0:	e00f      	b.n	8004502 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	8979      	ldrh	r1, [r7, #10]
 80044f4:	2300      	movs	r3, #0
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 faa7 	bl	8004a50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d19d      	bne.n	8004448 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	6a39      	ldr	r1, [r7, #32]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f8ed 	bl	80046f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e01a      	b.n	8004556 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2220      	movs	r2, #32
 8004526:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6859      	ldr	r1, [r3, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4b0c      	ldr	r3, [pc, #48]	@ (8004564 <HAL_I2C_Master_Receive+0x1e8>)
 8004534:	400b      	ands	r3, r1
 8004536:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	e000      	b.n	8004556 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004554:	2302      	movs	r3, #2
  }
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	80002400 	.word	0x80002400
 8004564:	fe00e800 	.word	0xfe00e800

08004568 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b02      	cmp	r3, #2
 800457c:	d103      	bne.n	8004586 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2200      	movs	r2, #0
 8004584:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b01      	cmp	r3, #1
 8004592:	d007      	beq.n	80045a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	619a      	str	r2, [r3, #24]
  }
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045c0:	e03b      	b.n	800463a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	6839      	ldr	r1, [r7, #0]
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f962 	bl	8004890 <I2C_IsErrorOccurred>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e041      	b.n	800465a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045dc:	d02d      	beq.n	800463a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045de:	f7fe f95b 	bl	8002898 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d302      	bcc.n	80045f4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d122      	bne.n	800463a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4013      	ands	r3, r2
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	429a      	cmp	r2, r3
 8004602:	bf0c      	ite	eq
 8004604:	2301      	moveq	r3, #1
 8004606:	2300      	movne	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	429a      	cmp	r2, r3
 8004610:	d113      	bne.n	800463a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	f043 0220 	orr.w	r2, r3, #32
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e00f      	b.n	800465a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	699a      	ldr	r2, [r3, #24]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4013      	ands	r3, r2
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	429a      	cmp	r2, r3
 8004648:	bf0c      	ite	eq
 800464a:	2301      	moveq	r3, #1
 800464c:	2300      	movne	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	429a      	cmp	r2, r3
 8004656:	d0b4      	beq.n	80045c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800466e:	e033      	b.n	80046d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f90b 	bl	8004890 <I2C_IsErrorOccurred>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e031      	b.n	80046e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468a:	d025      	beq.n	80046d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468c:	f7fe f904 	bl	8002898 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	429a      	cmp	r2, r3
 800469a:	d302      	bcc.n	80046a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d11a      	bne.n	80046d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d013      	beq.n	80046d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e007      	b.n	80046e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d1c4      	bne.n	8004670 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046fc:	e02f      	b.n	800475e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f8c4 	bl	8004890 <I2C_IsErrorOccurred>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e02d      	b.n	800476e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004712:	f7fe f8c1 	bl	8002898 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	429a      	cmp	r2, r3
 8004720:	d302      	bcc.n	8004728 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d11a      	bne.n	800475e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b20      	cmp	r3, #32
 8004734:	d013      	beq.n	800475e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473a:	f043 0220 	orr.w	r2, r3, #32
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e007      	b.n	800476e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b20      	cmp	r3, #32
 800476a:	d1c8      	bne.n	80046fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004788:	e071      	b.n	800486e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	68b9      	ldr	r1, [r7, #8]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f87e 	bl	8004890 <I2C_IsErrorOccurred>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d13b      	bne.n	8004824 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80047ac:	7dfb      	ldrb	r3, [r7, #23]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d138      	bne.n	8004824 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d105      	bne.n	80047cc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b10      	cmp	r3, #16
 80047d8:	d121      	bne.n	800481e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2210      	movs	r2, #16
 80047e0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2204      	movs	r2, #4
 80047e6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2220      	movs	r2, #32
 80047ee:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4b24      	ldr	r3, [pc, #144]	@ (800488c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80047fc:	400b      	ands	r3, r1
 80047fe:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	75fb      	strb	r3, [r7, #23]
 800481c:	e002      	b.n	8004824 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004824:	f7fe f838 	bl	8002898 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	429a      	cmp	r2, r3
 8004832:	d302      	bcc.n	800483a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d119      	bne.n	800486e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d116      	bne.n	800486e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b04      	cmp	r3, #4
 800484c:	d00f      	beq.n	800486e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004852:	f043 0220 	orr.w	r2, r3, #32
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b04      	cmp	r3, #4
 800487a:	d002      	beq.n	8004882 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d083      	beq.n	800478a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8004882:	7dfb      	ldrb	r3, [r7, #23]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	fe00e800 	.word	0xfe00e800

08004890 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	@ 0x28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d068      	beq.n	800498e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2210      	movs	r2, #16
 80048c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048c4:	e049      	b.n	800495a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d045      	beq.n	800495a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048ce:	f7fd ffe3 	bl	8002898 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d302      	bcc.n	80048e4 <I2C_IsErrorOccurred+0x54>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d13a      	bne.n	800495a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004902:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004906:	d121      	bne.n	800494c <I2C_IsErrorOccurred+0xbc>
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800490e:	d01d      	beq.n	800494c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004910:	7cfb      	ldrb	r3, [r7, #19]
 8004912:	2b20      	cmp	r3, #32
 8004914:	d01a      	beq.n	800494c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004924:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004926:	f7fd ffb7 	bl	8002898 <HAL_GetTick>
 800492a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800492c:	e00e      	b.n	800494c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800492e:	f7fd ffb3 	bl	8002898 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b19      	cmp	r3, #25
 800493a:	d907      	bls.n	800494c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	f043 0320 	orr.w	r3, r3, #32
 8004942:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800494a:	e006      	b.n	800495a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b20      	cmp	r3, #32
 8004958:	d1e9      	bne.n	800492e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b20      	cmp	r3, #32
 8004966:	d003      	beq.n	8004970 <I2C_IsErrorOccurred+0xe0>
 8004968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0aa      	beq.n	80048c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004970:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004974:	2b00      	cmp	r3, #0
 8004976:	d103      	bne.n	8004980 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2220      	movs	r2, #32
 800497e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	f043 0304 	orr.w	r3, r3, #4
 8004986:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00b      	beq.n	80049b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00b      	beq.n	80049da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	f043 0308 	orr.w	r3, r3, #8
 80049c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00b      	beq.n	80049fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	f043 0302 	orr.w	r3, r3, #2
 80049ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80049fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01c      	beq.n	8004a3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7ff fdaf 	bl	8004568 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6859      	ldr	r1, [r3, #4]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4b0d      	ldr	r3, [pc, #52]	@ (8004a4c <I2C_IsErrorOccurred+0x1bc>)
 8004a16:	400b      	ands	r3, r1
 8004a18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3728      	adds	r7, #40	@ 0x28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	fe00e800 	.word	0xfe00e800

08004a50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	817b      	strh	r3, [r7, #10]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a62:	897b      	ldrh	r3, [r7, #10]
 8004a64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a68:	7a7b      	ldrb	r3, [r7, #9]
 8004a6a:	041b      	lsls	r3, r3, #16
 8004a6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	0d5b      	lsrs	r3, r3, #21
 8004a8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004a8e:	4b08      	ldr	r3, [pc, #32]	@ (8004ab0 <I2C_TransferConfig+0x60>)
 8004a90:	430b      	orrs	r3, r1
 8004a92:	43db      	mvns	r3, r3
 8004a94:	ea02 0103 	and.w	r1, r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	03ff63ff 	.word	0x03ff63ff

08004ab4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d138      	bne.n	8004b3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e032      	b.n	8004b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2224      	movs	r2, #36	@ 0x24
 8004ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0201 	bic.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6819      	ldr	r1, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b085      	sub	sp, #20
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d139      	bne.n	8004bd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e033      	b.n	8004bd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2224      	movs	r2, #36	@ 0x24
 8004b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0201 	bic.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e000      	b.n	8004bd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bd4:	2302      	movs	r3, #2
  }
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
	...

08004be4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004be8:	4b04      	ldr	r3, [pc, #16]	@ (8004bfc <HAL_PWREx_GetVoltageRange+0x18>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40007000 	.word	0x40007000

08004c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c0e:	d130      	bne.n	8004c72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c10:	4b23      	ldr	r3, [pc, #140]	@ (8004ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c1c:	d038      	beq.n	8004c90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c1e:	4b20      	ldr	r3, [pc, #128]	@ (8004ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c26:	4a1e      	ldr	r2, [pc, #120]	@ (8004ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2232      	movs	r2, #50	@ 0x32
 8004c34:	fb02 f303 	mul.w	r3, r2, r3
 8004c38:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	0c9b      	lsrs	r3, r3, #18
 8004c40:	3301      	adds	r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c44:	e002      	b.n	8004c4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c4c:	4b14      	ldr	r3, [pc, #80]	@ (8004ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c58:	d102      	bne.n	8004c60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f2      	bne.n	8004c46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c60:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c6c:	d110      	bne.n	8004c90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e00f      	b.n	8004c92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c7e:	d007      	beq.n	8004c90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c80:	4b07      	ldr	r3, [pc, #28]	@ (8004ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c88:	4a05      	ldr	r2, [pc, #20]	@ (8004ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40007000 	.word	0x40007000
 8004ca4:	20000000 	.word	0x20000000
 8004ca8:	431bde83 	.word	0x431bde83

08004cac <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004cb0:	4b05      	ldr	r3, [pc, #20]	@ (8004cc8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	4a04      	ldr	r2, [pc, #16]	@ (8004cc8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004cb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004cba:	6053      	str	r3, [r2, #4]
}
 8004cbc:	bf00      	nop
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40007000 	.word	0x40007000

08004ccc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004cd4:	f7fd fde0 	bl	8002898 <HAL_GetTick>
 8004cd8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e069      	b.n	8004db8 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10b      	bne.n	8004d08 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7fd fa6f 	bl	80021dc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004cfe:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f85e 	bl	8004dc4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	021a      	lsls	r2, r3, #8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2120      	movs	r1, #32
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f856 	bl	8004de0 <QSPI_WaitFlagStateUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004d38:	7afb      	ldrb	r3, [r7, #11]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d137      	bne.n	8004dae <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004d48:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6852      	ldr	r2, [r2, #4]
 8004d50:	0611      	lsls	r1, r2, #24
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	68d2      	ldr	r2, [r2, #12]
 8004d56:	4311      	orrs	r1, r2
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	69d2      	ldr	r2, [r2, #28]
 8004d5c:	4311      	orrs	r1, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6a12      	ldr	r2, [r2, #32]
 8004d62:	4311      	orrs	r1, r2
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	6812      	ldr	r2, [r2, #0]
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	4b13      	ldr	r3, [pc, #76]	@ (8004dc0 <HAL_QSPI_Init+0xf4>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6912      	ldr	r2, [r2, #16]
 8004d7a:	0411      	lsls	r1, r2, #16
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6952      	ldr	r2, [r2, #20]
 8004d80:	4311      	orrs	r1, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6992      	ldr	r2, [r2, #24]
 8004d86:	4311      	orrs	r1, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0201 	orr.w	r2, r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8004db6:	7afb      	ldrb	r3, [r7, #11]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	ffe0f8fe 	.word	0xffe0f8fe

08004dc4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	4613      	mov	r3, r2
 8004dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004df0:	e01a      	b.n	8004e28 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d016      	beq.n	8004e28 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfa:	f7fd fd4d 	bl	8002898 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d302      	bcc.n	8004e10 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2204      	movs	r2, #4
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1c:	f043 0201 	orr.w	r2, r3, #1
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e00e      	b.n	8004e46 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bf14      	ite	ne
 8004e36:	2301      	movne	r3, #1
 8004e38:	2300      	moveq	r3, #0
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d1d6      	bne.n	8004df2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d102      	bne.n	8004e64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f000 bc08 	b.w	8005674 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e64:	4b96      	ldr	r3, [pc, #600]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 030c 	and.w	r3, r3, #12
 8004e6c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e6e:	4b94      	ldr	r3, [pc, #592]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80e4 	beq.w	800504e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <HAL_RCC_OscConfig+0x4c>
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b0c      	cmp	r3, #12
 8004e90:	f040 808b 	bne.w	8004faa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	f040 8087 	bne.w	8004faa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e9c:	4b88      	ldr	r3, [pc, #544]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x64>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e3df      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1a      	ldr	r2, [r3, #32]
 8004eb8:	4b81      	ldr	r3, [pc, #516]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d004      	beq.n	8004ece <HAL_RCC_OscConfig+0x7e>
 8004ec4:	4b7e      	ldr	r3, [pc, #504]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ecc:	e005      	b.n	8004eda <HAL_RCC_OscConfig+0x8a>
 8004ece:	4b7c      	ldr	r3, [pc, #496]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d223      	bcs.n	8004f26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fd92 	bl	8005a0c <RCC_SetFlashLatencyFromMSIRange>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e3c0      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ef2:	4b73      	ldr	r3, [pc, #460]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a72      	ldr	r2, [pc, #456]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004ef8:	f043 0308 	orr.w	r3, r3, #8
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	4b70      	ldr	r3, [pc, #448]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	496d      	ldr	r1, [pc, #436]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f10:	4b6b      	ldr	r3, [pc, #428]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	4968      	ldr	r1, [pc, #416]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	604b      	str	r3, [r1, #4]
 8004f24:	e025      	b.n	8004f72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f26:	4b66      	ldr	r3, [pc, #408]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a65      	ldr	r2, [pc, #404]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f2c:	f043 0308 	orr.w	r3, r3, #8
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	4b63      	ldr	r3, [pc, #396]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	4960      	ldr	r1, [pc, #384]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f44:	4b5e      	ldr	r3, [pc, #376]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	495b      	ldr	r1, [pc, #364]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d109      	bne.n	8004f72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fd52 	bl	8005a0c <RCC_SetFlashLatencyFromMSIRange>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e380      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f72:	f000 fc87 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 8004f76:	4602      	mov	r2, r0
 8004f78:	4b51      	ldr	r3, [pc, #324]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	4950      	ldr	r1, [pc, #320]	@ (80050c4 <HAL_RCC_OscConfig+0x274>)
 8004f84:	5ccb      	ldrb	r3, [r1, r3]
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8e:	4a4e      	ldr	r2, [pc, #312]	@ (80050c8 <HAL_RCC_OscConfig+0x278>)
 8004f90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f92:	4b4e      	ldr	r3, [pc, #312]	@ (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fd fc2e 	bl	80027f8 <HAL_InitTick>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d052      	beq.n	800504c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	e364      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d032      	beq.n	8005018 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fb2:	4b43      	ldr	r3, [pc, #268]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a42      	ldr	r2, [pc, #264]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004fb8:	f043 0301 	orr.w	r3, r3, #1
 8004fbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fbe:	f7fd fc6b 	bl	8002898 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fc6:	f7fd fc67 	bl	8002898 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e34d      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fd8:	4b39      	ldr	r3, [pc, #228]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fe4:	4b36      	ldr	r3, [pc, #216]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a35      	ldr	r2, [pc, #212]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004fea:	f043 0308 	orr.w	r3, r3, #8
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	4b33      	ldr	r3, [pc, #204]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	4930      	ldr	r1, [pc, #192]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005002:	4b2f      	ldr	r3, [pc, #188]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	021b      	lsls	r3, r3, #8
 8005010:	492b      	ldr	r1, [pc, #172]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8005012:	4313      	orrs	r3, r2
 8005014:	604b      	str	r3, [r1, #4]
 8005016:	e01a      	b.n	800504e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005018:	4b29      	ldr	r3, [pc, #164]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a28      	ldr	r2, [pc, #160]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005024:	f7fd fc38 	bl	8002898 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800502c:	f7fd fc34 	bl	8002898 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e31a      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800503e:	4b20      	ldr	r3, [pc, #128]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x1dc>
 800504a:	e000      	b.n	800504e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800504c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d073      	beq.n	8005142 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2b08      	cmp	r3, #8
 800505e:	d005      	beq.n	800506c <HAL_RCC_OscConfig+0x21c>
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b0c      	cmp	r3, #12
 8005064:	d10e      	bne.n	8005084 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b03      	cmp	r3, #3
 800506a:	d10b      	bne.n	8005084 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800506c:	4b14      	ldr	r3, [pc, #80]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d063      	beq.n	8005140 <HAL_RCC_OscConfig+0x2f0>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d15f      	bne.n	8005140 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e2f7      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800508c:	d106      	bne.n	800509c <HAL_RCC_OscConfig+0x24c>
 800508e:	4b0c      	ldr	r3, [pc, #48]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a0b      	ldr	r2, [pc, #44]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 8005094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e025      	b.n	80050e8 <HAL_RCC_OscConfig+0x298>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050a4:	d114      	bne.n	80050d0 <HAL_RCC_OscConfig+0x280>
 80050a6:	4b06      	ldr	r3, [pc, #24]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a05      	ldr	r2, [pc, #20]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 80050ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	4b03      	ldr	r3, [pc, #12]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a02      	ldr	r2, [pc, #8]	@ (80050c0 <HAL_RCC_OscConfig+0x270>)
 80050b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	e013      	b.n	80050e8 <HAL_RCC_OscConfig+0x298>
 80050c0:	40021000 	.word	0x40021000
 80050c4:	08008ce4 	.word	0x08008ce4
 80050c8:	20000000 	.word	0x20000000
 80050cc:	20000004 	.word	0x20000004
 80050d0:	4ba0      	ldr	r3, [pc, #640]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a9f      	ldr	r2, [pc, #636]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 80050d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	4b9d      	ldr	r3, [pc, #628]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a9c      	ldr	r2, [pc, #624]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 80050e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d013      	beq.n	8005118 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7fd fbd2 	bl	8002898 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f8:	f7fd fbce 	bl	8002898 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b64      	cmp	r3, #100	@ 0x64
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e2b4      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800510a:	4b92      	ldr	r3, [pc, #584]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0x2a8>
 8005116:	e014      	b.n	8005142 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fd fbbe 	bl	8002898 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005120:	f7fd fbba 	bl	8002898 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b64      	cmp	r3, #100	@ 0x64
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e2a0      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005132:	4b88      	ldr	r3, [pc, #544]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x2d0>
 800513e:	e000      	b.n	8005142 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d060      	beq.n	8005210 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	2b04      	cmp	r3, #4
 8005152:	d005      	beq.n	8005160 <HAL_RCC_OscConfig+0x310>
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	2b0c      	cmp	r3, #12
 8005158:	d119      	bne.n	800518e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2b02      	cmp	r3, #2
 800515e:	d116      	bne.n	800518e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005160:	4b7c      	ldr	r3, [pc, #496]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_RCC_OscConfig+0x328>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e27d      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005178:	4b76      	ldr	r3, [pc, #472]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	061b      	lsls	r3, r3, #24
 8005186:	4973      	ldr	r1, [pc, #460]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 8005188:	4313      	orrs	r3, r2
 800518a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800518c:	e040      	b.n	8005210 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d023      	beq.n	80051de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005196:	4b6f      	ldr	r3, [pc, #444]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a6e      	ldr	r2, [pc, #440]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 800519c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a2:	f7fd fb79 	bl	8002898 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051aa:	f7fd fb75 	bl	8002898 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e25b      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051bc:	4b65      	ldr	r3, [pc, #404]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f0      	beq.n	80051aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c8:	4b62      	ldr	r3, [pc, #392]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	061b      	lsls	r3, r3, #24
 80051d6:	495f      	ldr	r1, [pc, #380]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	604b      	str	r3, [r1, #4]
 80051dc:	e018      	b.n	8005210 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051de:	4b5d      	ldr	r3, [pc, #372]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a5c      	ldr	r2, [pc, #368]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 80051e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ea:	f7fd fb55 	bl	8002898 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f2:	f7fd fb51 	bl	8002898 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e237      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005204:	4b53      	ldr	r3, [pc, #332]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f0      	bne.n	80051f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d03c      	beq.n	8005296 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01c      	beq.n	800525e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005224:	4b4b      	ldr	r3, [pc, #300]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 8005226:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800522a:	4a4a      	ldr	r2, [pc, #296]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 800522c:	f043 0301 	orr.w	r3, r3, #1
 8005230:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005234:	f7fd fb30 	bl	8002898 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800523c:	f7fd fb2c 	bl	8002898 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e212      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800524e:	4b41      	ldr	r3, [pc, #260]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 8005250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0ef      	beq.n	800523c <HAL_RCC_OscConfig+0x3ec>
 800525c:	e01b      	b.n	8005296 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800525e:	4b3d      	ldr	r3, [pc, #244]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 8005260:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005264:	4a3b      	ldr	r2, [pc, #236]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526e:	f7fd fb13 	bl	8002898 <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005276:	f7fd fb0f 	bl	8002898 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e1f5      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005288:	4b32      	ldr	r3, [pc, #200]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 800528a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1ef      	bne.n	8005276 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 80a6 	beq.w	80053f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052a4:	2300      	movs	r3, #0
 80052a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 80052aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10d      	bne.n	80052d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b4:	4b27      	ldr	r3, [pc, #156]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 80052b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b8:	4a26      	ldr	r2, [pc, #152]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 80052ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052be:	6593      	str	r3, [r2, #88]	@ 0x58
 80052c0:	4b24      	ldr	r3, [pc, #144]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 80052c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052cc:	2301      	movs	r3, #1
 80052ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052d0:	4b21      	ldr	r3, [pc, #132]	@ (8005358 <HAL_RCC_OscConfig+0x508>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d118      	bne.n	800530e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052dc:	4b1e      	ldr	r3, [pc, #120]	@ (8005358 <HAL_RCC_OscConfig+0x508>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005358 <HAL_RCC_OscConfig+0x508>)
 80052e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052e8:	f7fd fad6 	bl	8002898 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f0:	f7fd fad2 	bl	8002898 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e1b8      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005302:	4b15      	ldr	r3, [pc, #84]	@ (8005358 <HAL_RCC_OscConfig+0x508>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d108      	bne.n	8005328 <HAL_RCC_OscConfig+0x4d8>
 8005316:	4b0f      	ldr	r3, [pc, #60]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531c:	4a0d      	ldr	r2, [pc, #52]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005326:	e029      	b.n	800537c <HAL_RCC_OscConfig+0x52c>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b05      	cmp	r3, #5
 800532e:	d115      	bne.n	800535c <HAL_RCC_OscConfig+0x50c>
 8005330:	4b08      	ldr	r3, [pc, #32]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005336:	4a07      	ldr	r2, [pc, #28]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 8005338:	f043 0304 	orr.w	r3, r3, #4
 800533c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005340:	4b04      	ldr	r3, [pc, #16]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005346:	4a03      	ldr	r2, [pc, #12]	@ (8005354 <HAL_RCC_OscConfig+0x504>)
 8005348:	f043 0301 	orr.w	r3, r3, #1
 800534c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005350:	e014      	b.n	800537c <HAL_RCC_OscConfig+0x52c>
 8005352:	bf00      	nop
 8005354:	40021000 	.word	0x40021000
 8005358:	40007000 	.word	0x40007000
 800535c:	4b9d      	ldr	r3, [pc, #628]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005362:	4a9c      	ldr	r2, [pc, #624]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005364:	f023 0301 	bic.w	r3, r3, #1
 8005368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800536c:	4b99      	ldr	r3, [pc, #612]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005372:	4a98      	ldr	r2, [pc, #608]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005374:	f023 0304 	bic.w	r3, r3, #4
 8005378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d016      	beq.n	80053b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005384:	f7fd fa88 	bl	8002898 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800538a:	e00a      	b.n	80053a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800538c:	f7fd fa84 	bl	8002898 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800539a:	4293      	cmp	r3, r2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e168      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a2:	4b8c      	ldr	r3, [pc, #560]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 80053a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0ed      	beq.n	800538c <HAL_RCC_OscConfig+0x53c>
 80053b0:	e015      	b.n	80053de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b2:	f7fd fa71 	bl	8002898 <HAL_GetTick>
 80053b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053b8:	e00a      	b.n	80053d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ba:	f7fd fa6d 	bl	8002898 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e151      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053d0:	4b80      	ldr	r3, [pc, #512]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1ed      	bne.n	80053ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053de:	7ffb      	ldrb	r3, [r7, #31]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d105      	bne.n	80053f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e4:	4b7b      	ldr	r3, [pc, #492]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 80053e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e8:	4a7a      	ldr	r2, [pc, #488]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 80053ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d03c      	beq.n	8005476 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01c      	beq.n	800543e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005404:	4b73      	ldr	r3, [pc, #460]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005406:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800540a:	4a72      	ldr	r2, [pc, #456]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005414:	f7fd fa40 	bl	8002898 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800541c:	f7fd fa3c 	bl	8002898 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e122      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800542e:	4b69      	ldr	r3, [pc, #420]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005430:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0ef      	beq.n	800541c <HAL_RCC_OscConfig+0x5cc>
 800543c:	e01b      	b.n	8005476 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800543e:	4b65      	ldr	r3, [pc, #404]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005440:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005444:	4a63      	ldr	r2, [pc, #396]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544e:	f7fd fa23 	bl	8002898 <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005456:	f7fd fa1f 	bl	8002898 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e105      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005468:	4b5a      	ldr	r3, [pc, #360]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 800546a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1ef      	bne.n	8005456 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 80f9 	beq.w	8005672 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005484:	2b02      	cmp	r3, #2
 8005486:	f040 80cf 	bne.w	8005628 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800548a:	4b52      	ldr	r3, [pc, #328]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f003 0203 	and.w	r2, r3, #3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549a:	429a      	cmp	r2, r3
 800549c:	d12c      	bne.n	80054f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a8:	3b01      	subs	r3, #1
 80054aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d123      	bne.n	80054f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054bc:	429a      	cmp	r2, r3
 80054be:	d11b      	bne.n	80054f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d113      	bne.n	80054f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	3b01      	subs	r3, #1
 80054de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d109      	bne.n	80054f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	3b01      	subs	r3, #1
 80054f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d071      	beq.n	80055dc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	2b0c      	cmp	r3, #12
 80054fc:	d068      	beq.n	80055d0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054fe:	4b35      	ldr	r3, [pc, #212]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d105      	bne.n	8005516 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800550a:	4b32      	ldr	r3, [pc, #200]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e0ac      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800551a:	4b2e      	ldr	r3, [pc, #184]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2d      	ldr	r2, [pc, #180]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005520:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005524:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005526:	f7fd f9b7 	bl	8002898 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800552e:	f7fd f9b3 	bl	8002898 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e099      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005540:	4b24      	ldr	r3, [pc, #144]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f0      	bne.n	800552e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800554c:	4b21      	ldr	r3, [pc, #132]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	4b21      	ldr	r3, [pc, #132]	@ (80055d8 <HAL_RCC_OscConfig+0x788>)
 8005552:	4013      	ands	r3, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800555c:	3a01      	subs	r2, #1
 800555e:	0112      	lsls	r2, r2, #4
 8005560:	4311      	orrs	r1, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005566:	0212      	lsls	r2, r2, #8
 8005568:	4311      	orrs	r1, r2
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800556e:	0852      	lsrs	r2, r2, #1
 8005570:	3a01      	subs	r2, #1
 8005572:	0552      	lsls	r2, r2, #21
 8005574:	4311      	orrs	r1, r2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800557a:	0852      	lsrs	r2, r2, #1
 800557c:	3a01      	subs	r2, #1
 800557e:	0652      	lsls	r2, r2, #25
 8005580:	4311      	orrs	r1, r2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005586:	06d2      	lsls	r2, r2, #27
 8005588:	430a      	orrs	r2, r1
 800558a:	4912      	ldr	r1, [pc, #72]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 800558c:	4313      	orrs	r3, r2
 800558e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005590:	4b10      	ldr	r3, [pc, #64]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a0f      	ldr	r2, [pc, #60]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 8005596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800559a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800559c:	4b0d      	ldr	r3, [pc, #52]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4a0c      	ldr	r2, [pc, #48]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 80055a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055a8:	f7fd f976 	bl	8002898 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b0:	f7fd f972 	bl	8002898 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e058      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055c2:	4b04      	ldr	r3, [pc, #16]	@ (80055d4 <HAL_RCC_OscConfig+0x784>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0f0      	beq.n	80055b0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055ce:	e050      	b.n	8005672 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e04f      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
 80055d4:	40021000 	.word	0x40021000
 80055d8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055dc:	4b27      	ldr	r3, [pc, #156]	@ (800567c <HAL_RCC_OscConfig+0x82c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d144      	bne.n	8005672 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80055e8:	4b24      	ldr	r3, [pc, #144]	@ (800567c <HAL_RCC_OscConfig+0x82c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a23      	ldr	r2, [pc, #140]	@ (800567c <HAL_RCC_OscConfig+0x82c>)
 80055ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055f4:	4b21      	ldr	r3, [pc, #132]	@ (800567c <HAL_RCC_OscConfig+0x82c>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	4a20      	ldr	r2, [pc, #128]	@ (800567c <HAL_RCC_OscConfig+0x82c>)
 80055fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005600:	f7fd f94a 	bl	8002898 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005608:	f7fd f946 	bl	8002898 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e02c      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800561a:	4b18      	ldr	r3, [pc, #96]	@ (800567c <HAL_RCC_OscConfig+0x82c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f0      	beq.n	8005608 <HAL_RCC_OscConfig+0x7b8>
 8005626:	e024      	b.n	8005672 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2b0c      	cmp	r3, #12
 800562c:	d01f      	beq.n	800566e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800562e:	4b13      	ldr	r3, [pc, #76]	@ (800567c <HAL_RCC_OscConfig+0x82c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a12      	ldr	r2, [pc, #72]	@ (800567c <HAL_RCC_OscConfig+0x82c>)
 8005634:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563a:	f7fd f92d 	bl	8002898 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005642:	f7fd f929 	bl	8002898 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e00f      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005654:	4b09      	ldr	r3, [pc, #36]	@ (800567c <HAL_RCC_OscConfig+0x82c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f0      	bne.n	8005642 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005660:	4b06      	ldr	r3, [pc, #24]	@ (800567c <HAL_RCC_OscConfig+0x82c>)
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	4905      	ldr	r1, [pc, #20]	@ (800567c <HAL_RCC_OscConfig+0x82c>)
 8005666:	4b06      	ldr	r3, [pc, #24]	@ (8005680 <HAL_RCC_OscConfig+0x830>)
 8005668:	4013      	ands	r3, r2
 800566a:	60cb      	str	r3, [r1, #12]
 800566c:	e001      	b.n	8005672 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3720      	adds	r7, #32
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40021000 	.word	0x40021000
 8005680:	feeefffc 	.word	0xfeeefffc

08005684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e0e7      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005698:	4b75      	ldr	r3, [pc, #468]	@ (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d910      	bls.n	80056c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a6:	4b72      	ldr	r3, [pc, #456]	@ (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f023 0207 	bic.w	r2, r3, #7
 80056ae:	4970      	ldr	r1, [pc, #448]	@ (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b6:	4b6e      	ldr	r3, [pc, #440]	@ (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d001      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0cf      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d010      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	4b66      	ldr	r3, [pc, #408]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d908      	bls.n	80056f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e4:	4b63      	ldr	r3, [pc, #396]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4960      	ldr	r1, [pc, #384]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d04c      	beq.n	800579c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b03      	cmp	r3, #3
 8005708:	d107      	bne.n	800571a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800570a:	4b5a      	ldr	r3, [pc, #360]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d121      	bne.n	800575a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e0a6      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d107      	bne.n	8005732 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005722:	4b54      	ldr	r3, [pc, #336]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d115      	bne.n	800575a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e09a      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d107      	bne.n	800574a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800573a:	4b4e      	ldr	r3, [pc, #312]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e08e      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800574a:	4b4a      	ldr	r3, [pc, #296]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e086      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800575a:	4b46      	ldr	r3, [pc, #280]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f023 0203 	bic.w	r2, r3, #3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	4943      	ldr	r1, [pc, #268]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 8005768:	4313      	orrs	r3, r2
 800576a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800576c:	f7fd f894 	bl	8002898 <HAL_GetTick>
 8005770:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005772:	e00a      	b.n	800578a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005774:	f7fd f890 	bl	8002898 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005782:	4293      	cmp	r3, r2
 8005784:	d901      	bls.n	800578a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e06e      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800578a:	4b3a      	ldr	r3, [pc, #232]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 020c 	and.w	r2, r3, #12
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	429a      	cmp	r2, r3
 800579a:	d1eb      	bne.n	8005774 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d010      	beq.n	80057ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	4b31      	ldr	r3, [pc, #196]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d208      	bcs.n	80057ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	492b      	ldr	r1, [pc, #172]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057ca:	4b29      	ldr	r3, [pc, #164]	@ (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d210      	bcs.n	80057fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d8:	4b25      	ldr	r3, [pc, #148]	@ (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f023 0207 	bic.w	r2, r3, #7
 80057e0:	4923      	ldr	r1, [pc, #140]	@ (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e8:	4b21      	ldr	r3, [pc, #132]	@ (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d001      	beq.n	80057fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e036      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	d008      	beq.n	8005818 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005806:	4b1b      	ldr	r3, [pc, #108]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	4918      	ldr	r1, [pc, #96]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 8005814:	4313      	orrs	r3, r2
 8005816:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005824:	4b13      	ldr	r3, [pc, #76]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	4910      	ldr	r1, [pc, #64]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 8005834:	4313      	orrs	r3, r2
 8005836:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005838:	f000 f824 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 800583c:	4602      	mov	r2, r0
 800583e:	4b0d      	ldr	r3, [pc, #52]	@ (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	091b      	lsrs	r3, r3, #4
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	490b      	ldr	r1, [pc, #44]	@ (8005878 <HAL_RCC_ClockConfig+0x1f4>)
 800584a:	5ccb      	ldrb	r3, [r1, r3]
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	fa22 f303 	lsr.w	r3, r2, r3
 8005854:	4a09      	ldr	r2, [pc, #36]	@ (800587c <HAL_RCC_ClockConfig+0x1f8>)
 8005856:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005858:	4b09      	ldr	r3, [pc, #36]	@ (8005880 <HAL_RCC_ClockConfig+0x1fc>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	f7fc ffcb 	bl	80027f8 <HAL_InitTick>
 8005862:	4603      	mov	r3, r0
 8005864:	72fb      	strb	r3, [r7, #11]

  return status;
 8005866:	7afb      	ldrb	r3, [r7, #11]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40022000 	.word	0x40022000
 8005874:	40021000 	.word	0x40021000
 8005878:	08008ce4 	.word	0x08008ce4
 800587c:	20000000 	.word	0x20000000
 8005880:	20000004 	.word	0x20000004

08005884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005884:	b480      	push	{r7}
 8005886:	b089      	sub	sp, #36	@ 0x24
 8005888:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	2300      	movs	r3, #0
 8005890:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005892:	4b3e      	ldr	r3, [pc, #248]	@ (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 030c 	and.w	r3, r3, #12
 800589a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800589c:	4b3b      	ldr	r3, [pc, #236]	@ (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <HAL_RCC_GetSysClockFreq+0x34>
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b0c      	cmp	r3, #12
 80058b0:	d121      	bne.n	80058f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d11e      	bne.n	80058f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058b8:	4b34      	ldr	r3, [pc, #208]	@ (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d107      	bne.n	80058d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058c4:	4b31      	ldr	r3, [pc, #196]	@ (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 80058c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058ca:	0a1b      	lsrs	r3, r3, #8
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	e005      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058d4:	4b2d      	ldr	r3, [pc, #180]	@ (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	091b      	lsrs	r3, r3, #4
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10d      	bne.n	800590c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058f4:	e00a      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d102      	bne.n	8005902 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058fc:	4b25      	ldr	r3, [pc, #148]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x110>)
 80058fe:	61bb      	str	r3, [r7, #24]
 8005900:	e004      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	2b08      	cmp	r3, #8
 8005906:	d101      	bne.n	800590c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005908:	4b23      	ldr	r3, [pc, #140]	@ (8005998 <HAL_RCC_GetSysClockFreq+0x114>)
 800590a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	2b0c      	cmp	r3, #12
 8005910:	d134      	bne.n	800597c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005912:	4b1e      	ldr	r3, [pc, #120]	@ (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d003      	beq.n	800592a <HAL_RCC_GetSysClockFreq+0xa6>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d003      	beq.n	8005930 <HAL_RCC_GetSysClockFreq+0xac>
 8005928:	e005      	b.n	8005936 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800592a:	4b1a      	ldr	r3, [pc, #104]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x110>)
 800592c:	617b      	str	r3, [r7, #20]
      break;
 800592e:	e005      	b.n	800593c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005930:	4b19      	ldr	r3, [pc, #100]	@ (8005998 <HAL_RCC_GetSysClockFreq+0x114>)
 8005932:	617b      	str	r3, [r7, #20]
      break;
 8005934:	e002      	b.n	800593c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	617b      	str	r3, [r7, #20]
      break;
 800593a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800593c:	4b13      	ldr	r3, [pc, #76]	@ (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	3301      	adds	r3, #1
 8005948:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800594a:	4b10      	ldr	r3, [pc, #64]	@ (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	0a1b      	lsrs	r3, r3, #8
 8005950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	fb03 f202 	mul.w	r2, r3, r2
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005960:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005962:	4b0a      	ldr	r3, [pc, #40]	@ (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	0e5b      	lsrs	r3, r3, #25
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	3301      	adds	r3, #1
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	fbb2 f3f3 	udiv	r3, r2, r3
 800597a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800597c:	69bb      	ldr	r3, [r7, #24]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3724      	adds	r7, #36	@ 0x24
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40021000 	.word	0x40021000
 8005990:	08008cfc 	.word	0x08008cfc
 8005994:	00f42400 	.word	0x00f42400
 8005998:	016e3600 	.word	0x016e3600

0800599c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059a0:	4b03      	ldr	r3, [pc, #12]	@ (80059b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059a2:	681b      	ldr	r3, [r3, #0]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20000000 	.word	0x20000000

080059b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059b8:	f7ff fff0 	bl	800599c <HAL_RCC_GetHCLKFreq>
 80059bc:	4602      	mov	r2, r0
 80059be:	4b06      	ldr	r3, [pc, #24]	@ (80059d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	0a1b      	lsrs	r3, r3, #8
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	4904      	ldr	r1, [pc, #16]	@ (80059dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80059ca:	5ccb      	ldrb	r3, [r1, r3]
 80059cc:	f003 031f 	and.w	r3, r3, #31
 80059d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40021000 	.word	0x40021000
 80059dc:	08008cf4 	.word	0x08008cf4

080059e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059e4:	f7ff ffda 	bl	800599c <HAL_RCC_GetHCLKFreq>
 80059e8:	4602      	mov	r2, r0
 80059ea:	4b06      	ldr	r3, [pc, #24]	@ (8005a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	0adb      	lsrs	r3, r3, #11
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	4904      	ldr	r1, [pc, #16]	@ (8005a08 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059f6:	5ccb      	ldrb	r3, [r1, r3]
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40021000 	.word	0x40021000
 8005a08:	08008cf4 	.word	0x08008cf4

08005a0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005a14:	2300      	movs	r3, #0
 8005a16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005a18:	4b2a      	ldr	r3, [pc, #168]	@ (8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a24:	f7ff f8de 	bl	8004be4 <HAL_PWREx_GetVoltageRange>
 8005a28:	6178      	str	r0, [r7, #20]
 8005a2a:	e014      	b.n	8005a56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a2c:	4b25      	ldr	r3, [pc, #148]	@ (8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a30:	4a24      	ldr	r2, [pc, #144]	@ (8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a38:	4b22      	ldr	r3, [pc, #136]	@ (8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a44:	f7ff f8ce 	bl	8004be4 <HAL_PWREx_GetVoltageRange>
 8005a48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a54:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a5c:	d10b      	bne.n	8005a76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b80      	cmp	r3, #128	@ 0x80
 8005a62:	d919      	bls.n	8005a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2ba0      	cmp	r3, #160	@ 0xa0
 8005a68:	d902      	bls.n	8005a70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	613b      	str	r3, [r7, #16]
 8005a6e:	e013      	b.n	8005a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a70:	2301      	movs	r3, #1
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	e010      	b.n	8005a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b80      	cmp	r3, #128	@ 0x80
 8005a7a:	d902      	bls.n	8005a82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	e00a      	b.n	8005a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b80      	cmp	r3, #128	@ 0x80
 8005a86:	d102      	bne.n	8005a8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a88:	2302      	movs	r3, #2
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	e004      	b.n	8005a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b70      	cmp	r3, #112	@ 0x70
 8005a92:	d101      	bne.n	8005a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a94:	2301      	movs	r3, #1
 8005a96:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a98:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f023 0207 	bic.w	r2, r3, #7
 8005aa0:	4909      	ldr	r1, [pc, #36]	@ (8005ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005aa8:	4b07      	ldr	r3, [pc, #28]	@ (8005ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d001      	beq.n	8005aba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	40022000 	.word	0x40022000

08005acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ad8:	2300      	movs	r3, #0
 8005ada:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d041      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005aec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005af0:	d02a      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005af2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005af6:	d824      	bhi.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005af8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005afc:	d008      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005afe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b02:	d81e      	bhi.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005b08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b0c:	d010      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b0e:	e018      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b10:	4b86      	ldr	r3, [pc, #536]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	4a85      	ldr	r2, [pc, #532]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b1c:	e015      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3304      	adds	r3, #4
 8005b22:	2100      	movs	r1, #0
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 facd 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b2e:	e00c      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3320      	adds	r3, #32
 8005b34:	2100      	movs	r1, #0
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fbb6 	bl	80062a8 <RCCEx_PLLSAI2_Config>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b40:	e003      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	74fb      	strb	r3, [r7, #19]
      break;
 8005b46:	e000      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b4a:	7cfb      	ldrb	r3, [r7, #19]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10b      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b50:	4b76      	ldr	r3, [pc, #472]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b5e:	4973      	ldr	r1, [pc, #460]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005b66:	e001      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b68:	7cfb      	ldrb	r3, [r7, #19]
 8005b6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d041      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b80:	d02a      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b86:	d824      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b8c:	d008      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b92:	d81e      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b9c:	d010      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b9e:	e018      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ba0:	4b62      	ldr	r3, [pc, #392]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4a61      	ldr	r2, [pc, #388]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005baa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bac:	e015      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fa85 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bbe:	e00c      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3320      	adds	r3, #32
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fb6e 	bl	80062a8 <RCCEx_PLLSAI2_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bd0:	e003      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	74fb      	strb	r3, [r7, #19]
      break;
 8005bd6:	e000      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bda:	7cfb      	ldrb	r3, [r7, #19]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10b      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005be0:	4b52      	ldr	r3, [pc, #328]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bee:	494f      	ldr	r1, [pc, #316]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005bf6:	e001      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf8:	7cfb      	ldrb	r3, [r7, #19]
 8005bfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80a0 	beq.w	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c0e:	4b47      	ldr	r3, [pc, #284]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00d      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c24:	4b41      	ldr	r3, [pc, #260]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c28:	4a40      	ldr	r2, [pc, #256]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c30:	4b3e      	ldr	r3, [pc, #248]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c38:	60bb      	str	r3, [r7, #8]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c40:	4b3b      	ldr	r3, [pc, #236]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a3a      	ldr	r2, [pc, #232]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c4c:	f7fc fe24 	bl	8002898 <HAL_GetTick>
 8005c50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c52:	e009      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c54:	f7fc fe20 	bl	8002898 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d902      	bls.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	74fb      	strb	r3, [r7, #19]
        break;
 8005c66:	e005      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c68:	4b31      	ldr	r3, [pc, #196]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0ef      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005c74:	7cfb      	ldrb	r3, [r7, #19]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d15c      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01f      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d019      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c98:	4b24      	ldr	r3, [pc, #144]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ca2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ca4:	4b21      	ldr	r3, [pc, #132]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005caa:	4a20      	ldr	r2, [pc, #128]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cba:	4a1c      	ldr	r2, [pc, #112]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cc4:	4a19      	ldr	r2, [pc, #100]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d016      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd6:	f7fc fddf 	bl	8002898 <HAL_GetTick>
 8005cda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cdc:	e00b      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cde:	f7fc fddb 	bl	8002898 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d902      	bls.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	74fb      	strb	r3, [r7, #19]
            break;
 8005cf4:	e006      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0ec      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005d04:	7cfb      	ldrb	r3, [r7, #19]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10c      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d0a:	4b08      	ldr	r3, [pc, #32]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d1a:	4904      	ldr	r1, [pc, #16]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005d22:	e009      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d24:	7cfb      	ldrb	r3, [r7, #19]
 8005d26:	74bb      	strb	r3, [r7, #18]
 8005d28:	e006      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005d2a:	bf00      	nop
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d34:	7cfb      	ldrb	r3, [r7, #19]
 8005d36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d38:	7c7b      	ldrb	r3, [r7, #17]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d105      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d3e:	4ba6      	ldr	r3, [pc, #664]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d42:	4aa5      	ldr	r2, [pc, #660]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d56:	4ba0      	ldr	r3, [pc, #640]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5c:	f023 0203 	bic.w	r2, r3, #3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d64:	499c      	ldr	r1, [pc, #624]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d78:	4b97      	ldr	r3, [pc, #604]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7e:	f023 020c 	bic.w	r2, r3, #12
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d86:	4994      	ldr	r1, [pc, #592]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d9a:	4b8f      	ldr	r3, [pc, #572]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da8:	498b      	ldr	r1, [pc, #556]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005dbc:	4b86      	ldr	r3, [pc, #536]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dca:	4983      	ldr	r1, [pc, #524]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0310 	and.w	r3, r3, #16
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dde:	4b7e      	ldr	r3, [pc, #504]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dec:	497a      	ldr	r1, [pc, #488]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e00:	4b75      	ldr	r3, [pc, #468]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e0e:	4972      	ldr	r1, [pc, #456]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e22:	4b6d      	ldr	r3, [pc, #436]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e30:	4969      	ldr	r1, [pc, #420]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e44:	4b64      	ldr	r3, [pc, #400]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e52:	4961      	ldr	r1, [pc, #388]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e66:	4b5c      	ldr	r3, [pc, #368]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e6c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e74:	4958      	ldr	r1, [pc, #352]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e88:	4b53      	ldr	r3, [pc, #332]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e96:	4950      	ldr	r1, [pc, #320]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005eaa:	4b4b      	ldr	r3, [pc, #300]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb8:	4947      	ldr	r1, [pc, #284]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ecc:	4b42      	ldr	r3, [pc, #264]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ed2:	f023 0203 	bic.w	r2, r3, #3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eda:	493f      	ldr	r1, [pc, #252]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d028      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005eee:	4b3a      	ldr	r3, [pc, #232]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005efc:	4936      	ldr	r1, [pc, #216]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f0c:	d106      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f0e:	4b32      	ldr	r3, [pc, #200]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	4a31      	ldr	r2, [pc, #196]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005f14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f18:	60d3      	str	r3, [r2, #12]
 8005f1a:	e011      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f24:	d10c      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3304      	adds	r3, #4
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 f8c9 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 8005f32:	4603      	mov	r3, r0
 8005f34:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005f36:	7cfb      	ldrb	r3, [r7, #19]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005f3c:	7cfb      	ldrb	r3, [r7, #19]
 8005f3e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d028      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f4c:	4b22      	ldr	r3, [pc, #136]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f5a:	491f      	ldr	r1, [pc, #124]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f6a:	d106      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	4a19      	ldr	r2, [pc, #100]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005f72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f76:	60d3      	str	r3, [r2, #12]
 8005f78:	e011      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f82:	d10c      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	3304      	adds	r3, #4
 8005f88:	2101      	movs	r1, #1
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 f89a 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 8005f90:	4603      	mov	r3, r0
 8005f92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f94:	7cfb      	ldrb	r3, [r7, #19]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005f9a:	7cfb      	ldrb	r3, [r7, #19]
 8005f9c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d02a      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005faa:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fb8:	4907      	ldr	r1, [pc, #28]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fc8:	d108      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fca:	4b03      	ldr	r3, [pc, #12]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	4a02      	ldr	r2, [pc, #8]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005fd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fd4:	60d3      	str	r3, [r2, #12]
 8005fd6:	e013      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005fd8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fe0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fe4:	d10c      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	2101      	movs	r1, #1
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 f869 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ff6:	7cfb      	ldrb	r3, [r7, #19]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005ffc:	7cfb      	ldrb	r3, [r7, #19]
 8005ffe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d02f      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800600c:	4b2c      	ldr	r3, [pc, #176]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800600e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006012:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800601a:	4929      	ldr	r1, [pc, #164]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800601c:	4313      	orrs	r3, r2
 800601e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800602a:	d10d      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	2102      	movs	r1, #2
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f846 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800603c:	7cfb      	ldrb	r3, [r7, #19]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d014      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8006042:	7cfb      	ldrb	r3, [r7, #19]
 8006044:	74bb      	strb	r3, [r7, #18]
 8006046:	e011      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800604c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006050:	d10c      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3320      	adds	r3, #32
 8006056:	2102      	movs	r1, #2
 8006058:	4618      	mov	r0, r3
 800605a:	f000 f925 	bl	80062a8 <RCCEx_PLLSAI2_Config>
 800605e:	4603      	mov	r3, r0
 8006060:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006062:	7cfb      	ldrb	r3, [r7, #19]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8006068:	7cfb      	ldrb	r3, [r7, #19]
 800606a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006078:	4b11      	ldr	r3, [pc, #68]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800607a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006088:	490d      	ldr	r1, [pc, #52]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00b      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800609c:	4b08      	ldr	r3, [pc, #32]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800609e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060ac:	4904      	ldr	r1, [pc, #16]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80060b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	40021000 	.word	0x40021000

080060c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060d2:	4b74      	ldr	r3, [pc, #464]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d018      	beq.n	8006110 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80060de:	4b71      	ldr	r3, [pc, #452]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0203 	and.w	r2, r3, #3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d10d      	bne.n	800610a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
       ||
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d009      	beq.n	800610a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80060f6:	4b6b      	ldr	r3, [pc, #428]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	091b      	lsrs	r3, r3, #4
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
       ||
 8006106:	429a      	cmp	r2, r3
 8006108:	d047      	beq.n	800619a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	73fb      	strb	r3, [r7, #15]
 800610e:	e044      	b.n	800619a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b03      	cmp	r3, #3
 8006116:	d018      	beq.n	800614a <RCCEx_PLLSAI1_Config+0x86>
 8006118:	2b03      	cmp	r3, #3
 800611a:	d825      	bhi.n	8006168 <RCCEx_PLLSAI1_Config+0xa4>
 800611c:	2b01      	cmp	r3, #1
 800611e:	d002      	beq.n	8006126 <RCCEx_PLLSAI1_Config+0x62>
 8006120:	2b02      	cmp	r3, #2
 8006122:	d009      	beq.n	8006138 <RCCEx_PLLSAI1_Config+0x74>
 8006124:	e020      	b.n	8006168 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006126:	4b5f      	ldr	r3, [pc, #380]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d11d      	bne.n	800616e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006136:	e01a      	b.n	800616e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006138:	4b5a      	ldr	r3, [pc, #360]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006140:	2b00      	cmp	r3, #0
 8006142:	d116      	bne.n	8006172 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006148:	e013      	b.n	8006172 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800614a:	4b56      	ldr	r3, [pc, #344]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10f      	bne.n	8006176 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006156:	4b53      	ldr	r3, [pc, #332]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006166:	e006      	b.n	8006176 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	73fb      	strb	r3, [r7, #15]
      break;
 800616c:	e004      	b.n	8006178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800616e:	bf00      	nop
 8006170:	e002      	b.n	8006178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006172:	bf00      	nop
 8006174:	e000      	b.n	8006178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006176:	bf00      	nop
    }

    if(status == HAL_OK)
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10d      	bne.n	800619a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800617e:	4b49      	ldr	r3, [pc, #292]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6819      	ldr	r1, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	3b01      	subs	r3, #1
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	430b      	orrs	r3, r1
 8006194:	4943      	ldr	r1, [pc, #268]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006196:	4313      	orrs	r3, r2
 8006198:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d17c      	bne.n	800629a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80061a0:	4b40      	ldr	r3, [pc, #256]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a3f      	ldr	r2, [pc, #252]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ac:	f7fc fb74 	bl	8002898 <HAL_GetTick>
 80061b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80061b2:	e009      	b.n	80061c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061b4:	f7fc fb70 	bl	8002898 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d902      	bls.n	80061c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	73fb      	strb	r3, [r7, #15]
        break;
 80061c6:	e005      	b.n	80061d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80061c8:	4b36      	ldr	r3, [pc, #216]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1ef      	bne.n	80061b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d15f      	bne.n	800629a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d110      	bne.n	8006202 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061e0:	4b30      	ldr	r3, [pc, #192]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80061e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6892      	ldr	r2, [r2, #8]
 80061f0:	0211      	lsls	r1, r2, #8
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	68d2      	ldr	r2, [r2, #12]
 80061f6:	06d2      	lsls	r2, r2, #27
 80061f8:	430a      	orrs	r2, r1
 80061fa:	492a      	ldr	r1, [pc, #168]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	610b      	str	r3, [r1, #16]
 8006200:	e027      	b.n	8006252 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d112      	bne.n	800622e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006208:	4b26      	ldr	r3, [pc, #152]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006210:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6892      	ldr	r2, [r2, #8]
 8006218:	0211      	lsls	r1, r2, #8
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6912      	ldr	r2, [r2, #16]
 800621e:	0852      	lsrs	r2, r2, #1
 8006220:	3a01      	subs	r2, #1
 8006222:	0552      	lsls	r2, r2, #21
 8006224:	430a      	orrs	r2, r1
 8006226:	491f      	ldr	r1, [pc, #124]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006228:	4313      	orrs	r3, r2
 800622a:	610b      	str	r3, [r1, #16]
 800622c:	e011      	b.n	8006252 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800622e:	4b1d      	ldr	r3, [pc, #116]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006236:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6892      	ldr	r2, [r2, #8]
 800623e:	0211      	lsls	r1, r2, #8
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6952      	ldr	r2, [r2, #20]
 8006244:	0852      	lsrs	r2, r2, #1
 8006246:	3a01      	subs	r2, #1
 8006248:	0652      	lsls	r2, r2, #25
 800624a:	430a      	orrs	r2, r1
 800624c:	4915      	ldr	r1, [pc, #84]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800624e:	4313      	orrs	r3, r2
 8006250:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006252:	4b14      	ldr	r3, [pc, #80]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a13      	ldr	r2, [pc, #76]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006258:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800625c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800625e:	f7fc fb1b 	bl	8002898 <HAL_GetTick>
 8006262:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006264:	e009      	b.n	800627a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006266:	f7fc fb17 	bl	8002898 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d902      	bls.n	800627a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	73fb      	strb	r3, [r7, #15]
          break;
 8006278:	e005      	b.n	8006286 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800627a:	4b0a      	ldr	r3, [pc, #40]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d0ef      	beq.n	8006266 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800628c:	4b05      	ldr	r3, [pc, #20]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	4903      	ldr	r1, [pc, #12]	@ (80062a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006296:	4313      	orrs	r3, r2
 8006298:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800629a:	7bfb      	ldrb	r3, [r7, #15]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	40021000 	.word	0x40021000

080062a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062b6:	4b69      	ldr	r3, [pc, #420]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d018      	beq.n	80062f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80062c2:	4b66      	ldr	r3, [pc, #408]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f003 0203 	and.w	r2, r3, #3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d10d      	bne.n	80062ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
       ||
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d009      	beq.n	80062ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80062da:	4b60      	ldr	r3, [pc, #384]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	091b      	lsrs	r3, r3, #4
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
       ||
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d047      	beq.n	800637e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	73fb      	strb	r3, [r7, #15]
 80062f2:	e044      	b.n	800637e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d018      	beq.n	800632e <RCCEx_PLLSAI2_Config+0x86>
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d825      	bhi.n	800634c <RCCEx_PLLSAI2_Config+0xa4>
 8006300:	2b01      	cmp	r3, #1
 8006302:	d002      	beq.n	800630a <RCCEx_PLLSAI2_Config+0x62>
 8006304:	2b02      	cmp	r3, #2
 8006306:	d009      	beq.n	800631c <RCCEx_PLLSAI2_Config+0x74>
 8006308:	e020      	b.n	800634c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800630a:	4b54      	ldr	r3, [pc, #336]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d11d      	bne.n	8006352 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800631a:	e01a      	b.n	8006352 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800631c:	4b4f      	ldr	r3, [pc, #316]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006324:	2b00      	cmp	r3, #0
 8006326:	d116      	bne.n	8006356 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800632c:	e013      	b.n	8006356 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800632e:	4b4b      	ldr	r3, [pc, #300]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10f      	bne.n	800635a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800633a:	4b48      	ldr	r3, [pc, #288]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d109      	bne.n	800635a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800634a:	e006      	b.n	800635a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	73fb      	strb	r3, [r7, #15]
      break;
 8006350:	e004      	b.n	800635c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006352:	bf00      	nop
 8006354:	e002      	b.n	800635c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006356:	bf00      	nop
 8006358:	e000      	b.n	800635c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800635a:	bf00      	nop
    }

    if(status == HAL_OK)
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10d      	bne.n	800637e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006362:	4b3e      	ldr	r3, [pc, #248]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6819      	ldr	r1, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	3b01      	subs	r3, #1
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	430b      	orrs	r3, r1
 8006378:	4938      	ldr	r1, [pc, #224]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 800637a:	4313      	orrs	r3, r2
 800637c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d166      	bne.n	8006452 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006384:	4b35      	ldr	r3, [pc, #212]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a34      	ldr	r2, [pc, #208]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 800638a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800638e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006390:	f7fc fa82 	bl	8002898 <HAL_GetTick>
 8006394:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006396:	e009      	b.n	80063ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006398:	f7fc fa7e 	bl	8002898 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d902      	bls.n	80063ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	73fb      	strb	r3, [r7, #15]
        break;
 80063aa:	e005      	b.n	80063b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80063ac:	4b2b      	ldr	r3, [pc, #172]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1ef      	bne.n	8006398 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d149      	bne.n	8006452 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d110      	bne.n	80063e6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80063c4:	4b25      	ldr	r3, [pc, #148]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80063cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6892      	ldr	r2, [r2, #8]
 80063d4:	0211      	lsls	r1, r2, #8
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	68d2      	ldr	r2, [r2, #12]
 80063da:	06d2      	lsls	r2, r2, #27
 80063dc:	430a      	orrs	r2, r1
 80063de:	491f      	ldr	r1, [pc, #124]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	614b      	str	r3, [r1, #20]
 80063e4:	e011      	b.n	800640a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80063e6:	4b1d      	ldr	r3, [pc, #116]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80063ee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6892      	ldr	r2, [r2, #8]
 80063f6:	0211      	lsls	r1, r2, #8
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6912      	ldr	r2, [r2, #16]
 80063fc:	0852      	lsrs	r2, r2, #1
 80063fe:	3a01      	subs	r2, #1
 8006400:	0652      	lsls	r2, r2, #25
 8006402:	430a      	orrs	r2, r1
 8006404:	4915      	ldr	r1, [pc, #84]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 8006406:	4313      	orrs	r3, r2
 8006408:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800640a:	4b14      	ldr	r3, [pc, #80]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a13      	ldr	r2, [pc, #76]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 8006410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006414:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006416:	f7fc fa3f 	bl	8002898 <HAL_GetTick>
 800641a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800641c:	e009      	b.n	8006432 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800641e:	f7fc fa3b 	bl	8002898 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d902      	bls.n	8006432 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	73fb      	strb	r3, [r7, #15]
          break;
 8006430:	e005      	b.n	800643e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006432:	4b0a      	ldr	r3, [pc, #40]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0ef      	beq.n	800641e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d106      	bne.n	8006452 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006444:	4b05      	ldr	r3, [pc, #20]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 8006446:	695a      	ldr	r2, [r3, #20]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	4903      	ldr	r1, [pc, #12]	@ (800645c <RCCEx_PLLSAI2_Config+0x1b4>)
 800644e:	4313      	orrs	r3, r2
 8006450:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006452:	7bfb      	ldrb	r3, [r7, #15]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40021000 	.word	0x40021000

08006460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e095      	b.n	800659e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	2b00      	cmp	r3, #0
 8006478:	d108      	bne.n	800648c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006482:	d009      	beq.n	8006498 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	61da      	str	r2, [r3, #28]
 800648a:	e005      	b.n	8006498 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fb fef6 	bl	80022a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064d8:	d902      	bls.n	80064e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	e002      	b.n	80064e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80064e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80064e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80064ee:	d007      	beq.n	8006500 <HAL_SPI_Init+0xa0>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064f8:	d002      	beq.n	8006500 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006542:	ea42 0103 	orr.w	r1, r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	0c1b      	lsrs	r3, r3, #16
 800655c:	f003 0204 	and.w	r2, r3, #4
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	431a      	orrs	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800657c:	ea42 0103 	orr.w	r1, r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e049      	b.n	800664c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d106      	bne.n	80065d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7fb fee1 	bl	8002394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2202      	movs	r2, #2
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3304      	adds	r3, #4
 80065e2:	4619      	mov	r1, r3
 80065e4:	4610      	mov	r0, r2
 80065e6:	f000 ff37 	bl	8007458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b01      	cmp	r3, #1
 8006666:	d001      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e04f      	b.n	800670c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0201 	orr.w	r2, r2, #1
 8006682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a23      	ldr	r2, [pc, #140]	@ (8006718 <HAL_TIM_Base_Start_IT+0xc4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d01d      	beq.n	80066ca <HAL_TIM_Base_Start_IT+0x76>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006696:	d018      	beq.n	80066ca <HAL_TIM_Base_Start_IT+0x76>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a1f      	ldr	r2, [pc, #124]	@ (800671c <HAL_TIM_Base_Start_IT+0xc8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d013      	beq.n	80066ca <HAL_TIM_Base_Start_IT+0x76>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006720 <HAL_TIM_Base_Start_IT+0xcc>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00e      	beq.n	80066ca <HAL_TIM_Base_Start_IT+0x76>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006724 <HAL_TIM_Base_Start_IT+0xd0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d009      	beq.n	80066ca <HAL_TIM_Base_Start_IT+0x76>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006728 <HAL_TIM_Base_Start_IT+0xd4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d004      	beq.n	80066ca <HAL_TIM_Base_Start_IT+0x76>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a19      	ldr	r2, [pc, #100]	@ (800672c <HAL_TIM_Base_Start_IT+0xd8>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d115      	bne.n	80066f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	4b17      	ldr	r3, [pc, #92]	@ (8006730 <HAL_TIM_Base_Start_IT+0xdc>)
 80066d2:	4013      	ands	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2b06      	cmp	r3, #6
 80066da:	d015      	beq.n	8006708 <HAL_TIM_Base_Start_IT+0xb4>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066e2:	d011      	beq.n	8006708 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f4:	e008      	b.n	8006708 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f042 0201 	orr.w	r2, r2, #1
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	e000      	b.n	800670a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006708:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	40012c00 	.word	0x40012c00
 800671c:	40000400 	.word	0x40000400
 8006720:	40000800 	.word	0x40000800
 8006724:	40000c00 	.word	0x40000c00
 8006728:	40013400 	.word	0x40013400
 800672c:	40014000 	.word	0x40014000
 8006730:	00010007 	.word	0x00010007

08006734 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e049      	b.n	80067da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fb ff3e 	bl	80025dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3304      	adds	r3, #4
 8006770:	4619      	mov	r1, r3
 8006772:	4610      	mov	r0, r2
 8006774:	f000 fe70 	bl	8007458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d109      	bne.n	8006808 <HAL_TIM_PWM_Start+0x24>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	bf14      	ite	ne
 8006800:	2301      	movne	r3, #1
 8006802:	2300      	moveq	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	e03c      	b.n	8006882 <HAL_TIM_PWM_Start+0x9e>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2b04      	cmp	r3, #4
 800680c:	d109      	bne.n	8006822 <HAL_TIM_PWM_Start+0x3e>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b01      	cmp	r3, #1
 8006818:	bf14      	ite	ne
 800681a:	2301      	movne	r3, #1
 800681c:	2300      	moveq	r3, #0
 800681e:	b2db      	uxtb	r3, r3
 8006820:	e02f      	b.n	8006882 <HAL_TIM_PWM_Start+0x9e>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b08      	cmp	r3, #8
 8006826:	d109      	bne.n	800683c <HAL_TIM_PWM_Start+0x58>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b01      	cmp	r3, #1
 8006832:	bf14      	ite	ne
 8006834:	2301      	movne	r3, #1
 8006836:	2300      	moveq	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	e022      	b.n	8006882 <HAL_TIM_PWM_Start+0x9e>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2b0c      	cmp	r3, #12
 8006840:	d109      	bne.n	8006856 <HAL_TIM_PWM_Start+0x72>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b01      	cmp	r3, #1
 800684c:	bf14      	ite	ne
 800684e:	2301      	movne	r3, #1
 8006850:	2300      	moveq	r3, #0
 8006852:	b2db      	uxtb	r3, r3
 8006854:	e015      	b.n	8006882 <HAL_TIM_PWM_Start+0x9e>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b10      	cmp	r3, #16
 800685a:	d109      	bne.n	8006870 <HAL_TIM_PWM_Start+0x8c>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b01      	cmp	r3, #1
 8006866:	bf14      	ite	ne
 8006868:	2301      	movne	r3, #1
 800686a:	2300      	moveq	r3, #0
 800686c:	b2db      	uxtb	r3, r3
 800686e:	e008      	b.n	8006882 <HAL_TIM_PWM_Start+0x9e>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b01      	cmp	r3, #1
 800687a:	bf14      	ite	ne
 800687c:	2301      	movne	r3, #1
 800687e:	2300      	moveq	r3, #0
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e09c      	b.n	80069c4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d104      	bne.n	800689a <HAL_TIM_PWM_Start+0xb6>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006898:	e023      	b.n	80068e2 <HAL_TIM_PWM_Start+0xfe>
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b04      	cmp	r3, #4
 800689e:	d104      	bne.n	80068aa <HAL_TIM_PWM_Start+0xc6>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068a8:	e01b      	b.n	80068e2 <HAL_TIM_PWM_Start+0xfe>
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d104      	bne.n	80068ba <HAL_TIM_PWM_Start+0xd6>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2202      	movs	r2, #2
 80068b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068b8:	e013      	b.n	80068e2 <HAL_TIM_PWM_Start+0xfe>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b0c      	cmp	r3, #12
 80068be:	d104      	bne.n	80068ca <HAL_TIM_PWM_Start+0xe6>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80068c8:	e00b      	b.n	80068e2 <HAL_TIM_PWM_Start+0xfe>
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b10      	cmp	r3, #16
 80068ce:	d104      	bne.n	80068da <HAL_TIM_PWM_Start+0xf6>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068d8:	e003      	b.n	80068e2 <HAL_TIM_PWM_Start+0xfe>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2202      	movs	r2, #2
 80068de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2201      	movs	r2, #1
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f001 faee 	bl	8007ecc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a35      	ldr	r2, [pc, #212]	@ (80069cc <HAL_TIM_PWM_Start+0x1e8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d013      	beq.n	8006922 <HAL_TIM_PWM_Start+0x13e>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a34      	ldr	r2, [pc, #208]	@ (80069d0 <HAL_TIM_PWM_Start+0x1ec>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00e      	beq.n	8006922 <HAL_TIM_PWM_Start+0x13e>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a32      	ldr	r2, [pc, #200]	@ (80069d4 <HAL_TIM_PWM_Start+0x1f0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d009      	beq.n	8006922 <HAL_TIM_PWM_Start+0x13e>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a31      	ldr	r2, [pc, #196]	@ (80069d8 <HAL_TIM_PWM_Start+0x1f4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d004      	beq.n	8006922 <HAL_TIM_PWM_Start+0x13e>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a2f      	ldr	r2, [pc, #188]	@ (80069dc <HAL_TIM_PWM_Start+0x1f8>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d101      	bne.n	8006926 <HAL_TIM_PWM_Start+0x142>
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <HAL_TIM_PWM_Start+0x144>
 8006926:	2300      	movs	r3, #0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d007      	beq.n	800693c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800693a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a22      	ldr	r2, [pc, #136]	@ (80069cc <HAL_TIM_PWM_Start+0x1e8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d01d      	beq.n	8006982 <HAL_TIM_PWM_Start+0x19e>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800694e:	d018      	beq.n	8006982 <HAL_TIM_PWM_Start+0x19e>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a22      	ldr	r2, [pc, #136]	@ (80069e0 <HAL_TIM_PWM_Start+0x1fc>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <HAL_TIM_PWM_Start+0x19e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a21      	ldr	r2, [pc, #132]	@ (80069e4 <HAL_TIM_PWM_Start+0x200>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00e      	beq.n	8006982 <HAL_TIM_PWM_Start+0x19e>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a1f      	ldr	r2, [pc, #124]	@ (80069e8 <HAL_TIM_PWM_Start+0x204>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d009      	beq.n	8006982 <HAL_TIM_PWM_Start+0x19e>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a17      	ldr	r2, [pc, #92]	@ (80069d0 <HAL_TIM_PWM_Start+0x1ec>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d004      	beq.n	8006982 <HAL_TIM_PWM_Start+0x19e>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a15      	ldr	r2, [pc, #84]	@ (80069d4 <HAL_TIM_PWM_Start+0x1f0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d115      	bne.n	80069ae <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	4b18      	ldr	r3, [pc, #96]	@ (80069ec <HAL_TIM_PWM_Start+0x208>)
 800698a:	4013      	ands	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b06      	cmp	r3, #6
 8006992:	d015      	beq.n	80069c0 <HAL_TIM_PWM_Start+0x1dc>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800699a:	d011      	beq.n	80069c0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ac:	e008      	b.n	80069c0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f042 0201 	orr.w	r2, r2, #1
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	e000      	b.n	80069c2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	40012c00 	.word	0x40012c00
 80069d0:	40013400 	.word	0x40013400
 80069d4:	40014000 	.word	0x40014000
 80069d8:	40014400 	.word	0x40014400
 80069dc:	40014800 	.word	0x40014800
 80069e0:	40000400 	.word	0x40000400
 80069e4:	40000800 	.word	0x40000800
 80069e8:	40000c00 	.word	0x40000c00
 80069ec:	00010007 	.word	0x00010007

080069f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e049      	b.n	8006a96 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fb fcf6 	bl	8002408 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4610      	mov	r0, r2
 8006a30:	f000 fd12 	bl	8007458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b086      	sub	sp, #24
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e097      	b.n	8006be2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fb fce0 	bl	800248c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6812      	ldr	r2, [r2, #0]
 8006ade:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006ae2:	f023 0307 	bic.w	r3, r3, #7
 8006ae6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	3304      	adds	r3, #4
 8006af0:	4619      	mov	r1, r3
 8006af2:	4610      	mov	r0, r2
 8006af4:	f000 fcb0 	bl	8007458 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b20:	f023 0303 	bic.w	r3, r3, #3
 8006b24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	689a      	ldr	r2, [r3, #8]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	021b      	lsls	r3, r3, #8
 8006b30:	4313      	orrs	r3, r2
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006b3e:	f023 030c 	bic.w	r3, r3, #12
 8006b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	021b      	lsls	r3, r3, #8
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	011a      	lsls	r2, r3, #4
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	031b      	lsls	r3, r3, #12
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006b7c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006b84:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	4313      	orrs	r3, r2
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bfa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c02:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c0a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c12:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d110      	bne.n	8006c3c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d102      	bne.n	8006c26 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c20:	7b7b      	ldrb	r3, [r7, #13]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d001      	beq.n	8006c2a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e069      	b.n	8006cfe <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2202      	movs	r2, #2
 8006c36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c3a:	e031      	b.n	8006ca0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d110      	bne.n	8006c64 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d102      	bne.n	8006c4e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c48:	7b3b      	ldrb	r3, [r7, #12]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d001      	beq.n	8006c52 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e055      	b.n	8006cfe <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2202      	movs	r2, #2
 8006c56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c62:	e01d      	b.n	8006ca0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d108      	bne.n	8006c7c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d105      	bne.n	8006c7c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c70:	7b7b      	ldrb	r3, [r7, #13]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d102      	bne.n	8006c7c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c76:	7b3b      	ldrb	r3, [r7, #12]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d001      	beq.n	8006c80 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e03e      	b.n	8006cfe <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_TIM_Encoder_Start+0xc4>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d008      	beq.n	8006cbe <HAL_TIM_Encoder_Start+0xd4>
 8006cac:	e00f      	b.n	8006cce <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f001 f908 	bl	8007ecc <TIM_CCxChannelCmd>
      break;
 8006cbc:	e016      	b.n	8006cec <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	2104      	movs	r1, #4
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 f900 	bl	8007ecc <TIM_CCxChannelCmd>
      break;
 8006ccc:	e00e      	b.n	8006cec <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 f8f8 	bl	8007ecc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	2104      	movs	r1, #4
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f001 f8f1 	bl	8007ecc <TIM_CCxChannelCmd>
      break;
 8006cea:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0201 	orr.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d020      	beq.n	8006d6a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d01b      	beq.n	8006d6a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f06f 0202 	mvn.w	r2, #2
 8006d3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fb62 	bl	800741a <HAL_TIM_IC_CaptureCallback>
 8006d56:	e005      	b.n	8006d64 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fb54 	bl	8007406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fb65 	bl	800742e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d020      	beq.n	8006db6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f003 0304 	and.w	r3, r3, #4
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d01b      	beq.n	8006db6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f06f 0204 	mvn.w	r2, #4
 8006d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fb3c 	bl	800741a <HAL_TIM_IC_CaptureCallback>
 8006da2:	e005      	b.n	8006db0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fb2e 	bl	8007406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fb3f 	bl	800742e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d020      	beq.n	8006e02 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01b      	beq.n	8006e02 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f06f 0208 	mvn.w	r2, #8
 8006dd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2204      	movs	r2, #4
 8006dd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	f003 0303 	and.w	r3, r3, #3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fb16 	bl	800741a <HAL_TIM_IC_CaptureCallback>
 8006dee:	e005      	b.n	8006dfc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fb08 	bl	8007406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fb19 	bl	800742e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d020      	beq.n	8006e4e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f003 0310 	and.w	r3, r3, #16
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d01b      	beq.n	8006e4e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f06f 0210 	mvn.w	r2, #16
 8006e1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2208      	movs	r2, #8
 8006e24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 faf0 	bl	800741a <HAL_TIM_IC_CaptureCallback>
 8006e3a:	e005      	b.n	8006e48 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fae2 	bl	8007406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 faf3 	bl	800742e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00c      	beq.n	8006e72 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d007      	beq.n	8006e72 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f06f 0201 	mvn.w	r2, #1
 8006e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7fa fcd5 	bl	800181c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d104      	bne.n	8006e86 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00c      	beq.n	8006ea0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d007      	beq.n	8006ea0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 f94c 	bl	8008138 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00c      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d007      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 f944 	bl	800814c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00c      	beq.n	8006ee8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d007      	beq.n	8006ee8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 faad 	bl	8007442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00c      	beq.n	8006f0c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f003 0320 	and.w	r3, r3, #32
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f06f 0220 	mvn.w	r2, #32
 8006f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 f90c 	bl	8008124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f0c:	bf00      	nop
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e088      	b.n	8007044 <HAL_TIM_IC_ConfigChannel+0x130>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d11b      	bne.n	8006f78 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006f50:	f000 fdfe 	bl	8007b50 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699a      	ldr	r2, [r3, #24]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 020c 	bic.w	r2, r2, #12
 8006f62:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6999      	ldr	r1, [r3, #24]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	689a      	ldr	r2, [r3, #8]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	619a      	str	r2, [r3, #24]
 8006f76:	e060      	b.n	800703a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d11c      	bne.n	8006fb8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006f8e:	f000 fe7c 	bl	8007c8a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	699a      	ldr	r2, [r3, #24]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006fa0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6999      	ldr	r1, [r3, #24]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	021a      	lsls	r2, r3, #8
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	619a      	str	r2, [r3, #24]
 8006fb6:	e040      	b.n	800703a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d11b      	bne.n	8006ff6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006fce:	f000 fec9 	bl	8007d64 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	69da      	ldr	r2, [r3, #28]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 020c 	bic.w	r2, r2, #12
 8006fe0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	69d9      	ldr	r1, [r3, #28]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	61da      	str	r2, [r3, #28]
 8006ff4:	e021      	b.n	800703a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b0c      	cmp	r3, #12
 8006ffa:	d11c      	bne.n	8007036 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800700c:	f000 fee6 	bl	8007ddc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	69da      	ldr	r2, [r3, #28]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800701e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69d9      	ldr	r1, [r3, #28]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	021a      	lsls	r2, r3, #8
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	61da      	str	r2, [r3, #28]
 8007034:	e001      	b.n	800703a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007042:	7dfb      	ldrb	r3, [r7, #23]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007062:	2b01      	cmp	r3, #1
 8007064:	d101      	bne.n	800706a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007066:	2302      	movs	r3, #2
 8007068:	e0ff      	b.n	800726a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b14      	cmp	r3, #20
 8007076:	f200 80f0 	bhi.w	800725a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800707a:	a201      	add	r2, pc, #4	@ (adr r2, 8007080 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800707c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007080:	080070d5 	.word	0x080070d5
 8007084:	0800725b 	.word	0x0800725b
 8007088:	0800725b 	.word	0x0800725b
 800708c:	0800725b 	.word	0x0800725b
 8007090:	08007115 	.word	0x08007115
 8007094:	0800725b 	.word	0x0800725b
 8007098:	0800725b 	.word	0x0800725b
 800709c:	0800725b 	.word	0x0800725b
 80070a0:	08007157 	.word	0x08007157
 80070a4:	0800725b 	.word	0x0800725b
 80070a8:	0800725b 	.word	0x0800725b
 80070ac:	0800725b 	.word	0x0800725b
 80070b0:	08007197 	.word	0x08007197
 80070b4:	0800725b 	.word	0x0800725b
 80070b8:	0800725b 	.word	0x0800725b
 80070bc:	0800725b 	.word	0x0800725b
 80070c0:	080071d9 	.word	0x080071d9
 80070c4:	0800725b 	.word	0x0800725b
 80070c8:	0800725b 	.word	0x0800725b
 80070cc:	0800725b 	.word	0x0800725b
 80070d0:	08007219 	.word	0x08007219
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68b9      	ldr	r1, [r7, #8]
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 fa62 	bl	80075a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0208 	orr.w	r2, r2, #8
 80070ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699a      	ldr	r2, [r3, #24]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0204 	bic.w	r2, r2, #4
 80070fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6999      	ldr	r1, [r3, #24]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	691a      	ldr	r2, [r3, #16]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	619a      	str	r2, [r3, #24]
      break;
 8007112:	e0a5      	b.n	8007260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68b9      	ldr	r1, [r7, #8]
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fad2 	bl	80076c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	699a      	ldr	r2, [r3, #24]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800712e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699a      	ldr	r2, [r3, #24]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800713e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6999      	ldr	r1, [r3, #24]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	021a      	lsls	r2, r3, #8
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	619a      	str	r2, [r3, #24]
      break;
 8007154:	e084      	b.n	8007260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68b9      	ldr	r1, [r7, #8]
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fb3b 	bl	80077d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69da      	ldr	r2, [r3, #28]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0208 	orr.w	r2, r2, #8
 8007170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0204 	bic.w	r2, r2, #4
 8007180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69d9      	ldr	r1, [r3, #28]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	61da      	str	r2, [r3, #28]
      break;
 8007194:	e064      	b.n	8007260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fba3 	bl	80078e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69da      	ldr	r2, [r3, #28]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69d9      	ldr	r1, [r3, #28]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	021a      	lsls	r2, r3, #8
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	61da      	str	r2, [r3, #28]
      break;
 80071d6:	e043      	b.n	8007260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68b9      	ldr	r1, [r7, #8]
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 fbec 	bl	80079bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0208 	orr.w	r2, r2, #8
 80071f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0204 	bic.w	r2, r2, #4
 8007202:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	691a      	ldr	r2, [r3, #16]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007216:	e023      	b.n	8007260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68b9      	ldr	r1, [r7, #8]
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fc30 	bl	8007a84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007232:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007242:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	021a      	lsls	r2, r3, #8
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	430a      	orrs	r2, r1
 8007256:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007258:	e002      	b.n	8007260 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	75fb      	strb	r3, [r7, #23]
      break;
 800725e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007268:	7dfb      	ldrb	r3, [r7, #23]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop

08007274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007288:	2b01      	cmp	r3, #1
 800728a:	d101      	bne.n	8007290 <HAL_TIM_ConfigClockSource+0x1c>
 800728c:	2302      	movs	r3, #2
 800728e:	e0b6      	b.n	80073fe <HAL_TIM_ConfigClockSource+0x18a>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80072b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072cc:	d03e      	beq.n	800734c <HAL_TIM_ConfigClockSource+0xd8>
 80072ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072d2:	f200 8087 	bhi.w	80073e4 <HAL_TIM_ConfigClockSource+0x170>
 80072d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072da:	f000 8086 	beq.w	80073ea <HAL_TIM_ConfigClockSource+0x176>
 80072de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072e2:	d87f      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x170>
 80072e4:	2b70      	cmp	r3, #112	@ 0x70
 80072e6:	d01a      	beq.n	800731e <HAL_TIM_ConfigClockSource+0xaa>
 80072e8:	2b70      	cmp	r3, #112	@ 0x70
 80072ea:	d87b      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x170>
 80072ec:	2b60      	cmp	r3, #96	@ 0x60
 80072ee:	d050      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x11e>
 80072f0:	2b60      	cmp	r3, #96	@ 0x60
 80072f2:	d877      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x170>
 80072f4:	2b50      	cmp	r3, #80	@ 0x50
 80072f6:	d03c      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0xfe>
 80072f8:	2b50      	cmp	r3, #80	@ 0x50
 80072fa:	d873      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x170>
 80072fc:	2b40      	cmp	r3, #64	@ 0x40
 80072fe:	d058      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x13e>
 8007300:	2b40      	cmp	r3, #64	@ 0x40
 8007302:	d86f      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x170>
 8007304:	2b30      	cmp	r3, #48	@ 0x30
 8007306:	d064      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x15e>
 8007308:	2b30      	cmp	r3, #48	@ 0x30
 800730a:	d86b      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x170>
 800730c:	2b20      	cmp	r3, #32
 800730e:	d060      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x15e>
 8007310:	2b20      	cmp	r3, #32
 8007312:	d867      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x170>
 8007314:	2b00      	cmp	r3, #0
 8007316:	d05c      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x15e>
 8007318:	2b10      	cmp	r3, #16
 800731a:	d05a      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x15e>
 800731c:	e062      	b.n	80073e4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800732e:	f000 fdad 	bl	8007e8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	609a      	str	r2, [r3, #8]
      break;
 800734a:	e04f      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800735c:	f000 fd96 	bl	8007e8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800736e:	609a      	str	r2, [r3, #8]
      break;
 8007370:	e03c      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800737e:	461a      	mov	r2, r3
 8007380:	f000 fc54 	bl	8007c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2150      	movs	r1, #80	@ 0x50
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fd63 	bl	8007e56 <TIM_ITRx_SetConfig>
      break;
 8007390:	e02c      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800739e:	461a      	mov	r2, r3
 80073a0:	f000 fcb0 	bl	8007d04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2160      	movs	r1, #96	@ 0x60
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fd53 	bl	8007e56 <TIM_ITRx_SetConfig>
      break;
 80073b0:	e01c      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073be:	461a      	mov	r2, r3
 80073c0:	f000 fc34 	bl	8007c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2140      	movs	r1, #64	@ 0x40
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fd43 	bl	8007e56 <TIM_ITRx_SetConfig>
      break;
 80073d0:	e00c      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f000 fd3a 	bl	8007e56 <TIM_ITRx_SetConfig>
      break;
 80073e2:	e003      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	73fb      	strb	r3, [r7, #15]
      break;
 80073e8:	e000      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x178>
      break;
 80073ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800740e:	bf00      	nop
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
	...

08007458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a46      	ldr	r2, [pc, #280]	@ (8007584 <TIM_Base_SetConfig+0x12c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d013      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007476:	d00f      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a43      	ldr	r2, [pc, #268]	@ (8007588 <TIM_Base_SetConfig+0x130>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00b      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a42      	ldr	r2, [pc, #264]	@ (800758c <TIM_Base_SetConfig+0x134>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d007      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a41      	ldr	r2, [pc, #260]	@ (8007590 <TIM_Base_SetConfig+0x138>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d003      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a40      	ldr	r2, [pc, #256]	@ (8007594 <TIM_Base_SetConfig+0x13c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d108      	bne.n	80074aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800749e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a35      	ldr	r2, [pc, #212]	@ (8007584 <TIM_Base_SetConfig+0x12c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d01f      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074b8:	d01b      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a32      	ldr	r2, [pc, #200]	@ (8007588 <TIM_Base_SetConfig+0x130>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d017      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a31      	ldr	r2, [pc, #196]	@ (800758c <TIM_Base_SetConfig+0x134>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d013      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a30      	ldr	r2, [pc, #192]	@ (8007590 <TIM_Base_SetConfig+0x138>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00f      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a2f      	ldr	r2, [pc, #188]	@ (8007594 <TIM_Base_SetConfig+0x13c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00b      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a2e      	ldr	r2, [pc, #184]	@ (8007598 <TIM_Base_SetConfig+0x140>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d007      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a2d      	ldr	r2, [pc, #180]	@ (800759c <TIM_Base_SetConfig+0x144>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d003      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a2c      	ldr	r2, [pc, #176]	@ (80075a0 <TIM_Base_SetConfig+0x148>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d108      	bne.n	8007504 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a16      	ldr	r2, [pc, #88]	@ (8007584 <TIM_Base_SetConfig+0x12c>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d00f      	beq.n	8007550 <TIM_Base_SetConfig+0xf8>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a18      	ldr	r2, [pc, #96]	@ (8007594 <TIM_Base_SetConfig+0x13c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00b      	beq.n	8007550 <TIM_Base_SetConfig+0xf8>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a17      	ldr	r2, [pc, #92]	@ (8007598 <TIM_Base_SetConfig+0x140>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d007      	beq.n	8007550 <TIM_Base_SetConfig+0xf8>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a16      	ldr	r2, [pc, #88]	@ (800759c <TIM_Base_SetConfig+0x144>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d003      	beq.n	8007550 <TIM_Base_SetConfig+0xf8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a15      	ldr	r2, [pc, #84]	@ (80075a0 <TIM_Base_SetConfig+0x148>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d103      	bne.n	8007558 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b01      	cmp	r3, #1
 8007568:	d105      	bne.n	8007576 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	f023 0201 	bic.w	r2, r3, #1
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	611a      	str	r2, [r3, #16]
  }
}
 8007576:	bf00      	nop
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	40012c00 	.word	0x40012c00
 8007588:	40000400 	.word	0x40000400
 800758c:	40000800 	.word	0x40000800
 8007590:	40000c00 	.word	0x40000c00
 8007594:	40013400 	.word	0x40013400
 8007598:	40014000 	.word	0x40014000
 800759c:	40014400 	.word	0x40014400
 80075a0:	40014800 	.word	0x40014800

080075a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	f023 0201 	bic.w	r2, r3, #1
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f023 0303 	bic.w	r3, r3, #3
 80075de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f023 0302 	bic.w	r3, r3, #2
 80075f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a2c      	ldr	r2, [pc, #176]	@ (80076b0 <TIM_OC1_SetConfig+0x10c>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d00f      	beq.n	8007624 <TIM_OC1_SetConfig+0x80>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a2b      	ldr	r2, [pc, #172]	@ (80076b4 <TIM_OC1_SetConfig+0x110>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d00b      	beq.n	8007624 <TIM_OC1_SetConfig+0x80>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a2a      	ldr	r2, [pc, #168]	@ (80076b8 <TIM_OC1_SetConfig+0x114>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d007      	beq.n	8007624 <TIM_OC1_SetConfig+0x80>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a29      	ldr	r2, [pc, #164]	@ (80076bc <TIM_OC1_SetConfig+0x118>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d003      	beq.n	8007624 <TIM_OC1_SetConfig+0x80>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a28      	ldr	r2, [pc, #160]	@ (80076c0 <TIM_OC1_SetConfig+0x11c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d10c      	bne.n	800763e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f023 0308 	bic.w	r3, r3, #8
 800762a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	4313      	orrs	r3, r2
 8007634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f023 0304 	bic.w	r3, r3, #4
 800763c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a1b      	ldr	r2, [pc, #108]	@ (80076b0 <TIM_OC1_SetConfig+0x10c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00f      	beq.n	8007666 <TIM_OC1_SetConfig+0xc2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a1a      	ldr	r2, [pc, #104]	@ (80076b4 <TIM_OC1_SetConfig+0x110>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d00b      	beq.n	8007666 <TIM_OC1_SetConfig+0xc2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a19      	ldr	r2, [pc, #100]	@ (80076b8 <TIM_OC1_SetConfig+0x114>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d007      	beq.n	8007666 <TIM_OC1_SetConfig+0xc2>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a18      	ldr	r2, [pc, #96]	@ (80076bc <TIM_OC1_SetConfig+0x118>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d003      	beq.n	8007666 <TIM_OC1_SetConfig+0xc2>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a17      	ldr	r2, [pc, #92]	@ (80076c0 <TIM_OC1_SetConfig+0x11c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d111      	bne.n	800768a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800766c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	4313      	orrs	r3, r2
 800767e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	4313      	orrs	r3, r2
 8007688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	621a      	str	r2, [r3, #32]
}
 80076a4:	bf00      	nop
 80076a6:	371c      	adds	r7, #28
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	40012c00 	.word	0x40012c00
 80076b4:	40013400 	.word	0x40013400
 80076b8:	40014000 	.word	0x40014000
 80076bc:	40014400 	.word	0x40014400
 80076c0:	40014800 	.word	0x40014800

080076c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	f023 0210 	bic.w	r2, r3, #16
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	021b      	lsls	r3, r3, #8
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	4313      	orrs	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f023 0320 	bic.w	r3, r3, #32
 8007712:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	4313      	orrs	r3, r2
 800771e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a28      	ldr	r2, [pc, #160]	@ (80077c4 <TIM_OC2_SetConfig+0x100>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d003      	beq.n	8007730 <TIM_OC2_SetConfig+0x6c>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a27      	ldr	r2, [pc, #156]	@ (80077c8 <TIM_OC2_SetConfig+0x104>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d10d      	bne.n	800774c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	011b      	lsls	r3, r3, #4
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	4313      	orrs	r3, r2
 8007742:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800774a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a1d      	ldr	r2, [pc, #116]	@ (80077c4 <TIM_OC2_SetConfig+0x100>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d00f      	beq.n	8007774 <TIM_OC2_SetConfig+0xb0>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a1c      	ldr	r2, [pc, #112]	@ (80077c8 <TIM_OC2_SetConfig+0x104>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d00b      	beq.n	8007774 <TIM_OC2_SetConfig+0xb0>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a1b      	ldr	r2, [pc, #108]	@ (80077cc <TIM_OC2_SetConfig+0x108>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d007      	beq.n	8007774 <TIM_OC2_SetConfig+0xb0>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a1a      	ldr	r2, [pc, #104]	@ (80077d0 <TIM_OC2_SetConfig+0x10c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d003      	beq.n	8007774 <TIM_OC2_SetConfig+0xb0>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a19      	ldr	r2, [pc, #100]	@ (80077d4 <TIM_OC2_SetConfig+0x110>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d113      	bne.n	800779c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800777a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007782:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	4313      	orrs	r3, r2
 800778e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	4313      	orrs	r3, r2
 800779a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	621a      	str	r2, [r3, #32]
}
 80077b6:	bf00      	nop
 80077b8:	371c      	adds	r7, #28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	40012c00 	.word	0x40012c00
 80077c8:	40013400 	.word	0x40013400
 80077cc:	40014000 	.word	0x40014000
 80077d0:	40014400 	.word	0x40014400
 80077d4:	40014800 	.word	0x40014800

080077d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800780a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 0303 	bic.w	r3, r3, #3
 8007812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	021b      	lsls	r3, r3, #8
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a27      	ldr	r2, [pc, #156]	@ (80078d4 <TIM_OC3_SetConfig+0xfc>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d003      	beq.n	8007842 <TIM_OC3_SetConfig+0x6a>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a26      	ldr	r2, [pc, #152]	@ (80078d8 <TIM_OC3_SetConfig+0x100>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d10d      	bne.n	800785e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	021b      	lsls	r3, r3, #8
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	4313      	orrs	r3, r2
 8007854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800785c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a1c      	ldr	r2, [pc, #112]	@ (80078d4 <TIM_OC3_SetConfig+0xfc>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d00f      	beq.n	8007886 <TIM_OC3_SetConfig+0xae>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a1b      	ldr	r2, [pc, #108]	@ (80078d8 <TIM_OC3_SetConfig+0x100>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00b      	beq.n	8007886 <TIM_OC3_SetConfig+0xae>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a1a      	ldr	r2, [pc, #104]	@ (80078dc <TIM_OC3_SetConfig+0x104>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d007      	beq.n	8007886 <TIM_OC3_SetConfig+0xae>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a19      	ldr	r2, [pc, #100]	@ (80078e0 <TIM_OC3_SetConfig+0x108>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d003      	beq.n	8007886 <TIM_OC3_SetConfig+0xae>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a18      	ldr	r2, [pc, #96]	@ (80078e4 <TIM_OC3_SetConfig+0x10c>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d113      	bne.n	80078ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800788c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	011b      	lsls	r3, r3, #4
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	4313      	orrs	r3, r2
 80078a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	011b      	lsls	r3, r3, #4
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	621a      	str	r2, [r3, #32]
}
 80078c8:	bf00      	nop
 80078ca:	371c      	adds	r7, #28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	40012c00 	.word	0x40012c00
 80078d8:	40013400 	.word	0x40013400
 80078dc:	40014000 	.word	0x40014000
 80078e0:	40014400 	.word	0x40014400
 80078e4:	40014800 	.word	0x40014800

080078e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800791a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	021b      	lsls	r3, r3, #8
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	4313      	orrs	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	031b      	lsls	r3, r3, #12
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	4313      	orrs	r3, r2
 8007942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a18      	ldr	r2, [pc, #96]	@ (80079a8 <TIM_OC4_SetConfig+0xc0>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d00f      	beq.n	800796c <TIM_OC4_SetConfig+0x84>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a17      	ldr	r2, [pc, #92]	@ (80079ac <TIM_OC4_SetConfig+0xc4>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d00b      	beq.n	800796c <TIM_OC4_SetConfig+0x84>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a16      	ldr	r2, [pc, #88]	@ (80079b0 <TIM_OC4_SetConfig+0xc8>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d007      	beq.n	800796c <TIM_OC4_SetConfig+0x84>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a15      	ldr	r2, [pc, #84]	@ (80079b4 <TIM_OC4_SetConfig+0xcc>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d003      	beq.n	800796c <TIM_OC4_SetConfig+0x84>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a14      	ldr	r2, [pc, #80]	@ (80079b8 <TIM_OC4_SetConfig+0xd0>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d109      	bne.n	8007980 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007972:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	019b      	lsls	r3, r3, #6
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	4313      	orrs	r3, r2
 800797e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	621a      	str	r2, [r3, #32]
}
 800799a:	bf00      	nop
 800799c:	371c      	adds	r7, #28
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	40012c00 	.word	0x40012c00
 80079ac:	40013400 	.word	0x40013400
 80079b0:	40014000 	.word	0x40014000
 80079b4:	40014400 	.word	0x40014400
 80079b8:	40014800 	.word	0x40014800

080079bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007a00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	041b      	lsls	r3, r3, #16
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a17      	ldr	r2, [pc, #92]	@ (8007a70 <TIM_OC5_SetConfig+0xb4>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00f      	beq.n	8007a36 <TIM_OC5_SetConfig+0x7a>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a16      	ldr	r2, [pc, #88]	@ (8007a74 <TIM_OC5_SetConfig+0xb8>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d00b      	beq.n	8007a36 <TIM_OC5_SetConfig+0x7a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a15      	ldr	r2, [pc, #84]	@ (8007a78 <TIM_OC5_SetConfig+0xbc>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d007      	beq.n	8007a36 <TIM_OC5_SetConfig+0x7a>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a14      	ldr	r2, [pc, #80]	@ (8007a7c <TIM_OC5_SetConfig+0xc0>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d003      	beq.n	8007a36 <TIM_OC5_SetConfig+0x7a>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a13      	ldr	r2, [pc, #76]	@ (8007a80 <TIM_OC5_SetConfig+0xc4>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d109      	bne.n	8007a4a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	021b      	lsls	r3, r3, #8
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	621a      	str	r2, [r3, #32]
}
 8007a64:	bf00      	nop
 8007a66:	371c      	adds	r7, #28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	40012c00 	.word	0x40012c00
 8007a74:	40013400 	.word	0x40013400
 8007a78:	40014000 	.word	0x40014000
 8007a7c:	40014400 	.word	0x40014400
 8007a80:	40014800 	.word	0x40014800

08007a84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a1b      	ldr	r3, [r3, #32]
 8007a98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	021b      	lsls	r3, r3, #8
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	051b      	lsls	r3, r3, #20
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a18      	ldr	r2, [pc, #96]	@ (8007b3c <TIM_OC6_SetConfig+0xb8>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d00f      	beq.n	8007b00 <TIM_OC6_SetConfig+0x7c>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a17      	ldr	r2, [pc, #92]	@ (8007b40 <TIM_OC6_SetConfig+0xbc>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d00b      	beq.n	8007b00 <TIM_OC6_SetConfig+0x7c>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a16      	ldr	r2, [pc, #88]	@ (8007b44 <TIM_OC6_SetConfig+0xc0>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d007      	beq.n	8007b00 <TIM_OC6_SetConfig+0x7c>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a15      	ldr	r2, [pc, #84]	@ (8007b48 <TIM_OC6_SetConfig+0xc4>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d003      	beq.n	8007b00 <TIM_OC6_SetConfig+0x7c>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a14      	ldr	r2, [pc, #80]	@ (8007b4c <TIM_OC6_SetConfig+0xc8>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d109      	bne.n	8007b14 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	029b      	lsls	r3, r3, #10
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	621a      	str	r2, [r3, #32]
}
 8007b2e:	bf00      	nop
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	40012c00 	.word	0x40012c00
 8007b40:	40013400 	.word	0x40013400
 8007b44:	40014000 	.word	0x40014000
 8007b48:	40014400 	.word	0x40014400
 8007b4c:	40014800 	.word	0x40014800

08007b50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	f023 0201 	bic.w	r2, r3, #1
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	4a26      	ldr	r2, [pc, #152]	@ (8007c14 <TIM_TI1_SetConfig+0xc4>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d017      	beq.n	8007bae <TIM_TI1_SetConfig+0x5e>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b84:	d013      	beq.n	8007bae <TIM_TI1_SetConfig+0x5e>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4a23      	ldr	r2, [pc, #140]	@ (8007c18 <TIM_TI1_SetConfig+0xc8>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d00f      	beq.n	8007bae <TIM_TI1_SetConfig+0x5e>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	4a22      	ldr	r2, [pc, #136]	@ (8007c1c <TIM_TI1_SetConfig+0xcc>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00b      	beq.n	8007bae <TIM_TI1_SetConfig+0x5e>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4a21      	ldr	r2, [pc, #132]	@ (8007c20 <TIM_TI1_SetConfig+0xd0>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d007      	beq.n	8007bae <TIM_TI1_SetConfig+0x5e>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4a20      	ldr	r2, [pc, #128]	@ (8007c24 <TIM_TI1_SetConfig+0xd4>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d003      	beq.n	8007bae <TIM_TI1_SetConfig+0x5e>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8007c28 <TIM_TI1_SetConfig+0xd8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d101      	bne.n	8007bb2 <TIM_TI1_SetConfig+0x62>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <TIM_TI1_SetConfig+0x64>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d008      	beq.n	8007bca <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f023 0303 	bic.w	r3, r3, #3
 8007bbe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	e003      	b.n	8007bd2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f043 0301 	orr.w	r3, r3, #1
 8007bd0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	011b      	lsls	r3, r3, #4
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f023 030a 	bic.w	r3, r3, #10
 8007bec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	f003 030a 	and.w	r3, r3, #10
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	621a      	str	r2, [r3, #32]
}
 8007c06:	bf00      	nop
 8007c08:	371c      	adds	r7, #28
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	40012c00 	.word	0x40012c00
 8007c18:	40000400 	.word	0x40000400
 8007c1c:	40000800 	.word	0x40000800
 8007c20:	40000c00 	.word	0x40000c00
 8007c24:	40013400 	.word	0x40013400
 8007c28:	40014000 	.word	0x40014000

08007c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a1b      	ldr	r3, [r3, #32]
 8007c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	f023 0201 	bic.w	r2, r3, #1
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f023 030a 	bic.w	r3, r3, #10
 8007c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	621a      	str	r2, [r3, #32]
}
 8007c7e:	bf00      	nop
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b087      	sub	sp, #28
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	60f8      	str	r0, [r7, #12]
 8007c92:	60b9      	str	r1, [r7, #8]
 8007c94:	607a      	str	r2, [r7, #4]
 8007c96:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	f023 0210 	bic.w	r2, r3, #16
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	021b      	lsls	r3, r3, #8
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	031b      	lsls	r3, r3, #12
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	621a      	str	r2, [r3, #32]
}
 8007cf8:	bf00      	nop
 8007cfa:	371c      	adds	r7, #28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6a1b      	ldr	r3, [r3, #32]
 8007d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	f023 0210 	bic.w	r2, r3, #16
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	031b      	lsls	r3, r3, #12
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	011b      	lsls	r3, r3, #4
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	621a      	str	r2, [r3, #32]
}
 8007d58:	bf00      	nop
 8007d5a:	371c      	adds	r7, #28
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6a1b      	ldr	r3, [r3, #32]
 8007d7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f023 0303 	bic.w	r3, r3, #3
 8007d90:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007da0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007db4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	021b      	lsls	r3, r3, #8
 8007dba:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	621a      	str	r2, [r3, #32]
}
 8007dd0:	bf00      	nop
 8007dd2:	371c      	adds	r7, #28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e08:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e1a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	031b      	lsls	r3, r3, #12
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007e2e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	031b      	lsls	r3, r3, #12
 8007e34:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	621a      	str	r2, [r3, #32]
}
 8007e4a:	bf00      	nop
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b085      	sub	sp, #20
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f043 0307 	orr.w	r3, r3, #7
 8007e78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	609a      	str	r2, [r3, #8]
}
 8007e80:	bf00      	nop
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	021a      	lsls	r2, r3, #8
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	609a      	str	r2, [r3, #8]
}
 8007ec0:	bf00      	nop
 8007ec2:	371c      	adds	r7, #28
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f003 031f 	and.w	r3, r3, #31
 8007ede:	2201      	movs	r2, #1
 8007ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a1a      	ldr	r2, [r3, #32]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	43db      	mvns	r3, r3
 8007eee:	401a      	ands	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6a1a      	ldr	r2, [r3, #32]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f003 031f 	and.w	r3, r3, #31
 8007efe:	6879      	ldr	r1, [r7, #4]
 8007f00:	fa01 f303 	lsl.w	r3, r1, r3
 8007f04:	431a      	orrs	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	621a      	str	r2, [r3, #32]
}
 8007f0a:	bf00      	nop
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
	...

08007f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d101      	bne.n	8007f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e068      	b.n	8008002 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a2e      	ldr	r2, [pc, #184]	@ (8008010 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d004      	beq.n	8007f64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8008014 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d108      	bne.n	8007f76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007f6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a1e      	ldr	r2, [pc, #120]	@ (8008010 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d01d      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fa2:	d018      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8008018 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d013      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800801c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d00e      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a18      	ldr	r2, [pc, #96]	@ (8008020 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d009      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a13      	ldr	r2, [pc, #76]	@ (8008014 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d004      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a14      	ldr	r2, [pc, #80]	@ (8008024 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d10c      	bne.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	40012c00 	.word	0x40012c00
 8008014:	40013400 	.word	0x40013400
 8008018:	40000400 	.word	0x40000400
 800801c:	40000800 	.word	0x40000800
 8008020:	40000c00 	.word	0x40000c00
 8008024:	40014000 	.word	0x40014000

08008028 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800803c:	2b01      	cmp	r3, #1
 800803e:	d101      	bne.n	8008044 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008040:	2302      	movs	r3, #2
 8008042:	e065      	b.n	8008110 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	4313      	orrs	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	4313      	orrs	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4313      	orrs	r3, r2
 8008082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	4313      	orrs	r3, r2
 8008090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	4313      	orrs	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080aa:	4313      	orrs	r3, r2
 80080ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	041b      	lsls	r3, r3, #16
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a16      	ldr	r2, [pc, #88]	@ (800811c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d004      	beq.n	80080d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a14      	ldr	r2, [pc, #80]	@ (8008120 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d115      	bne.n	80080fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080dc:	051b      	lsls	r3, r3, #20
 80080de:	4313      	orrs	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	69db      	ldr	r3, [r3, #28]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	40012c00 	.word	0x40012c00
 8008120:	40013400 	.word	0x40013400

08008124 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e040      	b.n	80081f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7f9 fefe 	bl	8001f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2224      	movs	r2, #36	@ 0x24
 800818c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 0201 	bic.w	r2, r2, #1
 800819c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fae0 	bl	800876c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f825 	bl	80081fc <UART_SetConfig>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d101      	bne.n	80081bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e01b      	b.n	80081f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80081ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689a      	ldr	r2, [r3, #8]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80081da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0201 	orr.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fb5f 	bl	80088b0 <UART_CheckIdleState>
 80081f2:	4603      	mov	r3, r0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008200:	b08a      	sub	sp, #40	@ 0x28
 8008202:	af00      	add	r7, sp, #0
 8008204:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	431a      	orrs	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	431a      	orrs	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	4313      	orrs	r3, r2
 8008222:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	4ba4      	ldr	r3, [pc, #656]	@ (80084bc <UART_SetConfig+0x2c0>)
 800822c:	4013      	ands	r3, r2
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	6812      	ldr	r2, [r2, #0]
 8008232:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008234:	430b      	orrs	r3, r1
 8008236:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	430a      	orrs	r2, r1
 800824c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a99      	ldr	r2, [pc, #612]	@ (80084c0 <UART_SetConfig+0x2c4>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d004      	beq.n	8008268 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008264:	4313      	orrs	r3, r2
 8008266:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008278:	430a      	orrs	r2, r1
 800827a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a90      	ldr	r2, [pc, #576]	@ (80084c4 <UART_SetConfig+0x2c8>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d126      	bne.n	80082d4 <UART_SetConfig+0xd8>
 8008286:	4b90      	ldr	r3, [pc, #576]	@ (80084c8 <UART_SetConfig+0x2cc>)
 8008288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800828c:	f003 0303 	and.w	r3, r3, #3
 8008290:	2b03      	cmp	r3, #3
 8008292:	d81b      	bhi.n	80082cc <UART_SetConfig+0xd0>
 8008294:	a201      	add	r2, pc, #4	@ (adr r2, 800829c <UART_SetConfig+0xa0>)
 8008296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829a:	bf00      	nop
 800829c:	080082ad 	.word	0x080082ad
 80082a0:	080082bd 	.word	0x080082bd
 80082a4:	080082b5 	.word	0x080082b5
 80082a8:	080082c5 	.word	0x080082c5
 80082ac:	2301      	movs	r3, #1
 80082ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082b2:	e116      	b.n	80084e2 <UART_SetConfig+0x2e6>
 80082b4:	2302      	movs	r3, #2
 80082b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082ba:	e112      	b.n	80084e2 <UART_SetConfig+0x2e6>
 80082bc:	2304      	movs	r3, #4
 80082be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082c2:	e10e      	b.n	80084e2 <UART_SetConfig+0x2e6>
 80082c4:	2308      	movs	r3, #8
 80082c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082ca:	e10a      	b.n	80084e2 <UART_SetConfig+0x2e6>
 80082cc:	2310      	movs	r3, #16
 80082ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082d2:	e106      	b.n	80084e2 <UART_SetConfig+0x2e6>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a7c      	ldr	r2, [pc, #496]	@ (80084cc <UART_SetConfig+0x2d0>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d138      	bne.n	8008350 <UART_SetConfig+0x154>
 80082de:	4b7a      	ldr	r3, [pc, #488]	@ (80084c8 <UART_SetConfig+0x2cc>)
 80082e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082e4:	f003 030c 	and.w	r3, r3, #12
 80082e8:	2b0c      	cmp	r3, #12
 80082ea:	d82d      	bhi.n	8008348 <UART_SetConfig+0x14c>
 80082ec:	a201      	add	r2, pc, #4	@ (adr r2, 80082f4 <UART_SetConfig+0xf8>)
 80082ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f2:	bf00      	nop
 80082f4:	08008329 	.word	0x08008329
 80082f8:	08008349 	.word	0x08008349
 80082fc:	08008349 	.word	0x08008349
 8008300:	08008349 	.word	0x08008349
 8008304:	08008339 	.word	0x08008339
 8008308:	08008349 	.word	0x08008349
 800830c:	08008349 	.word	0x08008349
 8008310:	08008349 	.word	0x08008349
 8008314:	08008331 	.word	0x08008331
 8008318:	08008349 	.word	0x08008349
 800831c:	08008349 	.word	0x08008349
 8008320:	08008349 	.word	0x08008349
 8008324:	08008341 	.word	0x08008341
 8008328:	2300      	movs	r3, #0
 800832a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800832e:	e0d8      	b.n	80084e2 <UART_SetConfig+0x2e6>
 8008330:	2302      	movs	r3, #2
 8008332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008336:	e0d4      	b.n	80084e2 <UART_SetConfig+0x2e6>
 8008338:	2304      	movs	r3, #4
 800833a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800833e:	e0d0      	b.n	80084e2 <UART_SetConfig+0x2e6>
 8008340:	2308      	movs	r3, #8
 8008342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008346:	e0cc      	b.n	80084e2 <UART_SetConfig+0x2e6>
 8008348:	2310      	movs	r3, #16
 800834a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800834e:	e0c8      	b.n	80084e2 <UART_SetConfig+0x2e6>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a5e      	ldr	r2, [pc, #376]	@ (80084d0 <UART_SetConfig+0x2d4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d125      	bne.n	80083a6 <UART_SetConfig+0x1aa>
 800835a:	4b5b      	ldr	r3, [pc, #364]	@ (80084c8 <UART_SetConfig+0x2cc>)
 800835c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008360:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008364:	2b30      	cmp	r3, #48	@ 0x30
 8008366:	d016      	beq.n	8008396 <UART_SetConfig+0x19a>
 8008368:	2b30      	cmp	r3, #48	@ 0x30
 800836a:	d818      	bhi.n	800839e <UART_SetConfig+0x1a2>
 800836c:	2b20      	cmp	r3, #32
 800836e:	d00a      	beq.n	8008386 <UART_SetConfig+0x18a>
 8008370:	2b20      	cmp	r3, #32
 8008372:	d814      	bhi.n	800839e <UART_SetConfig+0x1a2>
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <UART_SetConfig+0x182>
 8008378:	2b10      	cmp	r3, #16
 800837a:	d008      	beq.n	800838e <UART_SetConfig+0x192>
 800837c:	e00f      	b.n	800839e <UART_SetConfig+0x1a2>
 800837e:	2300      	movs	r3, #0
 8008380:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008384:	e0ad      	b.n	80084e2 <UART_SetConfig+0x2e6>
 8008386:	2302      	movs	r3, #2
 8008388:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800838c:	e0a9      	b.n	80084e2 <UART_SetConfig+0x2e6>
 800838e:	2304      	movs	r3, #4
 8008390:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008394:	e0a5      	b.n	80084e2 <UART_SetConfig+0x2e6>
 8008396:	2308      	movs	r3, #8
 8008398:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800839c:	e0a1      	b.n	80084e2 <UART_SetConfig+0x2e6>
 800839e:	2310      	movs	r3, #16
 80083a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083a4:	e09d      	b.n	80084e2 <UART_SetConfig+0x2e6>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a4a      	ldr	r2, [pc, #296]	@ (80084d4 <UART_SetConfig+0x2d8>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d125      	bne.n	80083fc <UART_SetConfig+0x200>
 80083b0:	4b45      	ldr	r3, [pc, #276]	@ (80084c8 <UART_SetConfig+0x2cc>)
 80083b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80083ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80083bc:	d016      	beq.n	80083ec <UART_SetConfig+0x1f0>
 80083be:	2bc0      	cmp	r3, #192	@ 0xc0
 80083c0:	d818      	bhi.n	80083f4 <UART_SetConfig+0x1f8>
 80083c2:	2b80      	cmp	r3, #128	@ 0x80
 80083c4:	d00a      	beq.n	80083dc <UART_SetConfig+0x1e0>
 80083c6:	2b80      	cmp	r3, #128	@ 0x80
 80083c8:	d814      	bhi.n	80083f4 <UART_SetConfig+0x1f8>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d002      	beq.n	80083d4 <UART_SetConfig+0x1d8>
 80083ce:	2b40      	cmp	r3, #64	@ 0x40
 80083d0:	d008      	beq.n	80083e4 <UART_SetConfig+0x1e8>
 80083d2:	e00f      	b.n	80083f4 <UART_SetConfig+0x1f8>
 80083d4:	2300      	movs	r3, #0
 80083d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083da:	e082      	b.n	80084e2 <UART_SetConfig+0x2e6>
 80083dc:	2302      	movs	r3, #2
 80083de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083e2:	e07e      	b.n	80084e2 <UART_SetConfig+0x2e6>
 80083e4:	2304      	movs	r3, #4
 80083e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083ea:	e07a      	b.n	80084e2 <UART_SetConfig+0x2e6>
 80083ec:	2308      	movs	r3, #8
 80083ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083f2:	e076      	b.n	80084e2 <UART_SetConfig+0x2e6>
 80083f4:	2310      	movs	r3, #16
 80083f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80083fa:	e072      	b.n	80084e2 <UART_SetConfig+0x2e6>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a35      	ldr	r2, [pc, #212]	@ (80084d8 <UART_SetConfig+0x2dc>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d12a      	bne.n	800845c <UART_SetConfig+0x260>
 8008406:	4b30      	ldr	r3, [pc, #192]	@ (80084c8 <UART_SetConfig+0x2cc>)
 8008408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800840c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008410:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008414:	d01a      	beq.n	800844c <UART_SetConfig+0x250>
 8008416:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800841a:	d81b      	bhi.n	8008454 <UART_SetConfig+0x258>
 800841c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008420:	d00c      	beq.n	800843c <UART_SetConfig+0x240>
 8008422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008426:	d815      	bhi.n	8008454 <UART_SetConfig+0x258>
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <UART_SetConfig+0x238>
 800842c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008430:	d008      	beq.n	8008444 <UART_SetConfig+0x248>
 8008432:	e00f      	b.n	8008454 <UART_SetConfig+0x258>
 8008434:	2300      	movs	r3, #0
 8008436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800843a:	e052      	b.n	80084e2 <UART_SetConfig+0x2e6>
 800843c:	2302      	movs	r3, #2
 800843e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008442:	e04e      	b.n	80084e2 <UART_SetConfig+0x2e6>
 8008444:	2304      	movs	r3, #4
 8008446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800844a:	e04a      	b.n	80084e2 <UART_SetConfig+0x2e6>
 800844c:	2308      	movs	r3, #8
 800844e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008452:	e046      	b.n	80084e2 <UART_SetConfig+0x2e6>
 8008454:	2310      	movs	r3, #16
 8008456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800845a:	e042      	b.n	80084e2 <UART_SetConfig+0x2e6>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a17      	ldr	r2, [pc, #92]	@ (80084c0 <UART_SetConfig+0x2c4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d13a      	bne.n	80084dc <UART_SetConfig+0x2e0>
 8008466:	4b18      	ldr	r3, [pc, #96]	@ (80084c8 <UART_SetConfig+0x2cc>)
 8008468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800846c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008470:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008474:	d01a      	beq.n	80084ac <UART_SetConfig+0x2b0>
 8008476:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800847a:	d81b      	bhi.n	80084b4 <UART_SetConfig+0x2b8>
 800847c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008480:	d00c      	beq.n	800849c <UART_SetConfig+0x2a0>
 8008482:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008486:	d815      	bhi.n	80084b4 <UART_SetConfig+0x2b8>
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <UART_SetConfig+0x298>
 800848c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008490:	d008      	beq.n	80084a4 <UART_SetConfig+0x2a8>
 8008492:	e00f      	b.n	80084b4 <UART_SetConfig+0x2b8>
 8008494:	2300      	movs	r3, #0
 8008496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800849a:	e022      	b.n	80084e2 <UART_SetConfig+0x2e6>
 800849c:	2302      	movs	r3, #2
 800849e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084a2:	e01e      	b.n	80084e2 <UART_SetConfig+0x2e6>
 80084a4:	2304      	movs	r3, #4
 80084a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084aa:	e01a      	b.n	80084e2 <UART_SetConfig+0x2e6>
 80084ac:	2308      	movs	r3, #8
 80084ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084b2:	e016      	b.n	80084e2 <UART_SetConfig+0x2e6>
 80084b4:	2310      	movs	r3, #16
 80084b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084ba:	e012      	b.n	80084e2 <UART_SetConfig+0x2e6>
 80084bc:	efff69f3 	.word	0xefff69f3
 80084c0:	40008000 	.word	0x40008000
 80084c4:	40013800 	.word	0x40013800
 80084c8:	40021000 	.word	0x40021000
 80084cc:	40004400 	.word	0x40004400
 80084d0:	40004800 	.word	0x40004800
 80084d4:	40004c00 	.word	0x40004c00
 80084d8:	40005000 	.word	0x40005000
 80084dc:	2310      	movs	r3, #16
 80084de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a9f      	ldr	r2, [pc, #636]	@ (8008764 <UART_SetConfig+0x568>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d17a      	bne.n	80085e2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80084f0:	2b08      	cmp	r3, #8
 80084f2:	d824      	bhi.n	800853e <UART_SetConfig+0x342>
 80084f4:	a201      	add	r2, pc, #4	@ (adr r2, 80084fc <UART_SetConfig+0x300>)
 80084f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fa:	bf00      	nop
 80084fc:	08008521 	.word	0x08008521
 8008500:	0800853f 	.word	0x0800853f
 8008504:	08008529 	.word	0x08008529
 8008508:	0800853f 	.word	0x0800853f
 800850c:	0800852f 	.word	0x0800852f
 8008510:	0800853f 	.word	0x0800853f
 8008514:	0800853f 	.word	0x0800853f
 8008518:	0800853f 	.word	0x0800853f
 800851c:	08008537 	.word	0x08008537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008520:	f7fd fa48 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 8008524:	61f8      	str	r0, [r7, #28]
        break;
 8008526:	e010      	b.n	800854a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008528:	4b8f      	ldr	r3, [pc, #572]	@ (8008768 <UART_SetConfig+0x56c>)
 800852a:	61fb      	str	r3, [r7, #28]
        break;
 800852c:	e00d      	b.n	800854a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800852e:	f7fd f9a9 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 8008532:	61f8      	str	r0, [r7, #28]
        break;
 8008534:	e009      	b.n	800854a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800853a:	61fb      	str	r3, [r7, #28]
        break;
 800853c:	e005      	b.n	800854a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008548:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 80fb 	beq.w	8008748 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	4613      	mov	r3, r2
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	4413      	add	r3, r2
 800855c:	69fa      	ldr	r2, [r7, #28]
 800855e:	429a      	cmp	r2, r3
 8008560:	d305      	bcc.n	800856e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008568:	69fa      	ldr	r2, [r7, #28]
 800856a:	429a      	cmp	r2, r3
 800856c:	d903      	bls.n	8008576 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008574:	e0e8      	b.n	8008748 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	2200      	movs	r2, #0
 800857a:	461c      	mov	r4, r3
 800857c:	4615      	mov	r5, r2
 800857e:	f04f 0200 	mov.w	r2, #0
 8008582:	f04f 0300 	mov.w	r3, #0
 8008586:	022b      	lsls	r3, r5, #8
 8008588:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800858c:	0222      	lsls	r2, r4, #8
 800858e:	68f9      	ldr	r1, [r7, #12]
 8008590:	6849      	ldr	r1, [r1, #4]
 8008592:	0849      	lsrs	r1, r1, #1
 8008594:	2000      	movs	r0, #0
 8008596:	4688      	mov	r8, r1
 8008598:	4681      	mov	r9, r0
 800859a:	eb12 0a08 	adds.w	sl, r2, r8
 800859e:	eb43 0b09 	adc.w	fp, r3, r9
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	603b      	str	r3, [r7, #0]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085b0:	4650      	mov	r0, sl
 80085b2:	4659      	mov	r1, fp
 80085b4:	f7f7 fe1a 	bl	80001ec <__aeabi_uldivmod>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	4613      	mov	r3, r2
 80085be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085c6:	d308      	bcc.n	80085da <UART_SetConfig+0x3de>
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085ce:	d204      	bcs.n	80085da <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	60da      	str	r2, [r3, #12]
 80085d8:	e0b6      	b.n	8008748 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80085e0:	e0b2      	b.n	8008748 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085ea:	d15e      	bne.n	80086aa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80085ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d828      	bhi.n	8008646 <UART_SetConfig+0x44a>
 80085f4:	a201      	add	r2, pc, #4	@ (adr r2, 80085fc <UART_SetConfig+0x400>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	08008621 	.word	0x08008621
 8008600:	08008629 	.word	0x08008629
 8008604:	08008631 	.word	0x08008631
 8008608:	08008647 	.word	0x08008647
 800860c:	08008637 	.word	0x08008637
 8008610:	08008647 	.word	0x08008647
 8008614:	08008647 	.word	0x08008647
 8008618:	08008647 	.word	0x08008647
 800861c:	0800863f 	.word	0x0800863f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008620:	f7fd f9c8 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 8008624:	61f8      	str	r0, [r7, #28]
        break;
 8008626:	e014      	b.n	8008652 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008628:	f7fd f9da 	bl	80059e0 <HAL_RCC_GetPCLK2Freq>
 800862c:	61f8      	str	r0, [r7, #28]
        break;
 800862e:	e010      	b.n	8008652 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008630:	4b4d      	ldr	r3, [pc, #308]	@ (8008768 <UART_SetConfig+0x56c>)
 8008632:	61fb      	str	r3, [r7, #28]
        break;
 8008634:	e00d      	b.n	8008652 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008636:	f7fd f925 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 800863a:	61f8      	str	r0, [r7, #28]
        break;
 800863c:	e009      	b.n	8008652 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800863e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008642:	61fb      	str	r3, [r7, #28]
        break;
 8008644:	e005      	b.n	8008652 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008650:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d077      	beq.n	8008748 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	005a      	lsls	r2, r3, #1
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	085b      	lsrs	r3, r3, #1
 8008662:	441a      	add	r2, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	fbb2 f3f3 	udiv	r3, r2, r3
 800866c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	2b0f      	cmp	r3, #15
 8008672:	d916      	bls.n	80086a2 <UART_SetConfig+0x4a6>
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800867a:	d212      	bcs.n	80086a2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	b29b      	uxth	r3, r3
 8008680:	f023 030f 	bic.w	r3, r3, #15
 8008684:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	085b      	lsrs	r3, r3, #1
 800868a:	b29b      	uxth	r3, r3
 800868c:	f003 0307 	and.w	r3, r3, #7
 8008690:	b29a      	uxth	r2, r3
 8008692:	8afb      	ldrh	r3, [r7, #22]
 8008694:	4313      	orrs	r3, r2
 8008696:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	8afa      	ldrh	r2, [r7, #22]
 800869e:	60da      	str	r2, [r3, #12]
 80086a0:	e052      	b.n	8008748 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80086a8:	e04e      	b.n	8008748 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80086ae:	2b08      	cmp	r3, #8
 80086b0:	d827      	bhi.n	8008702 <UART_SetConfig+0x506>
 80086b2:	a201      	add	r2, pc, #4	@ (adr r2, 80086b8 <UART_SetConfig+0x4bc>)
 80086b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b8:	080086dd 	.word	0x080086dd
 80086bc:	080086e5 	.word	0x080086e5
 80086c0:	080086ed 	.word	0x080086ed
 80086c4:	08008703 	.word	0x08008703
 80086c8:	080086f3 	.word	0x080086f3
 80086cc:	08008703 	.word	0x08008703
 80086d0:	08008703 	.word	0x08008703
 80086d4:	08008703 	.word	0x08008703
 80086d8:	080086fb 	.word	0x080086fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086dc:	f7fd f96a 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 80086e0:	61f8      	str	r0, [r7, #28]
        break;
 80086e2:	e014      	b.n	800870e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086e4:	f7fd f97c 	bl	80059e0 <HAL_RCC_GetPCLK2Freq>
 80086e8:	61f8      	str	r0, [r7, #28]
        break;
 80086ea:	e010      	b.n	800870e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086ec:	4b1e      	ldr	r3, [pc, #120]	@ (8008768 <UART_SetConfig+0x56c>)
 80086ee:	61fb      	str	r3, [r7, #28]
        break;
 80086f0:	e00d      	b.n	800870e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086f2:	f7fd f8c7 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 80086f6:	61f8      	str	r0, [r7, #28]
        break;
 80086f8:	e009      	b.n	800870e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086fe:	61fb      	str	r3, [r7, #28]
        break;
 8008700:	e005      	b.n	800870e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008702:	2300      	movs	r3, #0
 8008704:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800870c:	bf00      	nop
    }

    if (pclk != 0U)
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d019      	beq.n	8008748 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	085a      	lsrs	r2, r3, #1
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	441a      	add	r2, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	fbb2 f3f3 	udiv	r3, r2, r3
 8008726:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	2b0f      	cmp	r3, #15
 800872c:	d909      	bls.n	8008742 <UART_SetConfig+0x546>
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008734:	d205      	bcs.n	8008742 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	b29a      	uxth	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	60da      	str	r2, [r3, #12]
 8008740:	e002      	b.n	8008748 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008754:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008758:	4618      	mov	r0, r3
 800875a:	3728      	adds	r7, #40	@ 0x28
 800875c:	46bd      	mov	sp, r7
 800875e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008762:	bf00      	nop
 8008764:	40008000 	.word	0x40008000
 8008768:	00f42400 	.word	0x00f42400

0800876c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008778:	f003 0308 	and.w	r3, r3, #8
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00a      	beq.n	8008796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	430a      	orrs	r2, r1
 80087b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087bc:	f003 0302 	and.w	r3, r3, #2
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00a      	beq.n	80087da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	430a      	orrs	r2, r1
 80087d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087de:	f003 0304 	and.w	r3, r3, #4
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00a      	beq.n	80087fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008800:	f003 0310 	and.w	r3, r3, #16
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00a      	beq.n	800881e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008822:	f003 0320 	and.w	r3, r3, #32
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	430a      	orrs	r2, r1
 800883e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008848:	2b00      	cmp	r3, #0
 800884a:	d01a      	beq.n	8008882 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	430a      	orrs	r2, r1
 8008860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008866:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800886a:	d10a      	bne.n	8008882 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	605a      	str	r2, [r3, #4]
  }
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b098      	sub	sp, #96	@ 0x60
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088c0:	f7f9 ffea 	bl	8002898 <HAL_GetTick>
 80088c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0308 	and.w	r3, r3, #8
 80088d0:	2b08      	cmp	r3, #8
 80088d2:	d12e      	bne.n	8008932 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088dc:	2200      	movs	r2, #0
 80088de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f88c 	bl	8008a00 <UART_WaitOnFlagUntilTimeout>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d021      	beq.n	8008932 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f6:	e853 3f00 	ldrex	r3, [r3]
 80088fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008902:	653b      	str	r3, [r7, #80]	@ 0x50
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	461a      	mov	r2, r3
 800890a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800890c:	647b      	str	r3, [r7, #68]	@ 0x44
 800890e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008910:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008914:	e841 2300 	strex	r3, r2, [r1]
 8008918:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800891a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1e6      	bne.n	80088ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2220      	movs	r2, #32
 8008924:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e062      	b.n	80089f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0304 	and.w	r3, r3, #4
 800893c:	2b04      	cmp	r3, #4
 800893e:	d149      	bne.n	80089d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008940:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008948:	2200      	movs	r2, #0
 800894a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f856 	bl	8008a00 <UART_WaitOnFlagUntilTimeout>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d03c      	beq.n	80089d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008962:	e853 3f00 	ldrex	r3, [r3]
 8008966:	623b      	str	r3, [r7, #32]
   return(result);
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800896e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	461a      	mov	r2, r3
 8008976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008978:	633b      	str	r3, [r7, #48]	@ 0x30
 800897a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800897e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008980:	e841 2300 	strex	r3, r2, [r1]
 8008984:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e6      	bne.n	800895a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3308      	adds	r3, #8
 8008992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	e853 3f00 	ldrex	r3, [r3]
 800899a:	60fb      	str	r3, [r7, #12]
   return(result);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 0301 	bic.w	r3, r3, #1
 80089a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3308      	adds	r3, #8
 80089aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089ac:	61fa      	str	r2, [r7, #28]
 80089ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b0:	69b9      	ldr	r1, [r7, #24]
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	e841 2300 	strex	r3, r2, [r1]
 80089b8:	617b      	str	r3, [r7, #20]
   return(result);
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1e5      	bne.n	800898c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2220      	movs	r2, #32
 80089c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e011      	b.n	80089f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2220      	movs	r2, #32
 80089d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2220      	movs	r2, #32
 80089de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3758      	adds	r7, #88	@ 0x58
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	603b      	str	r3, [r7, #0]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a10:	e04f      	b.n	8008ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a18:	d04b      	beq.n	8008ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a1a:	f7f9 ff3d 	bl	8002898 <HAL_GetTick>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	69ba      	ldr	r2, [r7, #24]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d302      	bcc.n	8008a30 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e04e      	b.n	8008ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0304 	and.w	r3, r3, #4
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d037      	beq.n	8008ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2b80      	cmp	r3, #128	@ 0x80
 8008a46:	d034      	beq.n	8008ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2b40      	cmp	r3, #64	@ 0x40
 8008a4c:	d031      	beq.n	8008ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	f003 0308 	and.w	r3, r3, #8
 8008a58:	2b08      	cmp	r3, #8
 8008a5a:	d110      	bne.n	8008a7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2208      	movs	r2, #8
 8008a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 f838 	bl	8008ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2208      	movs	r2, #8
 8008a6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e029      	b.n	8008ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a8c:	d111      	bne.n	8008ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 f81e 	bl	8008ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e00f      	b.n	8008ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	69da      	ldr	r2, [r3, #28]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	4013      	ands	r3, r2
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	bf0c      	ite	eq
 8008ac2:	2301      	moveq	r3, #1
 8008ac4:	2300      	movne	r3, #0
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	461a      	mov	r2, r3
 8008aca:	79fb      	ldrb	r3, [r7, #7]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d0a0      	beq.n	8008a12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b095      	sub	sp, #84	@ 0x54
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aea:	e853 3f00 	ldrex	r3, [r3]
 8008aee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	461a      	mov	r2, r3
 8008afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b00:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e6      	bne.n	8008ae2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3308      	adds	r3, #8
 8008b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	e853 3f00 	ldrex	r3, [r3]
 8008b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	f023 0301 	bic.w	r3, r3, #1
 8008b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3308      	adds	r3, #8
 8008b32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b3c:	e841 2300 	strex	r3, r2, [r1]
 8008b40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e5      	bne.n	8008b14 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d118      	bne.n	8008b82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	e853 3f00 	ldrex	r3, [r3]
 8008b5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f023 0310 	bic.w	r3, r3, #16
 8008b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b6e:	61bb      	str	r3, [r7, #24]
 8008b70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	6979      	ldr	r1, [r7, #20]
 8008b74:	69ba      	ldr	r2, [r7, #24]
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e6      	bne.n	8008b50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2220      	movs	r2, #32
 8008b86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008b96:	bf00      	nop
 8008b98:	3754      	adds	r7, #84	@ 0x54
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b086      	sub	sp, #24
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
 8008bae:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e056      	b.n	8008c68 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d106      	bne.n	8008bd0 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f7f9 f9da 	bl	8001f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2224      	movs	r2, #36	@ 0x24
 8008bd4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f022 0201 	bic.w	r2, r2, #1
 8008be4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f7ff fdbc 	bl	800876c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f7ff fb01 	bl	80081fc <UART_SetConfig>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d101      	bne.n	8008c04 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e031      	b.n	8008c68 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689a      	ldr	r2, [r3, #8]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c12:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	430a      	orrs	r2, r1
 8008c26:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	055b      	lsls	r3, r3, #21
 8008c2c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	041b      	lsls	r3, r3, #16
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8008c42:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	6812      	ldr	r2, [r2, #0]
 8008c4a:	6979      	ldr	r1, [r7, #20]
 8008c4c:	430b      	orrs	r3, r1
 8008c4e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f042 0201 	orr.w	r2, r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f7ff fe25 	bl	80088b0 <UART_CheckIdleState>
 8008c66:	4603      	mov	r3, r0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <memset>:
 8008c70:	4402      	add	r2, r0
 8008c72:	4603      	mov	r3, r0
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d100      	bne.n	8008c7a <memset+0xa>
 8008c78:	4770      	bx	lr
 8008c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c7e:	e7f9      	b.n	8008c74 <memset+0x4>

08008c80 <__libc_init_array>:
 8008c80:	b570      	push	{r4, r5, r6, lr}
 8008c82:	4d0d      	ldr	r5, [pc, #52]	@ (8008cb8 <__libc_init_array+0x38>)
 8008c84:	4c0d      	ldr	r4, [pc, #52]	@ (8008cbc <__libc_init_array+0x3c>)
 8008c86:	1b64      	subs	r4, r4, r5
 8008c88:	10a4      	asrs	r4, r4, #2
 8008c8a:	2600      	movs	r6, #0
 8008c8c:	42a6      	cmp	r6, r4
 8008c8e:	d109      	bne.n	8008ca4 <__libc_init_array+0x24>
 8008c90:	4d0b      	ldr	r5, [pc, #44]	@ (8008cc0 <__libc_init_array+0x40>)
 8008c92:	4c0c      	ldr	r4, [pc, #48]	@ (8008cc4 <__libc_init_array+0x44>)
 8008c94:	f000 f818 	bl	8008cc8 <_init>
 8008c98:	1b64      	subs	r4, r4, r5
 8008c9a:	10a4      	asrs	r4, r4, #2
 8008c9c:	2600      	movs	r6, #0
 8008c9e:	42a6      	cmp	r6, r4
 8008ca0:	d105      	bne.n	8008cae <__libc_init_array+0x2e>
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
 8008ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ca8:	4798      	blx	r3
 8008caa:	3601      	adds	r6, #1
 8008cac:	e7ee      	b.n	8008c8c <__libc_init_array+0xc>
 8008cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cb2:	4798      	blx	r3
 8008cb4:	3601      	adds	r6, #1
 8008cb6:	e7f2      	b.n	8008c9e <__libc_init_array+0x1e>
 8008cb8:	08008d34 	.word	0x08008d34
 8008cbc:	08008d34 	.word	0x08008d34
 8008cc0:	08008d34 	.word	0x08008d34
 8008cc4:	08008d38 	.word	0x08008d38

08008cc8 <_init>:
 8008cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cca:	bf00      	nop
 8008ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cce:	bc08      	pop	{r3}
 8008cd0:	469e      	mov	lr, r3
 8008cd2:	4770      	bx	lr

08008cd4 <_fini>:
 8008cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd6:	bf00      	nop
 8008cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cda:	bc08      	pop	{r3}
 8008cdc:	469e      	mov	lr, r3
 8008cde:	4770      	bx	lr
